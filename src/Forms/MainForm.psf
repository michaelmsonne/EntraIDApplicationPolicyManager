<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAALVrSURBVHhe7P3Xb2PbvraJfZdG/x0f0L6yDbcv
2gZs2NcGDBgwYHfbfeJ39ll777VXrLQqB5WqSjnnnHPOOeecRWWJIimRVGCQKFHSY4xJUaVSJVUO
6/cILzg1cxhzjHeO+F/+iyAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAI/+W//Jcb/+v//r8vfvLUvzg8IqY4JDRKJBKJRCLRN6iomMTi
X3/9vfi/++/+V8UXE/uX+K//9b/WZxdVM76yzfjyNmNLVpFIJBKJRN+gJlRavmTh5u37XEzvX+LJ
08DiidUdWkcWaRmap2V4QSQSiUQi0as05PltvaRe2v4ddXF/r5N3/eaheTon9XQPz77dAERFxxXP
rNtoG1mifdSjtvFlWibWaJ7Qa9Pe+SKRSCQS/ZnVMbaspZeN/TqaBubeKLVO8+A8HeNqm0WaBtT/
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
sKhUUjPySUzJIyomheL6fgbnNrWc4Y7RZao7JhlbtjK+us3g1NLlDIB+95jRZQuja9uMj6ywGF3P
elMfho4+lhOamWibZtRgY3x5Q0vIWwam6R5bpH9mjZ7xRdqHpmgf1jEwo6djYIzmvilGVrYYnFml
Z3yOxo4+2obnGV/dZXBalZOvMra0SefQGOXVzTQNzmk5BGXVLVptyf6pZe1mqWz21t4ROkbnae1V
DmqerpFZ2gan6ZtapXNwnOb+GfqmV7R11bmMLG/RN7lIv/p/YomBmVVtm+buYTpH57Ss+P7p03ld
w3RPLNM1NE5JZT1towu094/TMaLWW6Fvapm+6VV6J5bpGZujuX+KrtF57bp7J5boGJyke2qd0fl1
eibXmFy3Mzy3SmPHAF1q+8lFukYX6J9eoblriL7Zdepbu+meNjG5atXOt39qld6pFc81D8/Q1D1C
15jn2r3zGrtG6JtaobVngJLqFronl2npHTu9njXGV7e0hy4SiUSiT6fxlS0tQa7tmNL6zRnSvugt
1PfMUN4yQkXLiJbTPTS/ydCCRVvWM6HXDIBKM2YMDibXbEzq7bSPLNHQO6N9EDYPzDO+ssPkml1b
Nq5ysvtnqOuc1o45smjVzEOLqvXfr9NaIaiPY5X4j6plS1YGZozUdEwyubbD1LqN4ZmVyxkAgx0m
Vrc9HQgY7YzrLCxUNbFUXs3EsIFxk0NbpvoLmFp3MKW3aZpc22XydNr7/5TezvS6XVvf87+N6dNt
tGOoeWu72u/E8iadwwtMm1wMTS/SM2lg2qhukGc77XfdfvbrPc75Y6kL1c7j9FzUMbQbfH4f587B
u642z+BgWr9D99CkVo9hdHVXe0Dn1/Ps17uP89ftOb662dp90e8ysbKlXZe6fnWN6jy8688Y97Rr
bBua95ynuj/e8zt/TqfX+eJ5OplcsdDeO0Jz3wwT644X1vM8G5FIJBJ9Sk2u7jC6ZKW6bZLmvrkz
tQ8t0T68fKbm/nltfkv/PDXtk7QOLdEzscyA+rCbXtN+h+eMjCxsMDJv0qQ+oLVlM3p6xpfomVyl
rnOGxl6dtq+mvjnahpY0tQ4snB2nqXeOlr45zZS0DCxo6dSM0cnI7OrlDIDRgZaAeROiyXUbE5su
JswHTBo9CfCnkSfB0xyLMg4XE97PJq9BuDj/Y8t7vRfnX05e03L2nEQikUj0WaXSKfXVrcr4Vdb8
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</Preview>
  <Form>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
QwEA</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $global:ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formEntraIDApplicationMa.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}

function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}

function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	try
	{
		if ([string]::IsNullOrWhiteSpace($LookupInput))
		{
			$msg = "Please enter a domain name or tenant ID."
			[System.Windows.Forms.MessageBox]::Show($msg, "Input Required", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			Write-Log -Level INFO -Message $msg
			return
		}
		
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			$msg = "Failed to retrieve tenant ID for '$LookupInput'. Please check the input and your network connection."
			[System.Windows.Forms.MessageBox]::Show($msg, "Lookup Failed", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
			Write-Log -Level INFO -Message $msg
		}
	}
	catch
	{
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage, "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click = {
	
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Retrieve the application ID from the textbox
		$appId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($appId))
		{
			Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned secrets" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Application"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			New-AppManagementPolicyAssignment -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-AppManagementPolicyAssignment -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process $global:WebsideURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:WebsideURL"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

$btnUpdateTenantwidePolicy_Click = {
	
	try
	{
		$params = Get-TenantWidePolicyUpdateParams
		if (-not $params) { return }
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			Write-Log -Level INFO -Message "Calling Graph to update tenant policy..."
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			Write-Log -Level INFO -Message "Policy updated successfully."
			Load-CurrentDefaultApplicationPolicy
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$buttonREsetDefaultPolicy_Click={
	
	Reset-DefaultTenantPolicy
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:GitHubRepoURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website $global:GitHubRepoURL"
	
}]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>