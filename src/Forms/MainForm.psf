<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>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
IR8dACxOBgBCCCHkqvJRAUCmtGJLZ5cGppRSSunVc11jw/qe+8MCQEpqRq3RC2zsubGuc0vJgVJK
KaVXT3Es3zEdQraz9/4A8Px5dMeuziylBUoppZRebWXbe5icW31/ACCEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCHkK+T/BHHz8NjeJfMwAAAAAElFTkSuQmCC</Preview>
  <Form>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
+1Gj05zau3GALqG7Okavf27/+v9yxc11REQBAA==</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $global:ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formEntraIDApplicationMa.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}

function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}

function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click = {
	
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Retrieve the application ID from the textbox
		$appId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($appId))
		{
			Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned secrets" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Application"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			New-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process $global:WebsideURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:WebsideURL"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

$btnUpdateTenantwidePolicy_Click = {
	
	try
	{
		$params = Get-TenantWidePolicyUpdateParams
		if (-not $params) { return }
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			Write-Log -Level INFO -Message "Calling Graph to update policy..."
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			Write-Log -Level INFO -Message "Policy updated successfully."
			Load-CurrentDefaultApplicationPolicy
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	Reset-DefaultTenantPolicy
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:GitHubRepoURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website $global:GitHubRepoURL"
	
}]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>