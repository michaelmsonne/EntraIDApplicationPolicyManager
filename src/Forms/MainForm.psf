<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>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
DeztqqHe2Yd+ZQJf37iNnrk1xEXdxevaPthtdni9Pvj8fjQXpeOrp29hcARb3yKEkEhAlHEMAPSL
9mMHgHACPh98gWC/bs/p7d/n8YR3IoSQzw4DAP3i/ZgBQHRzu8Mes3n4lC2Pxwuvzwev5+SzwMWZ
APEkrvBHc1JK6afyVDl1rHvgsGxjAKBfvB8zAGwr1Vhb35K2YUopjVQV26pT3YTrG8HyS8AAQL94
P3YAMJst0nCUUhqpil/7odei7LPbg69FeSbCgYABgH7xfswAoFRpYDSaTk2DUkojSdHOv/gvbvML
HfjFe1EGih8yAgYA+sXLAEApvW6KACAO/qLM6+zsxOrq6lEZyABAr40MAJTS66YIAKLMGxoaQnx8
PIqKiqDX62GxWBkA6PWRAYBSet0MnQGYn5/H2NiYpEajkboxANBrIwMApfS6GaoD4HA44HK5pPei
LOMlAHqtZACglF43QwEgXAYAeq1kAKCUXjcZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChl
AKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCU
XkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZ
AChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChl
AKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCU
XkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZ
AChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChl
AKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCU
XkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZ
AChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChl
AKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCU
XkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZAChlAKCUXkMZ
ACgNCwDivdgxhA6HgwGAUvpFGgoAotwLlXkWi4UBgF4vQwFA7AA6nQ6zs7OSMplM2jkYACilX5qh
A/7y8rJU3s3MzEjln+jGAECvjaEA4HK5pB2gsLAQCQkJ6Onpkbqp1FoGAErpF6UIAOIHTn9/v1Te
FRQUQKvVSuUZAwC9Nh6/BCAUv/ybm5thMBikywA8A0Ap/dIUAUCUXUajUSrvlpaWpPKOlwDotTK8
EqDYHoXiVBjrAFBKv0SDdQD2pXIuVOaJ7p89AKxvbB1VRqD0U2symWCxBHcA8Voc7EM7guguAqnJ
tP/ebfZ4ABD97u0ZTk2DUkojydAPHmGwvAuWeeKMwKZ8WyrPLj0AiP+KbZVUkG5vqym9JFWHnuwu
tsWNDblUF+B92+zxALCzs4eNTcWp8VBKaSQpyrbwbsLNLQV0+p2j4/GlBABCrhLhASD0mhBCviTO
Oj5/1AAgTjuI6xFut5vSiFecDRDbbOigL06ficoz4f1RSulVVhyXRVkXzkcNAB6PRypAKb0qip2D
2y+l9EtXlG/hfNQAQAghhJCrAQMAIYQQcg1hACCEEEKuIRcOABYnAwAhhBByVblQAJCprNjU26WB
KaWUUnr1XNPasLbj/rAAkJySXmP0Aus7bqzp3VJyoJRSSunVUxzL5aYDyOQ7fxwAnj+Pbt/Wm6W0
QCmllNKrrWxrBxOzK38cAAghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgj5Avn/
A13Tx597TFLLAAAAAElFTkSuQmCC</Preview>
  <Form>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
B9Ynlk45RAEA</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $global:ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formEntraIDApplicationMa.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}

function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}

function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	try
	{
		if ([string]::IsNullOrWhiteSpace($LookupInput))
		{
			$msg = "Please enter a domain name or tenant ID."
			[System.Windows.Forms.MessageBox]::Show($msg, "Input Required", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			Write-Log -Level INFO -Message $msg
			return
		}
		
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			$msg = "Failed to retrieve tenant ID for '$LookupInput'. Please check the input and your network connection."
			[System.Windows.Forms.MessageBox]::Show($msg, "Lookup Failed", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
			Write-Log -Level INFO -Message $msg
		}
	}
	catch
	{
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage, "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click = {
	
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Retrieve the application ID from the textbox
		$appId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($appId))
		{
			Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned secrets" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Application"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			New-AppManagementPolicyAssignment -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-AppManagementPolicyAssignment -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process $global:WebsideURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:WebsideURL"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

$btnUpdateTenantwidePolicy_Click = {
	
	try
	{
		$params = Get-TenantWidePolicyUpdateParams
		if (-not $params) { return }
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			Write-Log -Level INFO -Message "Calling Graph to update tenant policy..."
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			Write-Log -Level INFO -Message "Policy updated successfully."
			Load-CurrentDefaultApplicationPolicy
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$buttonREsetDefaultPolicy_Click={
	
	Reset-DefaultTenantPolicy
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:GitHubRepoURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website $global:GitHubRepoURL"
	
}
$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>