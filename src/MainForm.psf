<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGJ0SURBVHhe7d3nb1v54ib2vEuQP2OTfRVggyBB
EmSxi7wNEARBgCRIsru/3bv3zp07fcbj3rst25LVe++99967RPUudoq9U6QkSk/wPRRlmZYtz1i2
JfL5AA9EsRweSofnPDw85T/5T4iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIjCxrV//s//y+onT6Oq4xPSql/H
JjEMwzAMcwGTlJJZ/dMvv1T/5//Zf1odurB/x3/xz/5Ze2F5PeYUNswpbZiVWxiGYRiGuYCZV4nl
uAlXrt1E6PL+HeKTv3hAr2wT3VPr6JnaYBiGYRjmfZn+g/mCjxHL8aFFLYamlk8vAEnJadXLWid6
ZXL0zwTSNytHz7wa3XMa9M0pjq5nGIZhmEjOwKwisKCdXD81XZPr6BOPmVOgd1o8Zg090gft90fc
p3d6EwNzSvTJ5NIwQod7UsQ4iXET4zi4oMHIzNrpBSA+Ibl6WevCwKwSg+LBCyr0Tysw0z2MxZ4u
DA+soW9RjcE5BQbFfeaY06M44bqTcux+s++5zDAMw5yLDC+o0TK4gMqWMVS3T3xUajom0Tm2gqbe
SbQMTKO5fxqtgzPoGltE59ii9LNjZB4t/dNHaeoLPKa6ffKt4TT0zKK+WyZFXBbXSbe1T0jj1Dq0
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
PhnmYyOW0SwATNjnUwqAmLmKaVkkdBUswzDMRUxwnibmb0EsAExY5lMKABFRJGABYMIyLABERB/G
AsCEZc6yAOyJYwDsvpmuiYjCAQsAE5Y5ywKwON6HntE16bLX44a089XBDuyuwP0dTgcMeh1MVvEd
m0u6bs/ngdO7c3wwRETnCgsAE5b5lAJwfCPAnd1dzA93o39aA7dlE5nJz1HU1IyOhly8TM1BVXUJ
UjMTEJuSjaT4JLyOTkRVVSNqyhMQlV4Gu28fHo+bGxQyDPNVw40AmYjJpxSA47sBijfL7EALKlpG
MdJVjaraKiTHvUR+RR36W6px91EMpsf78fjGdVy+G4+1jXU8v30TzZ1tqCmtgsbhl94TobvjMAzD
fOmIZTR3A2TCPp9aAI4fCMimXUV2Tj5ae7vRVFeCqXU1GnJe4n//4SZaWhrxT3/5t4gqrMfYxDws
Vis2l+cRc/9n/N83YuDaO/YkRERfEQ8ExEREzrIAnGRtYRaTa0rYTEYMjk7AFXJUVtn4GBY0xrev
JCL6ilgAmIjI5y4AREQXDQsAExE5qwKwv38AjXYLarVO+skwDHPuojl5/qTW6KQEN/xjAWAiImdV
ALxeH5ZX1mCxWGA0mRmGYc5XjCZYrTaYze/Oo8R8a3l1HR5PYN7GAsBERM6yAIj7il35xDAZhmHO
U8Q8Tcy7xK5+4rL4KeZfDoddmm8pVRoWACayIt4YZ1UA5AoV3O7Am4thGOY8RczPxII9eKyRrS3x
lYDmsAi4Dj/AsAAwERQWAIZhIiHBAiAW+FarFbW1tSguLoZer5fmaSwATMSFBYBhmEhIsAB4vV7M
z88jLy8Pubm5GBkZkeZlLABMxIUFgGGYSMjxNQBmsxkGg0GKyWSS5mMsAEzEhQWAYZhIyPFtAMR8
T/wMXuY2AExEhgWAYZhIyPECEHobCwATkWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAw
IWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhYQFgGCYSwgLAMCFh
AWAYJhLCAsAwIWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhYQFg
GCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgm
EsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLC
AsAwIWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhYQFgGCYSwgLA
MCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAh
YQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEB
YBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAY
JhLCAsAwIWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhYQFgGCYS
wgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsIC
wDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAw
IWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhYQFgGCYSwgLAMCFh
AWAYJhLCAsAwIWEBYBgmEsICwDAhYQFgGCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhYQFg
GCYSwgLAMCFhAWAYJhLCAsAwIWEBYBgmEsICwDAhCS0A4ncRcZkFgGGYcAkLAMOE5HgBEJfFtBl8
g7AAMAwTLmEBYJiQBAuA+Nnd3Y3q6mrU1tZCpVJJ0ykLAMMw4ZDjBUBEzMdEXC4XCwATmQkWAPEm
kMlkSExMRENDg/RmEbezADAMEw4JFgAx/1pZWUF7e7uUmZkZeL1eFgAm8hL6FYB4M+h0OqkQ8CsA
hmHCJccLgFKpRHZ2NlJSUrC0tCTN175aAVCqNHAdrpZgmC8ZsaDf2fEdXnbC5/NKC3XpdodDmjaP
YwFgGOYi5vhXAGK+NT8/j4mJicOvANxfrwCsrm5Ao9FBp9MzzJfNlh4Gg+nd63V6qNUarK1tvjXt
fqgABN5A7qM9CRiGYc5LRAkIft3pcIgN/9zSgl7cJuZb4sPOVykADocTer0RRqOZYb54DEbTO9eJ
iGnS6XS9Ne1+qAAsr6zBYrHAaDIzDMOcrxhNsFptMJsD8yjTYcRlMd9aXl3/OgWA6KJ4XwHY3z+A
RrsFtVon/WQYhjl30Zw8f1JrdFL29/el+dlnLwAHBwehVxOde2Khf7wAiDcKEVE4EfO4z1YAxHcO
4nuI4H6IDHNREvweTdjd3YXVan3nPgzDMBc5YoNB8QEn6EwLgFj9L/Y7FA2DYS5ajq+9Em8STssM
w4RLgvOz4/O5My0AREREdDGwABAREUUgFgAiIqII9KcLgI0FgIiI6ML6UwVgUePE+pZbejDDMAzD
MBcvK1oX1gwfWQCSktOqLbvAutGHVYNPag4MwzAMw1y8iIW/wnaAhU3D6QXgydOoNsWWTWoLDMMw
DMNc7Cxs6jE6vXh6ASAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiOqf+f7RwJlyBbrxpAAAAAElFTkSu
QmCC</Preview>
  <Form>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
WOUvUYgAenqd5B//2fz+/wE94K31L9EAAA==</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | State: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		try
		{
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
			Show-MsgBox -Prompt "Policy '$policyId' assigned successfully to application '$objectId'." -Title "Assign Policy" -Icon Information -BoxType OKOnly
		}
		catch
		{
			Show-MsgBox -Prompt "Failed to assign policy. Error: $($_.Exception.Message)" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

function Show-PolicyManagementForm
{
	# Create a new form for policy management
	$formPolicyManagement = New-Object System.Windows.Forms.Form
	$formPolicyManagement.Text = "Policy Management"
	$formPolicyManagement.Size = New-Object System.Drawing.Size(500, 400)
	$formPolicyManagement.StartPosition = "CenterScreen"
	
	# Create a GroupBox to contain the policy management controls
	$groupboxPolicyManagement = New-Object System.Windows.Forms.GroupBox
	$groupboxPolicyManagement.Text = "Manage Application Policies"
	$groupboxPolicyManagement.Location = New-Object System.Drawing.Point(10, 10)
	$groupboxPolicyManagement.Size = New-Object System.Drawing.Size(460, 340)
	$formPolicyManagement.Controls.Add($groupboxPolicyManagement)
	
	# ListBox to display existing policies
	$listboxPolicies = New-Object System.Windows.Forms.ListBox
	$listboxPolicies.Location = New-Object System.Drawing.Point(10, 20)
	$listboxPolicies.Size = New-Object System.Drawing.Size(440, 120)
	$groupboxPolicyManagement.Controls.Add($listboxPolicies)
	
	# Button to refresh policy list
	$buttonRefreshPolicies = New-Object System.Windows.Forms.Button
	$buttonRefreshPolicies.Location = New-Object System.Drawing.Point(10, 150)
	$buttonRefreshPolicies.Size = New-Object System.Drawing.Size(130, 30)
	$buttonRefreshPolicies.Text = "Refresh Policies"
	$buttonRefreshPolicies.Add_Click({
			try
			{
				$policies = Get-PolicyList
				$listboxPolicies.Items.Clear()
				foreach ($policy in $policies)
				{
					# Format each item as: DisplayName (PolicyId)
					$listboxPolicies.Items.Add("$($policy.displayName) ($($policy.Id))")
				}
			}
			catch
			{
				Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonRefreshPolicies)
	
	# Button to launch the policy creation pop-up
	$buttonCreatePolicy = New-Object System.Windows.Forms.Button
	$buttonCreatePolicy.Location = New-Object System.Drawing.Point(150, 150)
	$buttonCreatePolicy.Size = New-Object System.Drawing.Size(130, 30)
	$buttonCreatePolicy.Text = "Create New Policy"
	$buttonCreatePolicy.Add_Click({
			# Use input boxes for new policy details
			$displayName = Show-InputBox -message "Enter Policy Display Name:" -title "New Policy"
			if ([string]::IsNullOrEmpty($displayName))
			{
				Show-MsgBox -Prompt "Display Name is required." -Title "Policy Creation" -Icon Exclamation -BoxType OKOnly
				return
			}
			$description = Show-InputBox -message "Enter Policy Description:" -title "New Policy" -default ""
			$passwordMaxLifetime = Show-InputBox -message "Enter Password Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			$keyMaxLifetime = Show-InputBox -message "Enter Key Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			
			# Create the new policy via Set-AppManagementPolicy
			Set-AppManagementPolicy -DisplayName $displayName -Description $description -PasswordMaxLifetime $passwordMaxLifetime -KeyMaxLifetime $keyMaxLifetime
			Show-MsgBox -Prompt "Policy '$displayName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
			
			# Refresh the policies list
			$buttonRefreshPolicies.PerformClick()
		})
	$groupboxPolicyManagement.Controls.Add($buttonCreatePolicy)
	
	# Button to assign the selected policy to an application/managed identity
	$buttonAssignPolicyToSelect = New-Object System.Windows.Forms.Button
	$buttonAssignPolicyToSelect.Location = New-Object System.Drawing.Point(290, 150)
	$buttonAssignPolicyToSelect.Size = New-Object System.Drawing.Size(130, 30)
	$buttonAssignPolicyToSelect.Text = "Assign Policy"
	$buttonAssignPolicyToSelect.Add_Click({
			if ($listboxPolicies.SelectedItem -eq $null)
			{
				Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
				return
			}
			# Expecting the format: "DisplayName (PolicyId)"
			$selected = $listboxPolicies.SelectedItem.ToString()
			if ($selected -match "\((?<id>.+)\)$")
			{
				$policyId = $matches['id'].Trim()
				# Prompt for the target Application/Managed Identity ID (from the main form textbox e.g. $textboxSelectedIdentityID)
				$objectId = Show-InputBox -message "Enter Application/Managed Identity ID to assign the policy:" -title "Assign Policy"
				if ([string]::IsNullOrEmpty($objectId))
				{
					Show-MsgBox -Prompt "Application/Managed Identity ID is required." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
					return
				}
				Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
				Show-MsgBox -Prompt "Policy assigned successfully." -Title "Assign Policy" -Icon Information -BoxType OKOnly
			}
			else
			{
				Show-MsgBox -Prompt "Failed to extract policy ID from the selected item." -Title "Assign Policy" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonAssignPolicyToSelect)
	
	# Refresh policies on form show
	$formPolicyManagement.Add_Shown({ $buttonRefreshPolicies.PerformClick() })
	
	# Show form modally
	$formPolicyManagement.ShowDialog()
}

$buttonCreatePolicy_Click={
	
	# Retrieve values from textboxes
	$dispName = $textboxPolicyDisplayName.Text.Trim()
	$desc = $textboxPolicyDescription.Text.Trim()
	$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
	$keyMax = $textboxKeyMaxLifetime.Text.Trim()
	
	# Get the overall policy enabled state from the existing checkbox
	$globalEnabled = $checkboxPolicyEnabled.Checked
	
	# Get state for individual restrictions from the new checkboxes
	$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	
	if ([string]::IsNullOrEmpty($dispName))
	{
		Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Call your function and pass the additional state parameters.
	# (Update your policy creation function to accept -PasswordState and -KeyState parameters.)
	New-AppManagementPolicy -DisplayName $dispName `
							-Description $desc `
							-PasswordMaxLifetime $pwdMax `
							-KeyMaxLifetime $keyMax `
							-PasswordState $pwdState `
							-KeyState $keyState `
							-Enabled $globalEnabled
	
	Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to delete policy ID: '$policyId'?" -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		# Retrieve the assigned policy/policies for the application.
		# This function must be implemented to query your system/MS Graph for assignments.
		$assignments = Get-AppManagementPolicyAssignments -ObjectId $appId
		
		if ($assignments)
		{
			# Format the output (you could also loop through them and format your list as needed)
			$result = $assignments | ConvertTo-Json -Depth 5
		}
		else
		{
			$result = "No policies are assigned to Application ID '$appId'."
		}
		
		# Display the result in the textbox (it can also be a multiline textbox)
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt "Error retrieving assigned policies: $($_.Exception.Message)" -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>