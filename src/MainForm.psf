<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAEpDSURBVHhe7d3Xcxz3wub3vbPLf8bae+Wqdbns
sl3e2i3f+sLlO1fZ3vXuvu973hN0dI4oHUmkJIo5R4AkQIAEQRAZIHJOg5xzzsAAgxmkGQyAQU6P
69cgSHBIUTwSg4j+fqqewmBCTzfQ0/1MT3fPv/gXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAwJFx/F/9q/8m4+Klqxl37kZm3A4JI4QQQsgnmLD7URl/+eKLjP/qv/wv
MoJX9q/4r//lvyyJT81Rt9Ov7gm/usZ9hBBCCPkE0zNp1uPz+ub49wpe37/CvPM3D6jsGFN524gq
2kYJIYQQ8lNp/zvzAR9j1uN1fW7VtQ38fAEIC4/MGHAvq7JjXNWd+6nqGldFj0vl3VOq6nY+v54Q
Qgixc2q6nPsr2taRn42jdURV5jHdTlW2m8cMq8J6o/3TMfepbB9TTfeEqjrGrWEED/d1MeNkxs2M
Y23vlBo6h3++ANy5G54x4A6opmtCtebBvZOqbneqs7xefRUO1dcMq6rPpdpup2rNfbrJz8f5mute
l0P36/qJy4QQQn4Tqe91qbC2V2mFTcooaXmrZJa2qqxpUPmVrSqsaVdBdbuKajvlaOpTWVOf9bO0
oUeF1e3Pk1+1/5iMktaXhpNb0aWc8g4r5rK5zrqtpMUap6K6PmscG/o9qu8YfLsCMOhZUW33pGr7
XKpvG9NUVptWega16uzVYn6nukq7VDPoVl3PpOrMFoGOUdWay8/S0OdWfe+L319Kr0u1XfvNqaFv
6tn1LmskTV65//NMWG0m+Pp602z6pqxhmnEOvv15Dob/s8/z6/Ji2ven0xSpl57PTP+zFb25T/Dj
TQ7ub6Yt+DZCCCG/jTT2u5VR0iZH86CqOsZU1T62/zM45vr2MWs9llveoSxHq2rah9U4MK2mAY+1
NSA1v0bpRfV6ml+rHEerNWyzPmkamFZ1+5Ayy1qUW9FprT/MMB0tQ3paUKunBfXPUitH89Dz5yxr
HFBmWbs1HPM8DZ1Db1MA7mcMz6yp3qxUh6Y1mt+hdeeE/FqUb09a3t3VQlG7mtrG1Tg0pYLSKuVX
tqm+z6OmwWk1D7pV0dSr2h63mgY91srZTIBJbfuQSmralFdapaziKpU0DKppcEZNfRPKLapQRbtT
zeb3Ac+zmMfNqr5zUIUVLdZENQ7OqLFvf6XfNDCjhp4xVTQPqLp9RHU95jqPGp8/dv9n8+CUcgsd
KmkeU0v/uDJyS1TZNaXmwf3xOni+/T/U4ce+PJwXCbrNGo7npWlv7B1VTqFD2SW1qu5yWc/VPDQj
R22rSurMfSatx+1Px/44m9vL65qUVdKo1jGvikrLlVfVpeah2efPtT9+++P68nWHxmtw+tnMs/93
IoQQ8u5jlus55Z2qaDGb6cetlXx114QcLaMqaxmxUt25v+m+qn1cdd2TKqjqVl5lh+q6xqzldvuY
VwmZDiUmpir1aaays/P1IDpRjpZhNVvrr2nVdY4qt7JDhdU9+5v1uyaUUdqi+MRMFRZXWolPyrKu
M286zUcGjqZBa6vA/rpnVk1dI29XAMbnN9Q8NK3mAY+mKwq0Opqm3fb/S5v9P2pt6pGWmwrVX1ep
lvF55Rc5VNo4pJrWbuUWVamkrk2ZOYXWpo3CimZVt/Upp7hStT0eNXYPqaiiXoVV7Wrqdyq/rF7N
owtq6BxUQVmNyluGVNPSrdziajmaelVW06w8R4PKGtpVWN6oipZBVTZ3q7CqTfXdY8ovq1ZheY3S
cstU3tyvqpY+FTpqVNrYo/L6NuUUVcrRMqLO8RnlFRQpt7JLde3dSs0qVnX7sPJKqlTe3KvCsmqr
xDT0jiu3uEIVLUMqq22ynruytV95RRUqruuwxj3fYVKn0sY+VTW1K7u4RmX17corrramPSM73yoa
rQOjKnA0qrCyUaX13SquqFNJfZdKqptVVN2h6rYhldY0q6SmVZXms5q2PtX2ulXT1KLUrDLV9zqV
nZuvotpeOWobVFjTKUdti3KKq1XV6VR5bYMKzHBaepRXUq2yxl6VVTcor7xJJdVNKqnvU+vIrFqG
pgkhhLyHtI/OKa+yW1VtY6rpMluXPUrJqVJ6dqmy8iuUketQUma56rqnVNO1v4W4sKZXhTVdauhx
qmV4Tp1Ov57mVSkzM0fnr95X1ONkpWfkq6x5WG3Dc2odnlN997gKqrtUVNtnFQ9ry3KfW2HR6RoY
GLRyLzrNum7/o/lJVbaOKL+6xxrHjjGvmntG364ATCxsq210Tq2uBQ3GODRd16IZZ5s8I12anhrQ
RFSxOppH1DE5p4KSClV0jKu8tlEltR0qqaxTQUWzKpo6VFTZpuqWLj3NzJOjbUKt/WMqrmxQYVWr
6ruHVVTVrs5Jv0orqq2SkFNarcKKepXWdqq4qlZ5jkaVN3RaK3qrOJTXKae0Vg2Ds6pv61Z6ToFy
S6tVWt+l8vpWZRdWyNHYJ0d9o3JKauWob1dBRas6J+ZVUtlgDSOvol4lVWYl2aqM3CLlllapuLbD
KhtFVa3KzCuyxqW0odsqATlF5UrPc6isrsmartLqJpXWd6q4olaZecXKrWi2SkdZfac17XmOetX1
zapjaFxZOUUqaxlWdVObimu7VN7QrPyKBhU46pRfXKWi2i51jM2qtKpeBZWtahv3q6a5wyo71njV
NKu4slkFZeXKKq5Qfrn5e3So0NGgovJKZRY6VFDZooqGDuWXVCgjp0hFVhmpVHX3lDrH5q1/PiGE
kHefLqdPBdU9qu4YV23PlBoHZhQZk67yMofqautUU1WtyOgU67baHpe1tdasxIvre9TUO6m2Ea+6
J5eUnF2phPgUpaRmKCsrVw8fJaqqY0LtI14rjb0TKqrrUXFd//47+sEZFdR0625YtGLjn1oxlwtq
eqzbTNGobh+39k/omvCpe9Kvlt7xtysArsVddYx71THlV3fLmJz3ijTVMCh395BcifXqz2hSh3tZ
3RNeVda3qrShSzVtA2ronVBd57D1Lr28qVsN5rPutl4VVjZZf5iOYbfqOobkqG1WcU2bmofm1O2c
VVVLj1qHZ9XQNaDCsirlFNeqrntURWWV1orRvNu33iF3jqiuo1+ldZ2qaetXUWWjajqGVNHYqarW
AdV3jai0qlFVHSPWeDT2jqumfURdkz7Vtg+qodvsFTmixu4RVTZ1q7iqWVVt/arvcb64rrLRep7q
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
6v8HV8OLH5vDGtkAAAAASUVORK5CYII=</Preview>
  <Form>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
AUMp3KeNogAA</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfManagedIdentity.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfManagedIdentity.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfManagedIdentity_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecrets.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecrets.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecrets.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>