<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGo2SURBVHhe7f3Xb1t74y74zd0E82dMMlcDzCBI
kAlyMIPcBhgEuUqQZM6cc37nLbu/e29v995tybZs9d57711U743qXWLvnZRIUZSewXfRlGlatlxk
WxKfD/BAFOtiW+vhqv/Ff0FERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERER0blz5b/6b/0PNo8cxNQmJ6TUvXyUz
DMMwDHMGk5yaVfPb77/X/Ff/u/+yJnJi/47//X/9X3cUVTRgTmHHnNKO2S0rwzAMwzBnMPMqMR03
49KV64ic3r9D/PIXN+iVb6J7ah09UxsMwzAMw7wv05+Yb3gbMR0fWtRiaGr5+AKQnJJes6x1oVe+
hf6ZYPpmt9Azr0b3nAZ9c4rD8xmGYRgmmjMwqwhOaCfXj41sch194jZzCvROi9usoUf6of3+iOv0
Tm9iYE6JPvmWdB+R93tUxDCJYRPDOLigwcjM2vEFICExpWZZ68bArBKD4sYLKvRPKzDTPYzFHhmG
B9bQt6jG4JwCg+I6c8zxURxx3lEJu97se04zDMMwpyLDC2q0Di6gqnUMNR0TH5Xazkl0ja2guXcS
rQPTaOmfRtvgDGRji+gaW5T+do7Mo7V/+jDNfcHb1HRMvnU/jT2zaOiWSxGnxXnSZR0T0jC1DS1K
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
lcjJyUFqaiqWlpak8dp3KwBKlQbu17MlGOZbRkzod3d9r0+74PN5pYm6dLnTKX02w7EAMAxzFhO+
CECMt+bn5zExMfF6EYDn+xWA1dUNaDQ66HQGhvm20RtgNJrfPV9ngFqtwdra5luf3Q8VgOAXyHO4
JQHDMMxpiSgBocWdTqdY8c8jTejFZWK8JX7sfJcC4HS6YDCYYDJZGOabx2gyv3OeiPhMulzutz67
HyoAyytrsFqtMJktDMMwpysmM2w2OyyW4DjK/DritBhvLa+uf58CQHRWvK8A7O8fQKPVQ63WSX8Z
hmFOXTRHj5/UGp2U/f19aXz21QvAwcFB5NlEp56Y6IcXAPFFISI6T8Q47qsVALHMQSyHCG2HyDBn
JaHlaILf74fNZnvnOgzDMGc5YoVB8QMn5EQLgJj9L7Y7FA2DYc5awudeiS8JP8sMw5yXhMZn4eO5
Ey0AREREdDawABAREUUhFgAiIqIo9NkFwM4CQEREdGZ9VgFY1LiwrvdIN2YYhmEY5uxlRevGmvEj
C0BySnqN1Q+sm3xYNfqk5sAwDMMwzNmLmPgr7AdY2DQeXwAePY5pV+jtUltgGIZhGOZsZ2HTgNHp
xeMLABERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERHRKfW/AQadjlij+lc2AAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecrets.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecrets.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecrets.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | State: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listViewPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			$row = New-Object System.Windows.Forms.ListViewItem($policy.displayName)
			$row.SubItems.Add($policy.isEnabled)
			$row.SubItems.Add($policy.description)
			$row.SubItems.Add($policy.Id)
			$listViewPolicies.Items.Add($row)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

function Show-PolicyManagementForm
{
	# Create a new form for policy management
	$formPolicyManagement = New-Object System.Windows.Forms.Form
	$formPolicyManagement.Text = "Policy Management"
	$formPolicyManagement.Size = New-Object System.Drawing.Size(500, 400)
	$formPolicyManagement.StartPosition = "CenterScreen"
	
	# Create a GroupBox to contain the policy management controls
	$groupboxPolicyManagement = New-Object System.Windows.Forms.GroupBox
	$groupboxPolicyManagement.Text = "Manage Application Policies"
	$groupboxPolicyManagement.Location = New-Object System.Drawing.Point(10, 10)
	$groupboxPolicyManagement.Size = New-Object System.Drawing.Size(460, 340)
	$formPolicyManagement.Controls.Add($groupboxPolicyManagement)
	
	# ListBox to display existing policies
	$listboxPolicies = New-Object System.Windows.Forms.ListBox
	$listboxPolicies.Location = New-Object System.Drawing.Point(10, 20)
	$listboxPolicies.Size = New-Object System.Drawing.Size(440, 120)
	$groupboxPolicyManagement.Controls.Add($listboxPolicies)
	
	# Button to refresh policy list
	$buttonRefreshPolicies = New-Object System.Windows.Forms.Button
	$buttonRefreshPolicies.Location = New-Object System.Drawing.Point(10, 150)
	$buttonRefreshPolicies.Size = New-Object System.Drawing.Size(130, 30)
	$buttonRefreshPolicies.Text = "Refresh Policies"
	$buttonRefreshPolicies.Add_Click({
			try
			{
				$policies = Get-PolicyList
				$listboxPolicies.Items.Clear()
				foreach ($policy in $policies)
				{
					# Format each item as: DisplayName (PolicyId)
					$listboxPolicies.Items.Add("$($policy.displayName) ($($policy.Id))")
				}
			}
			catch
			{
				Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonRefreshPolicies)
	
	# Button to launch the policy creation pop-up
	$buttonCreatePolicy = New-Object System.Windows.Forms.Button
	$buttonCreatePolicy.Location = New-Object System.Drawing.Point(150, 150)
	$buttonCreatePolicy.Size = New-Object System.Drawing.Size(130, 30)
	$buttonCreatePolicy.Text = "Create New Policy"
	$buttonCreatePolicy.Add_Click({
			# Use input boxes for new policy details
			$displayName = Show-InputBox -message "Enter Policy Display Name:" -title "New Policy"
			if ([string]::IsNullOrEmpty($displayName))
			{
				Show-MsgBox -Prompt "Display Name is required." -Title "Policy Creation" -Icon Exclamation -BoxType OKOnly
				return
			}
			$description = Show-InputBox -message "Enter Policy Description:" -title "New Policy" -default ""
			$passwordMaxLifetime = Show-InputBox -message "Enter Password Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			$keyMaxLifetime = Show-InputBox -message "Enter Key Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			
			# Create the new policy via Set-AppManagementPolicy
			Set-AppManagementPolicy -DisplayName $displayName -Description $description -PasswordMaxLifetime $passwordMaxLifetime -KeyMaxLifetime $keyMaxLifetime
			Show-MsgBox -Prompt "Policy '$displayName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
			
			# Refresh the policies list
			$buttonRefreshPolicies.PerformClick()
		})
	$groupboxPolicyManagement.Controls.Add($buttonCreatePolicy)
	
	# Button to assign the selected policy to an application/managed identity
	$buttonAssignPolicyToSelect = New-Object System.Windows.Forms.Button
	$buttonAssignPolicyToSelect.Location = New-Object System.Drawing.Point(290, 150)
	$buttonAssignPolicyToSelect.Size = New-Object System.Drawing.Size(130, 30)
	$buttonAssignPolicyToSelect.Text = "Assign Policy"
	$buttonAssignPolicyToSelect.Add_Click({
			if ($listboxPolicies.SelectedItem -eq $null)
			{
				Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
				return
			}
			# Expecting the format: "DisplayName (PolicyId)"
			$selected = $listboxPolicies.SelectedItem.ToString()
			if ($selected -match "\((?<id>.+)\)$")
			{
				$policyId = $matches['id'].Trim()
				# Prompt for the target Application/Managed Identity ID (from the main form textbox e.g. $textboxSelectedIdentityID)
				$objectId = Show-InputBox -message "Enter Application/Managed Identity ID to assign the policy:" -title "Assign Policy"
				if ([string]::IsNullOrEmpty($objectId))
				{
					Show-MsgBox -Prompt "Application/Managed Identity ID is required." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
					return
				}
				Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
				Show-MsgBox -Prompt "Policy assigned successfully." -Title "Assign Policy" -Icon Information -BoxType OKOnly
			}
			else
			{
				Show-MsgBox -Prompt "Failed to extract policy ID from the selected item." -Title "Assign Policy" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonAssignPolicyToSelect)
	
	# Refresh policies on form show
	$formPolicyManagement.Add_Shown({ $buttonRefreshPolicies.PerformClick() })
	
	# Show form modally
	$formPolicyManagement.ShowDialog()
}

$buttonCreatePolicy_Click={
	
	# Retrieve values from textboxes
	$dispName = $textboxPolicyDisplayName.Text.Trim()
	$desc = $textboxPolicyDescription.Text.Trim()
	$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
	$keyMax = $textboxKeyMaxLifetime.Text.Trim()
	
	# Get the overall policy enabled state from the existing checkbox
	$globalEnabled = $checkboxPolicyEnabled.Checked
	
	# Get state for individual restrictions from the new checkboxes
	$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	
	if ([string]::IsNullOrEmpty($dispName))
	{
		Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Call your function and pass the additional state parameters.
	# (Update your policy creation function to accept -PasswordState and -KeyState parameters.)
	New-AppManagementPolicy -DisplayName $dispName `
							-Description $desc `
							-PasswordMaxLifetime $pwdMax `
							-KeyMaxLifetime $keyMax `
							-PasswordState $pwdState `
							-KeyState $keyState `
							-Enabled $globalEnabled
	
	Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to delete policy ID: '$policyId'?" -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>