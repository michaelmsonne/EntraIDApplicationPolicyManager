<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAKxHSURBVHhe7P1Xb2zZuqaJ1aXQv6OA1pUkqHXR
EtCCdC1AgAAB6qruPqfqnDr75N47d2auzOW94TLkovfee++9996boA+S4cigjwhGkEHyEcYMBhfJ
5b3J7yFexOT0Zswx3jnsf/gPgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiD8h//wH67/7//7/77o6bPnRWHh0UXBIZEikUgkEom+Q0VG
JxRduvRH0X/33/3vii4m9i/xH//jf6zLKqxibGmLMf0Wo4sbIpFIJBKJvkONq7R8cZ2bt+9zMb1/
iafPAorGl7dpGV6geXCO5qF5kUgkEolEr9Kg57flHfXS9u+pi/t7nbzrNw3O0TFhoGto+u0GIDIq
tkhn3KV1eJG2EY9ax/Q0j6/QNG7Qpr3zRSKRSCT6M6t9VK+llw19MzT2z75Rap2mgTnax9Q2CzT2
q/9n3yy1zuCcdhx1vHc7jtr2xTYdEyt0j8y+3QCEhUcV6Yw22keX6FAbT67Q0bvARGMruqZGuttn
aZ1a0ZZ1jC3RMb5M5/iyZ/od9b7rf5f66Gv82O1FIpFI9LmlEtmiugGKlerfrJL6AQpqeqnunKSm
Y4Sa9iFq2oep6RimsXeSpr6pU9V2jlKtLRuhqnWA+p5JShuHKa7rP91XRcuopvLmESpaxyhtGDo9
VmFNH1Xt43SpxH/KRPfwzLsZgGmT3ZMATRro6ZlltXwE+7wex8o821UjDDeN064zajtuH56jZXCW
zvEV7X/PwYx0KWMwsaJJzVOJvkdLtA7O0Da6RPekwTNvwrNMW+/M+t79qel25WLGlk7X0TTuubDO
Mb32EM6uf7qe2r9mOs6fx+n0xW1eOe/Feb3Yh3f65Nd73SfL24ZmaTs5J8+2nmtvH1nQ7u35fb0w
US/me4zS68/p1fMu7lMkEolEn0cqvlVFACoxVumM+qpXuphLcHZ+Y+80hbX9NPZM0DdjoUclzpMG
8qs6yCtvJb+ynZyyFm3dXp1JS+O6xpaoaBmkpGFI+/hW+1JF9AVV7WSXtZJT3k5OaRO1XZOnx2vq
m6G4fpCeKSM9OjM975YDEF00t7pH96SRzmkTy1UD7FkW2D5cYfPIze6+g/WaPnpGl+iZXKS8uom6
rkl6pszaNj0Ti9R3jtI1ZaZn0qDdIHWB6kKbe8aoaemhrKaFsoZOWkeW6JtZpbV3iJLaDnqmV+md
Mmo3o1edsPqdNlHf1ktd9yRdEwZ6Jj2JnrbOtIHGrlHNgCiDcLrttDoXdVwj/TMW6praKG0cZHB+
ldKKamp7ZujTmTzHmDJ4tjmz7ek8bVrdPJO2vGfSs466HvVg1DLtAWnbr9DQOULnpImukSlKqxop
b+imY8KkXUfftIHa5h4a+6ZP7pMn8Hj30zdjoqK6nuquaQZ0egpLqmgeXtaO670XymBov95zm1T3
4WT5ybl4l2vnLRKJRKLPJhXnto3oKW8apnNsmdahRdpHlmjsn6O6a0pTfd+slqOulql1VcJc2jhE
y4BOS5+UajonSU7JpriknPyCEtLTcyio6WJo3uoxCBNL1HR4vvY9RQ56art0JKYV0tzSRW19G/kF
FeRWddExtkLL0AJN/bNazkD/jJn+2TV6x+bfzQAsWl1agt0/ZcDUVIV9Jp3D/v8f+2PXsRvS2Wwp
YWxgkL4ZA6VVDbQML9LU2UdpTSs1rV0UltdT1zFITeswzd39lNR0MDC/TlvfKFWNHTQNLNI5OEpN
5wQji1aaOvupbOqlfWSWmsYOKpt7aeoeobKuldrOQera+qhtG6Kld4Lalm7tJja2d1He0EFxea2W
TdLcO05dWy9VLf3atuU1TVS1DjG0uEFTeyeFVe10js5QVFatPYCq+mZqO0eoaWqnrL6LzrFFKmsb
qesap7Gzn/L6Thp7xiirrKe6rZ/qxg7K6zuoqG+nvmucpo5eimtaqW3vp7ymhdr2PgpKqmgZMdA3
pqOysZvqlh4aukepaminvnuY2tZe6jpGtXNV0/Udg7QNzWnGqG9ulZr6RsqaBmgfHKOgtJ62wRnK
aho9+6hrobJ5gK6xee2eqyyiutZuKht7aOoZobiinpr2fiobuunWmRmYVQHLLBKJRKLPJBXPqpwA
lTD3TKgcYCM1nVNk5lZQVdtKVW0b2fmVWkLcPalyq1doGZjT/le5xENzVi2RVwagqLiC2IQsAsKS
KC4qo6i2h1H9Jv3Tq/TpDNR1j1PZOq594LWPLWnGID6zgo72bpb0i0Qk5Go56ypXWuUytw4tUNk6
xtD8GkML6/SPL7ybAVjadDM4v8bAyha6pCZMncMYjXoMBgPG2XnmY2oZ1K0yNL+k5QB0TOipbe6i
qWeM6sY2ajuGaejsp7F7kvrWdgrK6+md36Cjf4zqpg7qOsdo6R6kdWSZoekFSqsbKa9tobKpg5qW
Phq7hqhsaKWubZCGzh6qWnqpauqiorZVy20YnF6msraBktoWqlv7ae4dpbK2mZq2IZr7Rimva6Gx
Z5za5m76FjZo6erXEtyy+jbqOwaoae6lrKqOsjqVcA/T3DNEdVOPZ15tC3WdIzR0qIS9iaLKRhq7
+6lpHfBcU88Y9c2dFFfWUdk2oBmDJnWslk4qm3romVmnf0JHcXmDVoTS3NmrXW99RxfVrb1UN3VT
XttKQ/8MQzPLVNY109A7zdjyOg2tvZrBKW/qpF6ZnpZeiitqKK9vpaF7TDMm1afz2jRjUN/Wo92/
ktp26tu7qW0fY3Rpy/PQRSKRSPTZNLygvtCNWkLbq77UdWbKW0dJTsulpaVdU0ZmPoW1vfROr9I5
YaB1cF5bv2NkjuGFdYbnN2gemCc+KYvCojIKCkpJSs6irGmIUf02A7NW+nUmGnonqWqbOMk1Nmtf
+aGRKaSk55GQnEtkdDJFdX0MzK5pOcPtI3qq2icY1W8wtrzFwOTiuxkAw84RI/p1Rla2GBteYiGq
DmNjL6b2XvTxTYy3TjFi2mVMv6ol5M39U3SNLtCnW6F7bIG2wUnahmbo1xlo7x+lqXeS4aVNBnTL
dI/N0tDeS+vQHGPLOwxMqXLyZUYX1+gYHKWsqonGgVkth6C0qlmrLdk3qddulspmb+kZpn1kjpYe
5aDm6ByepnVgit7JZToGxmjq09E7taStq85lWL9J78QCfer/8UX6dcvaNk1dQ3SMzGpZ8X1TJ/M6
h+ga19M5OEZxRR2tI/O09Y3RPqzWW6J3Uk/v1DI943q6R2dp6pukc2ROu+6e8UXaBybomjQyMmek
e2KFCaONodllGtr76VTbTyzQOTJP39QSTZ2D9E4bqWvpomvKwsTyhna+fZPL9Ewuea55SEdj1zCd
o55r985r6Bymd3KJlu5+iqua6ZrQ09wzenI9K4wtb2oPXSQSiUSfT2NLm1qCXNM+qfWbM6h90a9T
162jrHmY8uZhLad7cG6Nwfl1bVn3uEEzACrN0JnsTKzsMmGw0Ta8SH2PTvsgbOqfY2xpm4kVm7Zs
TOVk9+mo7ZjSjjm8sKGZh2ZV679vRmuFoD6OVeI/opYtbtCvM1PdPsHEyjaTxl2GdEvvZgBMNhhf
3vJ0IGC2MTazznxlI4tlVYwPmRiz2LVlqr+ASaOdScOupomVHSZOpr3/TxpsTBlt2vqe/3eZOtlG
O4aat7Kj/Y7r1+gYmmfK4mJwaoHuCRNTZnWDPNtpv0bb6a/3OGePpS5UO4+Tc1HH0G7w2X2cOQfv
uto8k50pwzZdgxNaPYaR5R3tAZ1dz7Nf7z7OXrfn+Opma/fFsMP40qZ2Xer61TWq8/CurzPvadfY
OjjnOU91f7znd/acTq7z/Hk6mFhap61nmKZeHeNG+7n1PM9GJBKJRJ9TE8vbjCxuUNU6QVPv7Kna
BhdpG9KfqqlvTpvf3DdHddsELYOLdI/r6VcfdlMr2u/QrJnh+VWG5yya1Ae0tkxnoHtske6JZWo7
dDT0zGj7auydpXVwUVNL//zpcRp7ZmnundVMSXP/vJZO6cwOhqeX380AmO1oCZg3IZow7jK+5mLc
us+E2ZMAfx55EjzNsSjjcDHh/WLyGoSL8z+1vNd7cf67yWtaTp+TSCQSib6oVDqlvrpVGb/Kmn+j
Jk306Sxa3K2+5AdmLAzOvoPmVrVtVJ2Adz2Oqhyuzk+lYzOrTkZmVt7FAEQVWexoG1p3XTgPDv+E
OnrFvG9R38t5ikQi0Y8rl/uI/cPjd5aKu11K7uN3lrbNK45zcAjuIzg8Rpu+eJzFNTvTFiejM4Z3
NwDjyzvs7B0gCIIgCML3ybLV8WEGYNshBkAQBEEQvkUODo/Ia1/gL+Ft/GtoKykNMzj3D8+ts/RJ
DcDBLt1d/bgB984qnd2DF9cQBEEQBOEzE14+wf/plwL+h9+K+L9cKuL/+I8CHmYPcnh0fLrOpzUA
9mX+8v/5Xxm17jNel8g//9sDdjdXGR7VsbmxRkdLK4uWdXY2NtnZ3mZjfefiHgRBEARB+AhmjDv8
P25W8D9eLub/fr1M0//tSgn/4+USunWrp+t9UgNwsL1M5P0nZOYVkZOZQGpMBgF3b/P7tfuEB4US
8DiA+LgEslJL6W9vpTCv5eIuBEEQBEH4CFonLPyffyvif7peemoAlFSOgCoW8PJJDYBzfZ7S7Apy
0xLIrayhIb+QyMBAotNyKUrLZmhglNqcfHIyUvC5/5Dsku6LuxAEQRAE4SNQOQD/z5dyAEr5v14p
oXt67XS9T2oAjo/cOBxOjo6OOTpy49zb58C5y+SUjvWtXQ7293E593HYNhif1OFwqtoCgiAIgiB8
SiIrJ7Vy///hkqcOwP/h5wIe5wx9xjoAgiAIgiB8ddyHx+RqrQDa+dfQNpIbZ3CpzgDOIAZAEARB
EH5gjl989J9DDIAgCIIg/An55Abg+PiY/f19Dg4O/pTyXrsg/Fk4Ojr6Id55dQ1ut9RLEv48fFID
cHh4yPr6Opubm39abW1tafdgZ0f6OPhcKJOpImrRl5dK7M/icrlYW1t76T34XmW1WuXdFf40fFID
YLPZ2N3dvTj7T4mKSJQhEj4tKgGamZlncXEZ/dKK6AtqUb/ClG4Wx57z9HlsbGxoJuBHQr27F42O
IPyIfHIDYLfbtWn1Ar0krSbCEWtrq7iOjrQvOe987/TFX8+0Z/9nX0rV1PD4ZLn6MtGaNnhXvLA/
Tdq6atq7z2PcB/taf8lwjHZmB04sFou2r9PttP282N/Z475OChUxqvN6Ja+rkfEVse9ssrW9xcbW
t/31o7Jq9fqVi7OFL4TJvMrW9oswor6aVdb52ff1bXrVO35OZ97fo6NDtjasbGxusLG9e/oue97N
l/fn5XRfhwdafLN3oJa95ngXzk29u2LehU/HEdZ1K99iiPpyBkC9nMf7tJYVExIaRUvv1Llt1XCF
2u8rXrzDQwfjo5McHB0zPzWBaXPv3PKqrFjyavtpLkogMLEMNd6B+8x+PMbjIse0FOaQkFWOdXef
I+cWFVlJpKRkMqr3dJV4cPAiAVcRw1hfBwNTRu3/l67vjBQvG4BjCAmBkRlo6VRhQgsYTEyCy2ts
XnGe3lmvuobjI5iaAueFZVW1sPHiK+1dGO2q5N6VO+Q19p+b/4qj4lL9OEwtqifD2MgE+xdXeMV2
ZyPnixwdH2FeWWDBsM7xmTaqr0IZgKUlw8XZwhdCGYDtnRe5fG81ANrjdFFXXYd5xxNnKBPtZXVx
ktae83GBQiX8imPctJancvvKPeoHp8+scex5hY6Pzrwix2yurjA16wkfg91dlOTnERIaTnpWPqs7
bzjPE4kBED4pR04aCgsIC4uhe1TFmWfxhNzZyUm2zsXhxzTW1LO+s0NzXSNWx/k4UfsIPTfnLK9f
8iq+mAFQOKzzpGeVe6Y3lshIDCKzrIS0+HgSEzPISM0kNCSO5sYWQgPuk1RUS11pLklRkfz9HzdZ
23OTEf6clPxy8tJCyGvu0fbVXJDC89AEYkN8ueubQENNOWkJSeRm5BAXk0BKcgh59Q3kJceQlFZJ
a002MenR3L5ynX//919pmVjFrOuhtmUY/ewIhYUFpCTnUp6bjK9/JJmpeUSnpBCfGMOju08orunn
8A0RieJlA3AIUeGQlAv55VCUAhmxcPkWWBywtghREVDdDMWJUJwPmRkQkwKZeRAcAXXtEOcLKYVQ
Xw6xifDbdahrAP8HUF4PZQlwzx+2XpUsv4kjarJq2LFtEhv8kOCENFITEohOKEA/M0nIM1+S0wuJ
j4ol+KkPt3yTcB/a8bnnQ31rPVHRQfQsrHLk2qE0PY6snGra6vOJz0qlsKiAyJAYcjILiQsPJ7+4
gZrCBB4ER9PW2kRmQiL3L18mvqiZ1RUL+2/IfRUD8HX5MAPgpCCnEKvzkJneCkLi4+jsbyc9OYzk
7Ayio1Lo6O2gu38cw9I0CZGJBIeF0zY57znI/iaVOU3sbi/x/Nk9olKySIyMJCWrmvmxbp76+JGW
kU9MZCw+N2/iF1ekbdZWW0VCUjbzaw4mm6tp7ffs76VzPCMxAMKnZMeoI6uwXpteHOkgKjSG0KAH
RORUMzfUzJNHT/nt97tU1NUT9PwBmRUNNJTFc/lBMJuOPbJiwvCLTSSjqJT+3j66O7swm3awbZnI
z8ulsqyWwpISKsuryc7NZ3zmRT//78IXMwAqHtjfNZGWnM3KyipNhZnkFxcRHuBDRFoNPfX5/Hot
mPHxIW799a9cuX4X32dPiE8tZnZwgMDARFxHx3TWV5EQl0hpSQ5JGQVatkpnQzXBT54RFBLO04eP
uXPvGdNTM+RExREfn0xFeQGZ2emE+ftz7Y9rxKRlUlqYwqPnsWRm5jG1YsO6MExxaQODnXX803/+
N3JL6yiPj+MfP/+DP+7G0tpax2+/36O3r4+sjCLU9/XrigIULxsAJ5RUQX0Z/NefIDsPClPgQQSo
YojGIqjqhKoiyMqBjEh4ngaDrfD3256cgnvX4effISAAQhNhbAri0iEiBK7dhSdPoKgQ0rNg9f1y
AMBBeVolfa1V/Pa3Szx98ojo9Gr6OuoIfRrBk1t3+J//6yV6RyaI8XtEdE6z9g1Wll9AcmoahYU5
5NX0sW0cIy29iNmhAaKj46ipyePn358yNj7G3UuXqekYojw1kp/+y0/4+Qfy4KEfuvEZ8mJiqOud
xe0+fKOHFQPwdflQA5Cdmsnc8jK56UlUVJdw7cZd6ptq8H/0kL/+66+UVFeTn1tFY00xv/zsQ1VN
DWn5NdoxDnYMlGbV0VKRyW+/3+TBvXvklLfSXF1IhG8kt65c5p/+eo/R8TGe3LhBYeOItl1LdQWx
sam0D0zSWprPwJRZm//SOZ6Np8QACJ+QvQ09aWkFmAwWyrOySY2N4+avlwiMTCAtIoErly5x5XE0
OTFhXL1+l2dPnpBXXEhaZi7m7W0KUnIorqgmMTGeh08eMLhg5dB9yMGelb//l3+hoKqBX/7yN8rr
6vhv/9u/MqC3XTyFN/LFDICSyp6YH+4lOiKR7p5+KkvSKG9sY2bewMrCJLVNfVgsZkb6B6guz2dg
domeuiKycoqprqjEsLHH8lQf7W1tlBYk0Tgwo72w87pJFpdXMS/PU9/QxuhAJ5lJyVRUt2GymKgv
Taa6c5jhxjqKyuvobikmp7SC0alZ+jua6B1dgOMDBpoqSErJIq+omtnFFbrLK0jLycHn4UOiU3Pp
7B/FZDQxOqbj4LRewctSvGwA3DCmg22r54u9pRhq1G8DGLfAvg7J8dDaD/V5UFUP03qwLENNq6qZ
BKNjUFviKUYYaIa0XKithb5+qCiCxRWoyITMAth/UzL6Kg6Y6J/E4dilqSKfuq5epucNmM3LtJQ3
kJWSQU55I2vrm4z1t1FR2YiLYwbbm+nrbSU9PZnZVRscumgqVeauidG+WrIKi+gb1mG1rmnZWUum
VeZnZuhtraW0qZul+XHSk1Kpraqiq3cQw7LkAHzLvL8B8JTVd9YUk5icRkN9MRl5RSwuTZOflURd
ex9L83qGBvqor6omPa2QML9nPAuOZlIVCam6Os5txgamse+uUV6YS2N3Pwt6I0uLszQUVZGWnEFh
TQfr6xt0NVdR29ipHVc/O0t/Vxsx0TFUt/Ro4eql87sgMQDCp+WY6b4OEqJTKK9qxbxqpbOuiJbh
KfprGkjLzKe0opKh/n6qyosYX1yhtTydxOxiDo6O6KkuIyIphyldP+GJ8WzZHJgNG6xbV+jt66eq
rIq+oREqS1X82c+UbvniCbyRT24AHA6HNn3xxfLofROli7y8vdrvp+BNp2YxWV468usSf+/5vGwA
hE+BGICvi9my9lIlQPVMXmsAPuC9X19VlYQ902r7N1QfeS2vjBdOKg2+SQoxAMK3htUwy8yK9eLs
j+aTGgD19e99eS62H/5+5YkIDg8vzn+91BeRahstkcinR0XSuuk5rSXA0rJB9AWlXzIwOTWDw/Gi
Eq7q90I1/f2U77zi+OjT7e99pN5daQYo/Fn4pAZAq4W7ucnKygpGo/FPLafzfcvghXdFJTYu1z4u
Nbqk6MvJ9XJPeepZrK6uYjAYXnoHvlfJuyv8WfikBkAQBEEQhO8DMQCCIAiC8CdEDIAgCIIg/An5
jAbgkJmxITo7O9mwv3ndfdcetp1tJgZ6GByfO53v3tvFuLpxbl0Ph2xt7byhdvBrFwjCO3LM7Pgg
PUO60y489/fs7NpfXT587N5Dv2zSKq8ZDUZPL3WCIAjfMJ/NAOzvrBAWGE5raysrplWt6VZvayNt
/TrWretYTCY2tj1NBvUTg+RkZBMXl0xeZipt/Z4uP1eG2wiIymJvz4Z+aYn940NMy3rWLPMkJ2Sw
bNnEvKJnY9eBfWud9TUj5SWlDE4tsrO9gWF1jaNDF/rFZVzuIzbWrLgOYHGsi9r2UWzba5g3t7Vj
OR27mCxm1jZ2ODxwsWq2aNtYDMus7zjZt22xtq46WThkYXEBx+Exjt11HG4xGz8iRw4LcZFRREUm
0z82j9G0wnh/C2k5dezabSwuLLJhU7Xh1VC4Ltxbc1z64wHTU938/OstTJsbWDd2OXA5tBYL+yr8
WUw43aor5TXmDarHLjcbW1u4j9yYV82Y1zY062rfWWfv8IhtqxmDaYmSwnLWHNKiRBCET8snNQCq
HwA1lKbN7mB/e5nAZ/5UVjaQHBNHdGQs1y7dJDg8mqTEbAqTwvjrb4+wOg4xTQ+RmpJB55gBXGvk
5Xi6TqwrTOLZs2eEhieRmJxKeHQ0cdEpJGQmEBAYRWJiCjlp6bS2DNKQE8NPP/3CjXt+ZOcVk5kW
R3J2EgFB4USExZCZnMGdq9fpGDUz1VVOQFgClUWJhKdlselw0ViYzp0HT3galER/TzfP793k1v0A
IkPDyMiupLc+n3/8eofMnGxSMhKIiojm5tWfeRxdgPPwGNvurtYcSvT9SIVV9etFNWPd3t5m12bn
aM9CyNOnJOSWUVacS3JqDBGx0YSExpOekkxZbgFJscnkFRTRo/r43l8n7HkgMdEhhEVn0VmVw++X
rmtdSYcGRdLQ2EVyoA+3HodTXppGdEo6Yc+fcPnGNXwDwnjyzA+/4FgyU5O4ef037vj4ERoaQ2xI
AH+79Aij7QDn3t7pOYtEItG7SkuXbS/3EvhJDYA6iKfjjmNc20uEBEbQ2dlFTHweC/PT+D58QlxC
Go0t7RSGhfO33++j23RjnhkiPSWd5NRcakvzaO2d5dBuISUljfaGEv7rP/+dwoo6njx4RFZuOcnJ
Mdx/4IePjx9VVU10VdUS9TCA369exz8ikaS4OCKiYykqTOfuk3gW9fOkx8Tjd/c2efVDrBsmSU1I
orgoncSMXIybNlpryskrqKSwuITwx6H43/Xhn//9DwamFmkozSb4QTA3rt/jnn8Ebc21PL1xgwf3
H5JcUKd1uqeuWfT9SYVZ9esNv6pZm/r/cNdAWlqR1kFUR3UeOfnZ+Pt5wlxgUARdzd2MdTVw7eF9
LK5jXBuLZCWlkpGcSGJqFlE+oVy/cpXffRIwGOaJfBpI6EM/frl8g5zSMioKs7n2y2XCIiMIDoun
sKia8rJKgh7cxeexL6GhoVS0jDDYUsyt+2FYHZ7e9kQikeh9pdJlFb9d5JMaAOU01ME8HNDf3kRN
TQ39Y3O4XE70c5MMDY6wadtjcWSI5s5B9o5g37HLmsVMZ2MNTR2Dnq3t21i3PEUEKeHPSStpYqS/
lYioRCYXVzAsr7C+bqWntZ7RST2zw0N0DgyjmxhhesGIaXGU9t5BVte3NOdjWTEw0NmFccPBsWuL
2ekZZiZ76Bmd1Y6xYV3TejmzrFoxLi7R3dJG/9gMOzY7m+vrzI6M0to5yERvM//bf/1ncrom0Y32
oDN6sm2F75OzYVZNezuAOXY7MZs9PW8d2k20tLZoRUp6vRGraYGa6ga622rILK/Wnr/bZceytqmt
v25d84SX9i5mlsw4HHbMy0YG29sZnV0mP86f/+8fPswvL9Mz0M+yZZ1VyxpmNdTu5gYTw72Mzy+z
ta1y1NYZHxpk9eRdEARBeF9UHKfit4t8RgPw6Tjd5ckQoV+TA8cuSyvGb3JsZ+H9eZ0BeBds2+vs
Ot8/JKyZjFg2X34ZBUEQPgfftQEQhM/FxxgAQRCE74EfwgCofvldLpenG1iR6D2lBq25yNsMwMWy
tC8t1S2td5RNTQ7Hi+mvLDXw18V5b5JaX12TIAhfFvXefdcGQFXOmtLNsrC4xKJ+WSR6b01OTrO7
e74m7JsMgEq01GA3qvKMkmoh4NWOqll75v/T+dq6F+armvsn29u0hNB+uu2r9u2VOraSGqBGGV81
xO2ew86+NvreEfsnZli9G6oposccu9g/cHPoPuDAfcjRkdc0v0H7ntH8PPt7IffhIQcH+579HbrP
L3MfsLe3p63j2YenkqI67kv7V+e0v6/d34tjCQiC8Pn5agZAdYziHQ7UO7Leh6AiEBWJO5172NUX
kUj0HlJN6IwmM5ubW+fC1ZsMgEqEd7WmrSoR38Wx5/ni9STgO+e+xvf2HNoXrpag7774YlfzbLs7
bG1vY7c7MC0vMKWbx+Zwast2d5SZ8AyjffGLWp2POgeVc6HOa2GoheiwGCob6qlt7MbTJdEBbc3t
7KrX8dhz7ruWedq6x7DvbLBsWj+9Hi/KPJznAL1+mb19t2YyvGytW9lzw6Zhhs6TvjkUR0du2qsK
CQ8Po6FzxjPPYaWyoo51m+t0PQ/HHOx7cl9UToYYAEH48nw1A+BaneL+gxCm5mZoaB7QvjIUKhI6
OBMZeLY6fq1JUF89ygCoSOTil5JI9DapcLNiMLK15en4ycubDIBKzNXX8URfC1VNA9jtu9idBxw6
N8lLT6OuYwyny82+fRudbo79fQcVBfkMTBlxH7hw2HbZ2bWzrBugqLKDo4NtEiPCCPaPoKXX0zJm
drSLlMwytuwONtbX2LE7tPnqWDs7LwzA4f4+OXmtLC4t0lBXTkJSNtXl2WSV5RMSGMiz2FSWLAaK
0xKIjE6ismWMkdYCnoak0FGfS3R6DmXFRURGpjIzt0RhSixZhdXkpKWRGh/Lb5cfYHYcsDA6TFN9
Ax0tnRTnltLRWUfAs3tEpRWQlRpBQfOw1vlRcVoioap/jawCygsTySkvJDgoisaWNgrSk0lJyqZ3
aIzRwQF2949wiwEQhK/GVzMADusCfk+CyMgpprmlg/TwAJ4GJhATHYlfcDi5JbXkJvpz7Ukwk3Mm
VlfPf6F5EQMg+hh9qAFQ2d+zQ208uO2Dv18gmVlFlOZG8seNOwSFJ1BeXkV5YS7hsemU5MVy/dYN
nseXMqOboK2pmbgAH67f9SW/qptj9zZhfr4ExSSTm5NJXGwQUUlxPPePpiA3i6ToOKIiEqmsrqGp
tQvngVs7d80AHOyTm9fCytIsz25d5/crd0hMzaAwN44/boZSUVNBeEgUoY8e8p/++d8pah5neXqA
tIREbv3yN+7fu8uNB5E0NtQSGRhFyKOH/M//y7+SXlRHXnwwN3ziUUnzdE8Zv//tH1y/8xC/4GAe
+vjT0FzDHz/9xM+/XCIwJk8z6kVJ0WSVtdHXUUN+fi6xUUFcu/mIq1du09Dcx1hbCz4+t0kpbdVa
zEgOgCB8Pb6aAdhcnqC8po285BCuXvMjzjeAf/rXn4lJzqGkuJTk6HB+/m9/xc8/jAn9huQAiD6L
PtQAqHL0ucEmfvrpOl2DQwTev0VCZhaxYc94GJhGRtxzHgSGEx7gR2hMIllpUVy6FkRpaQm+93wJ
uPeQ//RP/0ZqWTccrBMRFMmMZYP60myyc7PweXifGzfucfP2Yzo7RuirL+ePG5dpn1jhcN+pnbu3
CGBppI2E2DhiYpMpLKujqiiJ1LxCcpPTCY5PpaW+laSAcAIiE+geW2JndZri/CKqS7LJLq2gsX0I
/dI8pZmFJAZFEhCZyMi0nvHBVuJjU1had+BYm6aypIKalhYau3qpKc0nNOQ5pWUV5KYl0Dg0p51L
X2c3Vgfs7xrJSAgmu6SSosJS6urqSIuJoL6pi/BoX3pmzXCs6hKIARCEr8VXMwDO3XUWltdYNy/Q
3NRBQ3EphVVNTM3MszA/z/yCnrG+Vqo7B1i3brK2ej6C9iIGQPQx+lADsLfnZHVljpraFvQrK0yO
jVJTmklKRgY9I3PMjffTPTDK3LSOpuoCUrJzaWtsICU5l47mbkoys8kqqmBUt8T+3hZDQ+M4Do7Y
Mk2RmZFMe98gra1djA50kZaYSlNDFcGxsazvHeI4Cesq8VR1YNSZqV8vx0dHHB6qcz/GfeBJWFXl
PG3ZoVsrYlPXc3Ra3PaiiM273tHhoafc//hIq6ynDM+LA3jr7pzs+9CtSTuXI5Wtv4/7UJ2D6v3z
xWaHR0fsri/R3NnLwdHRuToAqsKiIAhflq9mAD4VKtJRLQC0ilOv6OtYJHqTVLhRBuBdKwGqed5a
+Ls2h5Zg2u029pzOk9r1R7icDhx7qpa7E8fenlZcoBLU/QNVM18llC7cR4ccH7lxOtQ4Aztasz7V
AmDXvqclnKpOjFrP6fIk7Cvzk4zPLmu1/b3H9xoApbPTZ6XV1lfTr1n+kt51vXPHfN02L88/cHvu
o0r8vftQ91eZDGUCRCLR59XZj5nv3gCoi5lWuQYL0gxQ9AFaXNaakara9Wd5nQFQhkF9fV80Ep9b
e04X+y7n6f/qPF6X6H9PUtegmg2qa1I5ASKR6PNqc3NTM9yK794AePG4G0+2o0j0PnpV2DwbZtX0
WQOgZYkfHJzT4YmpPjxp2npx+YfL09b+5fnff+Lv1cXrEr2rXtSbUP0sqHvpaVp9fLqOKqZRLS3U
umpam39SdKP1CfHSPs/vX9veu53ou5d6lir3UOU4Kn4YAyAIn5I3GQD18pxNwNRLtWtdoWdwEseO
lb6B0dOBoLy/yqBq/6us/5N53py4s++Gd73ThSfzTrPyRSIllTgf7NHdWE1JVRs7Tk8Y2raa0a9Y
OClp8dQHcbtx7jlwurxx8yEjg4Ns7Xm2OT4xrV5Ow6BWh+QAu2Pv9H/vmqqex0vnJPrmpUyAGABB
eAvvagBUboCKP1fGmvj58hO6mwv52x9PtI59ZmaXMS7N09UzorXdnxwZxrrtYGlmkJ7xeXa3TEzO
LWCxGBkcGWJ0cg67Y5fZmQlM6xva+oM97UTHprPp8lSau9iTnujPobORuPb/wRH7OytEhYYTFhZH
Y9sAY+PDdLZWE51YjNlipL+vj4zEeBoHFtjbNtPfP8zoyAiddRU8uh+OfmWO4Skdq6tGevr6GBgb
ZWRiRksgFmam6WmpIzoulclZPXPTw+iWDRgWdHT3jeFwne9lUvRt64c2AE6nC5vNjs3uEIneTzZP
P/oXw+e7GID19XWtPM3hdGKaGybgyTP8nz0mPqWA8tRI/vLvv3LfJ4ToyAQqSqsJuHOVP249pbAo
jbiEBG7/8Su/XbnMvQfP8Hnii19wDCFPffjHb//gyvW7hEUkEPr4PlcfRmE7ROs5UB1P9OeRiqyt
VqsW7rzZtyrcqSGhD3YN+D94QHJhFYV5GaRlxPM80J/nfqFEhEfSVFXDo2u3qB824Fid5vblm0TH
JnH/8mV8A+MpLkwjOTOeRw+fcu/OQ+4+fMLDpyFUVdUS+fQu/8s//43AiAQSY2NIz0wgOj6UR0+C
CQ+Jpmtshf1950vnK/o2tbGx8WMaAPVSTE7NoF9aYWlZJHpfGZiYnNaa9p3lbQZASb1I3qZw+qlB
MpMzKSrIISUpjdD7/lz64wq+8WUsLowTeO85frcecfmuD0XFOUSHh/Ho1j2iY+OITcyitLyWstJy
Ah88ICAomNCIGLqGp2koSeGJfzwbewfvUGYr+tGkwpcKm6rylppWEbkKe6pVpnNziaycSi389dYX
kJAcT0hIMM+eBWkGoLa8hoTQMFqG9OyYJrhx7TET83pSI0PILa2nsiiVxJQ4QqPTqKyqp7CgnNKy
MmKeh+J/+wm/Xb9DfGIKUeERpGckEBkVRmpRC8O9bTR267TjXjxf0bcpZQJUToCa/uYMwOuXvB3V
bEkl/uqCVHMskeh9pMaQeJ+xAC4aAO8LZt/dZnPHoYXmrc1N9NNTDI9NYVnfwmbbZX11jfGhYYyW
VRIC7vH3wGSsVgtjUzqsm9tsrG9gtW5g291manIUvXlNG6BoZ3udhdkZNnb3tONcLNMT/dhSz/ys
AVARuScH6oB9p0MLMyoOPHCsMzQ0hHVrG4vFyvaGmZ6efpaX9awYLLhcDowGE7s2O2sWM1u7DjbM
s4xMzmjhe31941Sb1nUmh4eZ1S9pYc+6tcPC9AizSyZt3e3tLbZ37BIevyN9cwbAvmGit7ubnJQE
wsJjGV80n1v+rkhHQKKPkQo379MR0KsMgHrBVM1qTxv/gzOVqDyV/lTErTrd0Tg6ZF1l6Tpdp53k
qD4CPO1zPS1ZTjb01MA++V9Vxrr4Uot+fL3eAKhlng6dtOmTWn+q0p8Kt96B1rR5qsOn0w6h3J7l
hypMepZrnT6pjqG8ujAolArDJ1Nn2pN7On5SlVNF36pexBnfnAHYMsyQkZpOQXkbO+vL5KTms7Bg
5OA9swPEAIg+Rp/KALyPtAjU7YlARaI36XUGQM1X/Sd4RotUv6I/pzyjhb48f8/TCdlJOPp2DUBF
O7bNFfLSS3Eqd3purbcjBkD0MfoaBuBTyNs2++J80Y8j7zO+aADU7+rqGpNT01oHaKI/uRaXtK7z
L87XTc+yvGLQcha/OQOgigB6OrvITo4nPDyOmWUTpvkV9t/TAYgBEH2MPqUBUNMq6+1iRP6ppXIQ
zJZVdNNzL730oh9Dc/OLzMzOa0VKKvxdNAAGoxoh1dM6wNvDm+jPJ9WDqUrYvWHkxXzV498Wev3y
t2kAXnCMNm7JSfnV+6IMgHpZ1EVfjNxFordJhRvVGuBjKgGqRFlFyi7nHq6Dk0F1Lnydq4Fw1LgB
FxPzD5F6oRcXl9g5OUfRj6m5eb2WlfsqA6AqrprNq9qyi2Fa9OeRyh1ScZIKF2paGQJPmFDNRTdY
Wlr51g3Ax6EiZi37Y3EJvX5FJHovqdyjmZl5rTz1LO9jANSy9aVxAp8FkJCSwcT0Ivvu8+F9pLsD
3fLm6f/n34fj0wpZr0JVwjqb06BeaPVi2y6MXyD8WKiwKQZA9CZ5DYD6Vf1DNDU1sbKyohmBP4UB
EITPwfsYALXW3HA7pQ2DWKa78X0aQWlRAWmp+ZTlFpKUk0lqdj5dba0kRceQWVTP7OwUBemJRITH
0T04S2dFDvGpRRQV5BIVn0hhdTuDHZUERsUxNrvM8qJJa2kgBuDPgxgA0dvkGZp8TwsfjY2NhISE
UFxcrBVpbmxsigEQhA/hQwxAcV0/1tkebvxxh5CgQG5dvsyDJynU1ZVw9bYPWXEpXPv1CncfPyck
wo87955TU1NPYkQUiQFB/PN/+QuP/MJJTEghNjqav/wv/8z123ep6ZrUmnFJDsCfCzEAorfJawBU
uOjt7aWtrY2Ojg7W1ta0Ys3vwgAc7W0zrpu/OFvDuGLC6R3Z4gKqLeub0NpXv3pTQXgj72MA1LKN
5UmCfAPJyM6jo6ePusIS4sODuXPzNhFJGdQ2t1KcnEuQXwQl1eWEJ4TR1jvK/MIiTZVVZITHERAW
S2VjO/19/bS3d1NdmENSdiGzS0aWVRNZyQH4UyEGQPQ2eYsAVFzkjZs8w2urIoFvuAhA/e+dtzE3
jH9QHOZ1K0ODg1htu8xOjDC3rCMlPpmROQMLOtUTlYWdNSNzc7Nkp6XR0D3OqmWZMZ0Om2Ob4YFh
1jbtLM/PYd3cw7m7zujoJOPDwyyv2ji2G4lPzGbHsc3C0hK7th1GB4dY29pj3bCA3mBlzbTMyJiO
vIwM+qYt585V9OPqIu9jAFSi7HYfekZI83bIojY9cjI5PonN9aIjFdUpi17nGQxIofoDUBwdqY5Z
1EaqE5cXQxQfuFV3sAfnBvTwGgCny/MSCz8mqodTMQCiN+msATg/f/vbNQDeE/b0v35MS3kaPj4P
ePIsjMysfIJDA4mLyyElK56nfqEEh0SQl51HW3MfzUWp/PRvP3H17nOycwuIjYkmpzCNB498iYtO
IDUumfvXrpBXPcGBw4TP7fuEh0eRllWLfcdAZEQcKZHP+eXKZW7deUp0ZCwFBVWUJ4fz09+v8PR5
FOkJcfz1p6sMLGxo/a+r81TXIPoxpV4YVWnmdWFWTb/NACidndbk7X3tQtNAb4W/c+vuH2ij/Z2f
t//KeV4DMDu3gMFoFv2AWjGYtDEqzjbxEgMguqjv0gB4A7Pi0LFGTnYuU+MD/P2//gvRqYWEhwQS
HZNGRlYqz54F4x8QSn5uES019cQ9DuHmnfs8DYrSOhKKjo4mNz9dGzBlcXmZ4qwswnweklDYyt7O
CndvPWF8bpGaykbsjm1KcnJICA0kLDqG0KhUZvXLFCQlEP4wiEuXrxGe1YhhYYQ7tx4xPOvJARB+
bFS7+osvwYcYgC8l1deAOv7G5pboR9XGpjYWhIonX9URkBgAkdJ3aQDU15bXABztO9m1eZpgNZZk
klPRxvLCOOlp2SwY19jdVmUbe8xPDTOzaGZ9ZYlx3Sxm4xLLpnUc2yZtQBWbwxMp27Z3WJjSsbbt
gCM3q5Y19pzKRdu03AaLYYWtzXUmp3VYt224XE7sNjsrs9OM6+bY3HVo41xbVhYxr71otiX8uCgD
oCLYs3zLBkBJvT9K6viiH1MqXKpfMQCi1+m7NwCC8LX5VAZAVdI7+//nknqhTSaL1tXnxR7kRN+f
VD8mF6U6N5uemdOetwp/YgBEr5IYAEH4SD6FAVDh2WHbxeE60Eb8u5hov5Cn1YCnbN/zrqiKgRd7
DnyT1AutegLcvXDOwveHCgsqfF2UiiNn5xZPanSLARC9WmIABOEj+VgDoGrvW/Wj+D/1JyY+mRXr
mxLmIy3i9uztEP38PPplE3svDYN5/NrcBGkG+OOgwpU30lbxopIKVyo8qpwAMQCiN+mHMADqS8j7
dfRC+7hEos8llxpU5yQZ/kgDoNaaG2mnvHkUy/QAafHJRMeFUlzXSnJ0NA1NfVTkJpOdWUx6YjwB
YTGkJKSSUZDCrZu3SC2opaW2gISsNKpqqwgPCKOpawzD/BI218stAcQA/Dh4DYCKE8fHx5mYmNDC
mBgA0bvouzcAFssaM3OLWtMX1fGFGr1InbTRZGFp2XCqFaMFs/n8PK8MRgsmk/ml+csGM2vWDW3Z
snc/BpM2kpr3//Myni5TI8Rp+1gxajJZ1tna2sGkRuGybmAweH6Nhov7MGCyrGE0ml6ar/ajjq9+
Ly4TfVmpcQDUaHoqAlb6aAMw3E5BdQ+WuQGu/Jd/4dc/rhMQGIb/44f8/tt1csuamWiuxd8vjIDH
PkQklFOQE8vdJxGkJcTwyDeU2uo8fvr5Ng319aSnl+A8PHrp618MwI+FClcqPlxYWCAhIUGTXq/X
wpcYANHb9N0bAJN5VeuysK+vj9bWVtrb27Q+jRcWLvQMeGBnY8d1ft4J7r1trNvnB3PxMjs1jXXr
fES5trp+7v+zmEyr2u/hhdFZNldmKK2oZdcNy7PTWlnvzOQk9lf0NLhuMbNt3784+5SLmb3C10F1
tKK62P1YA6BG+ts06Ah9HkRaTglz0+NkpibROTxJaVIiBWVVlGQlk5KUQ3vPEA1lOVy9fIOciirq
K4rIL6mjuTaP+NQUqhu7WFxYoKenj4UZyQH40fEaAPXlX11drWlyclIMgOid9N0bgI2NLfr7BzQD
oCI3FdDVRdXX12u1quGAkb5uWusriYpOY3LOgtu5wcScnsOjfQZ7uqitKKe+dYT1rW3s2yam9CYO
D3Zoqcjk9z/ukFXSzOKCnvH+TpLiYgmPSqSub4JD9hkf6WPRbNFuyoZhloycCmwuOxNjk8zPzFBf
Wkh6ei4FWYW0trQT8vwJN26Hs2nfISYwmIFZIyMDfcyZLRgWphmcnKK8IJvSxmHMSzr6hqawb68z
NTlNWV62NhCM0WhgZKSf1Z1tJof6mdGvas0OZ+fNZ+6a8Ln5VAZAhVv34aE2ap/XOB4de3rzU38K
VdHP6xVdtg10M4sn/3leQs+v539VJKHWv/jlLwbgx8NbBKDCmErszyb4YgBEb9MPYQD6+vq18i+v
AVCBvrm5WYs6RzuqycstoyI9jeDQGDKTU3h04wq/XLlOQHAEdTX1lCcl8/PP1+ifGCPq4WV+uXqL
8Jg4CgszuHP/MSERSYQHPuPabzfwC4ggISmTlNwcQiPDyc9NJrMwlwe3b1Jc1U51fbfKU6AgJYlH
9+5y+dJ9AoMjKKkZ0M438NJP3AguYGGqiwcPH/HI5ykpqUUkp0bwPCCVnKJMnvoGEOAfRkpyGk01
nQw0VnH1l3/w77/cJi27gKjwcApKsvD1fUpURDwZyRn4+9zlcUA2dm+vscJn51MagPfRgVs95OOX
5r+rxAD8OJytBHhWYgBE76IfwgD09vZp2V4KFcGpZWpcY7XJZG8D2en55Cen0T40w2BbNU9u3yM6
MZ2sjHTKisrJT0wjIjiO6poaEoL9iE3JJjMjg/SUaB4/8iEwPIm8xCQe3L1DTGwiUaGJJGXmkpCU
QE52Emk5uTx/5kdFbQupsQmUlBYQE51Ccmgwt+48oLSykYr8fNLSC0lMyaSpY5DmunJGdLOE3PmV
mz5RZGcl4usbSVZ+DkGBoQQERJCWkkZ9VRMZQbE8uPWIW4/9ycrIJjo6Suu90D8wnKHJBTqbaogP
CuKRXwzb+68oUxA+C1/LAHysxAD8OIgBEH2MvnsDYLVuMD09oyX4U1NTWlnY8PCwlgNwpGWnHjE9
PsLCskVrHaBqb+/trjM1r+eIQ6ZGh1kyqzL9Y7a3d9jZWmVab8S972BibJjV9Q12du2sG42smMxs
rplZmJ1hTLegbTM3M4nJuonzYJ+9nR1WFmcZGBjAYt3CtKhnbX0Vq3WTPfsmg8PjOA+Pcdrt2Gye
yHdpvJP41EIsm2aKcnMYn1/G6dxj1+5k06JnXLeAfXtTKwJYs66ysmLiYN/OzPQUW/Y99l0uXE4n
liU9K9p1CF8KMQDC10YMgOhj9N0bANWjmd2xh8FgYHR0VCsKUFIXJQifEzEAwtdGDIDoY/RDGIAd
rZ9+QfiyiAEQvjZiAEQfIzEAgvCBiAEQvjZiAEQfIzEAgvCBiAEQvjZiAEQfIzEAgvCBiAEQvjZi
AEQfIzEAgvCBiAEQvjZiAEQfIzEAgvCBiAEQvjZiAEQfIzEAgvCBiAEQvjZiAEQfIzEAgvCBiAEQ
vjZiAEQfIzEAgvCBiAEQvjZiAEQfIzEAgvCBiAEQvjZiAEQfIzEAgvCBiAEQvjZiAEQfIzEAgvCB
iAEQvjZeA6DCn0rsldS0GADRu0gMgCB8IGIAhK+NClcqfC0tLTE2NqZJTatwJgZA9DaJARCED0QM
gPC1UeFKJfIq4Y+OjtakRkPd33eJARC9VWIABOEDEQMgfG1UuFKRuAp/TU1NNDc3a9MqjhQDIHqb
xAAIwgciBkD42qhwpcKRisi9EbfXEIgBEL1NYgAE4QP5ng3A4uISO+q8jo9F37EODw+1SFxJhTMl
rwGYmVsQAyB6o8QACMIH8r0aAJVomC2r6KbnWFhYEv2AmptfZGZ2gf39AzEAotdKDIAgfCDfqwFQ
Uu/P1zq26NPq4DXyPmNvjoAYANFFiQEQhA/k8xiAF+H/0P1yZP8uOjw64ujQfW5fKkF4+TjHL81X
5+N2H5yel/vwiOOjwwvbnXCsjnF+n97tzl6Xmtb00jmc1+HhEYfui/t8P6lrV5y//mPPcu95vHTP
lQ60Z/S2c/zeJAZA9CaJARCED+STGwCV+B446W+rp6yqla09zzYqAVZ49wFH2rSSSjRPFp4sg91N
KxbrNofuAwZbGqlobMd5+OL9OXSr/R1jXDHg8uxaK0/WOD7iwOXC4dzX/t3btrJi3vBsd+jmwGWj
q6mGsrJyFkw7Jxsf4t2793z2XU7cp6d2hHPPwf7BSeJ8cq7e6zo+cmvv886OlS2HJ2Jxa+eo1j1/
7cfHZ679dD8vrn1n08rC/CKr69taUzjz4jyTcyuehcfHuA8O2HO6Ttc/Ojw59+MDDGYjTvfhD2UC
xACI3iQxAILwgXxKA6BeLtfBIW67mZiwCMLDYqlpHGB+ehrrxg4zk1OYzWvMTE2h15vZWN9kc32T
3c0NJsYH0K+usjA3z+KCjqTocFrGjCyNdZKYkk9zYzuDwxPMLyygm53Gtu9mabyR56EpLJsNzC0b
WTMtMzw8TkVBLul5Vej1yyxMz9DT2kR+SQMzujm27Uc4rHMEB0RSVpxDRnYdZvMCK9ZtLMYVuhur
SUwrYn5hmrrmHowGPQP9nSTHJ1DdOohpZYHh8TE2tqz09/RhsGwyr5vCYN5SST51pQVUN7YzMbeA
07HF+MgEG5vb6CamWDWvopucYmV5lY2NLTasm+xurDE22o9h3crczBwL8xMkxccRE59Ox9A86yYd
t365Sk3XOCajnp72OhKSshkZm2JSN8nw+CRrm7tYTXMsr23Q2VTF6KJFMyTa8/jOJQZA9DaJARCE
D+RTGAAVjtULt76+ztb2LocOC8E+D4nMLGJqpIv7v//KI99wHt6+TVxUMrdv3iY6IoUw/yc8exZC
XHQMWdmJBIcH8PSRP3EJkYRERtI+ZaCnroShRc/LmRkdwf1rV/np19947BdEfl4SASFh3Lr8D367
ep079/1JiY/n0s9XCYtPp6GmhsB71/n52hPioyP545crdIyYcNsN+D16TFhQCPEx8Vz9+S/cfhqM
/9NHXPr5Or5BEUQGBvDYN4C4+GTqiku5f+cRSenZREWEk5GTxN37j4kMjyExOoG7V34ntbCP46Nd
kuKDCQpOIz47k8a6am78+iu+ARHcu3WXhKgEbt64S3xMKkG+Pvj6RRAbFUVWTiL+Qc959siPxOQo
opKSiU3OZlK/gXG8nn/76zUyk+L59dI/+OlvvxEUlUxEQCD3Hz3h6fMQYiIjufbLv/HH4xi62mup
bOvTIjoV4X3vUmFKRdgq/IkBEL1KYgAE4QP5VAZAvVzqf7f7mIMdI1lZpdq6QxWl3PzHDR75RxLp
95SQ8Die3/chLTuNqNAQfENiSCnKIzc9gcCgYArLG6guzSIoKIC2cQPmmQFiYtIoy8klMa2Eyuxk
nvgGk5KSQkZqLKFBz3l89z5RsXFEJpWwOD/Js0dPSExNI9w3HP87Pvztyh1SU7J4fOMG5Z063DvL
5BY3sbthIMzHh0f3H5GWV0JmZDjXrt0iPCKWwtJKcjNStenGqnoSo2KIjUsiLDyMzKxkHj6LYnpu
joL0NIIf3iM8rYrjIxepUf74PI0iszCXKL8o7l25y7OgGEKf+BAZmcDTez5k5KQSHhDM88g4Mkry
yUqN57l/MOXVjZQXpBIVG0tKShrxSdlkJEfiG5pBXVEOj318SUhOJjkhiafPgsgprKC6qoqUqHAe
3blDYn4NnY0VNPSMaPf+Ylb69yZvuFLTYgBEr5MYAEH4QD6VAfC+UKoi2r7LgdW6rtUHcGxtMNTb
x+KKmZmJCUwqG3x0DOvmFtsbVqxbO7hcDiZH+lg0rmKz77FuWqCrp5dtu1MrI58fHaK7dxiLKhPf
22V4eIhNuwPdSA+6RQMbZj0juhmsmzvs2myYVhaZnplj3brO2MAAUwvLrFssTIyMsWlzcuBU57fJ
wb6Lnc0N5mbGmTNaMczOMKdfRD87jcGyxvaODfPSND39wxiW5plbNLFlXWJwRBUBeNqtb1qtTI+O
sbK6oYrnGWjI4sZDPybnV3BsbzDQ28+ywYxufAKL2cLk6DgbKoJS1769y77LxshQHysWK3bHHma9
jt7BETbX1+hub6erfxijeZ2D/T0mx4ZZXrWwODPNksGs3eN1q1WLO1YWpphZXqGnvZmV9d2TCoQv
J6rfk1RELQZA9DaJARCED+TTGwAVeava6J5a9weHJzX0jl9UgFOoimuemv6HuA8874FaR+3LWydQ
1eRX+/Ci1j04qVinatqfbMTRyWul7cvtPq3M5z1fhbeynapU6G09cHb5h3D2fVaovgmOjt0cnKms
+DbO7uPi/s5yWsHxLRy4DzjG07mO0qtbC3wfEgMgeheJARCED+TzGIBvWyoCUBGDyWzROhP6lLJY
1lhds740/0vJsrrmmTZ7zuXsM/G2PFBS5uDiffnWJAZA9C4SAyAIH8jnMQAH2pe+FomffLG7D15E
6m/7Kj3UvqCPtfb7CpWd7X1z1Jf/xyReBwf7Wteyk1MzWkK9Zl3/YaWKQdSvul/qGZlMJm2YXaXV
1dXT++h9RtqjPnluXqmmjCoMqNwVbd6B2/P/0fs3NTw6UvtRHfscvnQcT5fA58OFGADRu0gMgCB8
IJ/cAKjE3WlnxWDCqSJyh52JsXHsJzn5yhi4nKps/+RdUNn+Jwm9MgkqwdneMjG7aGB3Y5X62mpW
rLssTQ5S09LLts2GdWtTy+ZWifnFROZtUtuo81fX/aNjXV/XTI5iZGSExsZGurq66O7upra2loWF
Be2Z2teXSI6JJiE2if4py7l9HB3saXUXNra8EeQha6urWNfVMziPanqoDMJFVMKvWJwaZdHi4Mhm
pqtv8tw68+MjzC6vnxYdiQEQvavEAAjCB/KpDcCB+4iDHQNp6cXY3XuUJUfx8GkC69vrrBjnyUlP
p759AN3MHFMzOuaXLew7d5iZn8dxcMyxa4fqogwSs4rJS0kkITmfroZ6UpNyKC0uIq+kmsaWRq1j
H8eeeplfTuTfJK8BWNQvn7vWHxFVHOA1APX19VqkqL761TNdXl6mo6NDW7Y2P0BgYDT5uZkUFFRS
WZpJQ88wDZXlRAcEcO9xkFYRsqmqmJToCK7ffEh9Rz8djUUU1NXR2dpAQnwms4ZdDly7VJWkU9LQ
SnVJAZn5dZiXFyjIziU1MZlHAVFUNZSTX1BBbWU21d2jTA1Uc/X6XbqmV5VdEAMgei+JARCED+Sz
GIBtA7kF9YALnz9+JSAsmWCfK/z8269cuu5DWloqD+754PPUj6DIZIIe3eEvf/87pZ2z7K/PkVOU
R0lZAzrdGMV5eYT4h9AwYAC2SI/Po6I2n86hxdME/WIi/yb9WQ1Ac3MzVqtVi3dUEcji4qKWE6Cw
Lg7x/FkQyUmJ+D54xN/+9jOPnwXi5/OA3365RXx6Ln6P7pNTXM9gbSUhYfFEhQQQk5RKblYMv90I
oDgvh/LmcQwjdfy3//JvXL92jefh6ZQW5JEcnczdy3/wT/92lYqaRkJC/Lh79Tp/++lnbt+5S1xq
GmmZmXRMGMUAiN5bYgAE4QP5HAbAbbcQERhGVVUJd2/5UFXbQNST+0QlJBETk0B0eCjBkalUV9eS
n5fHvT+u4hsYSue4gf0tPTm5WRQWVNDY3UFmbjrBoXFkpeeRkZZFTdsQjZV5DOqMYgDewlkD0NDQ
cPqs1DPV6/W0t7dry9aWpmjvnwXXBvnJScTHRVPb0U9xfByBoaGkJKVSUlZBdnIc2Rm5ZCQlkldU
TmF2LLEpqZTWdjE9NUbHwAy71mWSIkPJKimjvXecad0QycGJBPsG88w3nOBg1UdCERXFJaTGR1HZ
1k1lXiJPngcwtbLF8bEUAYjeT2IABOED+dQGQBtMx72PbrhXK3Men5pjx+bEaphlSDeLcWmOKd2s
VgNffZFaVjfYXDPSNzDIhv0Ajpy0N9UwobdgWZ6hvqmV3YMjTLNjtPSOsbtlprW1BYvZyq7DKQbg
DajE32sAJiYmqKur0xJ9JVUHQOUCqGeqIkTv4EkKh8OG88CNy7mHW1X+c+5pTS2dDht2pwv3/klO
z76TPTXeghp74aRyp/vwGOeeHbtz31PhT1UiPHJr4UcVP+zu7pzW+djbs7O378a978LucJw2+xQD
IHofiQEQhA/k0xsAT+R9FtX23tvi3vsGvBgQR7WdP1lPJeYHB7gOXNqv93U5u73L6WBvf1/b/n0T
f0+i4jEAM7PzJ/3NqzEMfkwtLRu0XABvK4C1tTWtJYCSigzV/T97X7RpLSFXNfU9CfCpThLkV+l0
H6f7Oj9Ms8dgeOZ5f1+s513+cssQMQCid5EYAEH4QD6XAfgYeRKWl+dreodmhO8iNVDQ/IKexcWl
H1ILi0vMzi1oz9R7v7ydA3kNwcV78q1JDIDoXSQGQBA+kG/RAHwJ/Vn4FGbpa0kMgOhdJAZAED6Q
P6MBUOerRpmbn5/X2sIvLC5q5eGLavozSzvO4uJL899H3n2c1cV11LUZjZ6Kkt+rxACI3kViAATh
A/lcBkBVHlPruz/RF+iB23OOH7s/9fKrZnAD/f0nFRHXsFhW2bHtYDGbtETztTopP784/1XzzsvE
5tY2WxvrrFmtbO9sYVn1JFyqU50tlYBtbrxiu1fLbDZjsVhOpXr1u3gOBoOB4eFhbd2zZf3fk8QA
iN5FYgAE4QP5HAZAvWA7G2ssLS9jd3kqfXnL9L3dzqoKY1p3sidl+hqqV8AzZfxnt3Pad1hZWcGx
f6hVCvRu4xn1zlNJ7WIC8iqp7XZ3bUzpdOxtqoRzkwP7Ds3lbbhe7sTukzHc18HYohmb2URHwwB7
u9s0NbewZXcw2dvF0OTixU1ei213h47mJtqbm2htbKS309Ohz0XU/VId/ogBEP3IEgMgCB/IpzYA
Wj8Ae+skRkaRlZVCZkGrVoPfG/SdO2v09Y9xyDH6RT0OlxvXvpOp8VFGJ+bYsXtMhEJ1GawZhuMj
GoszCAkKIiu/jE37gTa639TIMIZ1u9Z5jOoa2LW3p9V+v5iQXExUbDY7s/NzDFZnEx2RT2tPKwlR
cTR1Db24+Fdg2zAxNDqDSyVIO1vMTU0wOT3H5NQcLm8zhVfgdu7Q2ddOWkIgwQn55KakUtHUTmNT
CTFRQdy9ep/arrGLm72W+elpBvp6mZ6ZZXxylrqaBpaXlpmeN6KbM7C57XmOqq2/MgFiAEQ/ssQA
CMIH8lkMgH2VsOdBZKYlk56SQ3LUE/ziMshKTuDJ3UfcvO1DalI8T4NiKC/KIyU2nqu//k54ciE1
ZTnEJkWRVZBHqK8/WUXKQBxTXVyMcddFZ2kJ1SWFPHngwz9+uUF+aSVBvreIK2pgZXGFbdve6cBD
r5LHANiYmJzhyLZKQ24N5e0N6GbHKG9qPXf9F9kyTHL3rh8zK2ayo4N45h9JYkQ4IXFFuF682q/E
tWGkqiCdzNomdLp+2sZmWRrpor65lYbqelJyMlhzvGUnJ+jn5+ju7KRvcIz2njGqa5owGQxcfZLG
f/5HIAbzhmc9MQCiP4HEAAjCB/JZDMCuiejIRDqa6wl8+JDf//YPAkKjiA4O5I9fLxMSlUhmehax
kWE8eBLO/OgkiRGxJCUlcevuE+rqS/nll2u0dHSTlZaLepvKc7LoHBijOjeV6OdRXL10iV9uB5Ad
F8Gvv/5BZEoRu84XbdFfJ68BUKMButaXqC1soq27lQj/cBpbu9nafP17uGmYwvfBc1KSc3h2/xG1
PToGGot48DwF18WVz6C6Rr712x9UNPdQVlJKcmwqadHB3H0cwvj0FHUNtaQl5LPufDcDsDA7Q3t7
Nz1D01Q19ZEQm4xjd4tduxOLdet0PTEAoj+DxAAIwgfyyQ3AgZt9+yZDw1Mccch4Tzd1VcXU944y
1NRIbn4+1WUltPYMMj6ho7upitSUbBprq6iobmF0oJmM7Axae4ZYXl5hdGRCq1A43lVPdGQkvaNT
jLa0kpySTVFZOX09vdSU5dEzrce4sMzWu+YATEzC8SEOu4vDPTsjXeM47HvYdvfO3YOzDLZXU9Uy
yOToGEvLFvZcB1rveOsbOxdXPc+Bg7HBQUZ082xZ1pgcmmNzdYWhoSGWTBZmJycwqsjjHVk1mSgr
KqW0tIb4uCTyM9PPxS1e1LC/YgBEP7rEAAjCB/KpDYAWeZ8MCXuw//J78D6ol1ah9vl2jnFrY82/
nJBcTFTUuzc4OMCuzcbengPH3h6Hx4da6wDHnkO7D6/S2qqFLZtD60hHHWfPobZ1su9yvrTuOdkd
2nj3R+4DnC4X7iM3Tpfq6fCYfRUhaZ3y7L283Wukzn9Jv8j46DBTE+Nak0Y17+w66nlNTk5qrQHE
AIh+ZIkBEIQP5LMYgG9c6nzV1/HY2JjWR/67ampKx9Tk5Evzv7RUwj49Pc3MzIwmnU730jrj4+Pa
OsrUqAjv4j34HiQGQPQuEgMgCB/In9EAKHmvRV3fj6zvNfFXEgMgeheJARCED+RTGQD1cqkw7Z0v
En2sVGStijfEAIjeJDEAgvCBfCoDoJarF0z9LxJ9SqkIWwyA6HUSAyAIH8inMADqhRKJPqdUJC8G
QPQqiQEQhA/kUxmAi+W37kPPum9rl/82qXdE7V+ref/S8gPtnLzzVSsA7zbvMmbA0cnr6OlO+OXl
Hyp1vu9y/HeR5/rd2vWfX6buycl5H3haFLx8f16W2tenOrcvJTEAojfphzAAqimSIHxplpYNn9wA
qP3ZNlcZn9Sxt+/G7T7A7X4xDr2SNi79SeKulqlmclpTPrXszDq23V2tmdzm+hp7LreWWHu/Ct0H
njJidQyVGNp2bewfHOJ02HE4Pe+gNrbAyT69Cal3e/PyPCMjI6xteZr2qfPU1jm5Tu85eLdTHJ+M
X+Ddj3c7dQ3qVyXM+wdObA7HubEOtOu9cP2nxzsZH0HtW5vv3e/BPju7dtwHTtbWrNp5eQ3Rwb6L
nZ1dXAcH2j0xGY1at8pHJ+ep7seL43i2Uc/Pbt9lb98TCV5MaL9ViQEQvUnfvQEwGs3MLyyxvrGl
jRpmNq9hMJq10cqMRgtGswWzZQ2L+n/FwPKSiR2bg431dUzmVSyra5hMRgwmtb4aFcysbbe26lmu
bavWUaOEmdUIYmoEtDVtXYPBzKrFglFtf7Ivtcxs8Uxr24p+SKnIU/WIpyXAH2kATuU+4mh/i9zY
KJLTC9AtWrWE3WHfZVO9oLt2re//za1NtnZsnj78XXsszY7R0j2G3bbO+NQCdvsOW7t2+tqaKSkt
I6u0FLvThUN1NqSNNHjI/paJwGcBzKwf4HKYyEgvYMvporm8gJz8MqpqGpicW2Z3d4eN7R0OD13a
dTvdcOTaID48goKiHJJSK9lz72sGQw00tGFepLauFdveHuNjk9p5WNfX6G5vob1nlI2tbTY2N3Af
HbKxtsauY1/rEGjXtqculYm+VjpHprX75FL31r3P9s42G1tb2B1O9vZsbGxtsutwwvEBe849+tpb
0S1bMS7NsWiwaiMHOmxrVJXWUFCcQ13PMPuuPfb2D3Afqd4Fl8jJq2LP7aSjopDgsHRs+272Xdu0
NTUyMDbD2sa2NvLgjjovDrX7Z9FP0NwzqE7zdOCl70FiAESv03dvANTvhtVE1PP73Lh5kydBOQwO
9nL75lM6+yZIjAnB50kQD338GZ9cZLi9h+KMdK5cuUlCZhlpsVGk5pbRWJ3HjfsRdLS1Eh0USsDz
IDoGdQz3tpOcnEZDUyPZqVFEptcxOdTGtevPae/oxP/hI+rbWsjOL2Nlw67dvIbqYlp7uiksLWJN
DWUq+uG0ubmFze7pgU772v5AA6DCr1q+sbGh7ffo0ElXVT55BeVk5xXSWFfB0wf38fELICQygaiI
SHyePuN5WBJF2WncvXeNf/x2GR+/MMIC/AiMTCA3LYH8/Doqs+P4f/2//4mB6QXi/K5x6fZDUnJK
aGpuo7W5lqePfMgqLKQkJ4I7z0LIy0/i2XNfbt6+w6XLt8kuKCMnPYaY9AQio6Lxe+xPbfs0x0c2
IvwDSIyLIjkpk3C/m9z2jyIxKpy7V29rXRLHx0Tx4FkIWRnpZCencvP3q4Ql5FCQk0p8ciQxifGE
+AWSnlZA8JMHxKQ1csghlaV5hAUF8fCOH7nFNVTlp3H77iOe+gcRFZesDWrk8+w5MSkFZMQFceX2
dX7+7Rrh0Qk8evCYhOQ00uLiaW3tIvDmL/zr9WDmZ4a4fvU3bvsEUlpVR21ZDumFzRwdO3h46e88
DUwhLfoJl29c45c/bpOSkYW/73N8fJ8TkZhLTlI4/7h8habOfsrLi1izu9lWJuwVle6+NakIW4Uv
MQCiV+m7NwCKzeUJyhu6ME6380//6b8Qm55NUEAgwSHqSyqV0NAYkpKSyU7PoiqvjPC7z7h+34fw
qFjS0rPISIsmLjmexOxa5uZ05KVm8vTmLTqmDCxNDVNf30hBRjhJ2TmkxGcSGxmNX3A6+mU96Qnx
pCYEERKXyoppA9chLE8PEeQTSG3Dq4caFX4sPtYAqJdLawbo2sdl32Z0vJeYuATikuJ57H+fpLRc
srIKyU5L5s5dX3LzS8jJyePWzz9z79Ez/ANCiIlJIi+3gIhAP2ISs5noGycvLZ3M7DyCfW7x+8+/
ER6XTVpyCAGJGVQUZZFdUMyNS38jPj2b2HCPeSjISeSXX68SHpVIVGgwIVFxFOYlcuVeBCOD3eQU
NqkrIjE+g8nxIcIf+3Dll0uExSSSFBnO1d8vExQeS3ZWPqmJ8Tx4FMRE/zCpUXEkJiRx78FTqqqL
uHz5Nt2D45RkpuD/8D6PApLZP3JTXppNYmQEjx4GERcfwr1nfmRl5lJYWEp0SBDPAmIpLiolPTmR
n//lJwJDQggIiiQhMYO8nFwe3rpDVXUrEwO9JCakUVCYy9W//8yN24/IKanEz/8+hbWNpCVlMTzc
za1r9ygqKePZ9csEBYcSEp5AbHgwT/yjKCwoJTMtjV/+5d/x8Q2gua2L0vICrHvH7Dv3Tp/jtyhp
Bih6F/0QBsC978JTb+qY6pICJvQm5sb7qWnq0cZUdzldWt/lS4vz7Dj22bIYsWxssrNpxeZ049hZ
w2zd4liNqe4+ZN/hwGIyo45weDJ2+uaagS3HAS6builmLbJW/awfHx2xZlrSvvT3bA4ODj3nuTS1
yJ7TE+kLPzYfawC8L5Qq0z5wOehoKievqoWejipSCou0Iq3pmXlmp3UMDIwwN7/A9PQci3PTNDfW
MqybpK2hgYmZeZb0S/Q2V1Ja0czcgl4rB5+eGKKlqY7uUR0lhcnUdA1gWF7Wzsc4N05Jfga1rZ2M
97eSm59H//AwXS0N9A7rGO+vp7yuiZmFZcwmI3MLRtzuPaan5zk4OmRpWkdvZyNtw1NM9/dR29BA
V2sTfSOTLCwuMzXURX5eMb1dHbS09bEwO0xpeQnDk7NYLKvo5+fprKmlpWdEq1g42t1ITmYhzS0d
ZGbFU9c1iGFJz/zCIpNjYwyPTbGwsMDMnJ6ZsQFqW9uZGB+kqbmT2QU9+rlpKgty6OgZZWHJjGN3
k76eDhrqaxifmSImMQrj5g6dNaVkZ2dR29COcXWDudFOGnsHGRvopqW1k7EJHfPqPs8uMjc5TE1T
C+NjAzQ2t6NqCrxLpcGvKRVRq0hbTYsBEL1OP4QBEH5MvInjtyb1MpwNk5/KAHgi7xfhf2VxFsum
4/T/F7x4Fy6i6gWc/U9VaHvBATOzszj2PeuoROz1e7rIsaeC37HqG99zjmq8gjdv/+alqtLd2TVU
5OJ02rBp+z9iZnZOq3Ogceb999zXV+37wjxl6E8q9ilcO6vM6j39+5/FO27Cy5w/jn13g22H47to
CSAGQPQuEgPwGmw2O0aTpwKh6PNLteZQ5epe1PO2Wq2eymAu1zclFal6TYDi0xqAF9KSn0/azM5b
u//i/PeTp1a+p/XAp5S6F+o+aTlxJwm3qqWv5l9c932l7fskCtH295Z9elshnL1uT2uFT/k8Pp/E
AIjeRWIAXsPCwpL2gmxt74i+gFQLDt303LmvalUxTqHmeXWW8/Ne7sv9wuqetV76kvR8Xb687Zl9
v2KeiljVi6D4XAbgW5N3tMDFxSXm5/UsLC79sJqZnddGPFQR3qvimhfm4EUuyMcaqzdJNcfUjqmd
z0VjcrLs7PpiAETvoB/DABwfMTPURUlVI46X39VzqKaA71Iyv7xs1MpkhS+H6ljH+5y9BkD9rxJP
75fhzHA3hYWFtPTqTrdbWlh87XM3LhvYc+0xryL00/xkFWRUZvkx2yeJ+OvwJvrec/Cch2p+5/o8
BkALc6pjmhcJizdS9x7/TVnQnq/c8wUBXrzXcXGbd5UyAOr8Z2YXPG32f2Atrxi1przqfqlIsq+v
j+7ubrq6uhgaGtKel2YO9p0sL8wwpZvHsa9yCF70X+Dpn8HbZNB92sGTJ8H2dCrkNRinHTKddMSk
EnwtoT/p10ANn6zqHR3sO7HbHWeO48a5t8ee05Mz9eJZiQEQvV1nDYD6VSNgKqnmv9+NAXDvGonx
f05NYzebG2YGRkawuVzMjAwxv2RGNzXNxNgwnV29pMfHk1vSwuqmnc21jdeaAWUAnKryoPDFWNQv
v8EAqPmH5CbGUVJTQ3xUBvP6OUZ0kxTmlzGsnu/QKPv7NoZ6+lnfdTI3Vsdj/wR27DskR8XS1j/B
5OgYOYlxFDePweEOJUVF9AxOMK0bYXrFgnFxhvGpZXbXVxiZGic+KprBedUeX5UVf14DoFUCtG/Q
1TWIfd/F6tIC5aU12E8C6db6OmvWDa0S2kVUUYEqU1/Q9VLb2sv0yAAJcQkMTczTWl5ARGIOuoVF
dAsL2vrer/n3kdcAqOf0o7O6ZtWkaGtr0zo9Wlxc1IZC9poAxcbyOKHBkWQkJlLVPM7RkVt7PqpP
hJW5SZpbOjGYN3Du2bGa9bQ2tzGrN2F3OLA59jg+VMVJ2+yr4oXDI62/goOjY/b3bGzt2LUE3+nc
Z7CjicbeGbbN05TXdnN87MatgtfxAVVFBQxOW7R6E2IARO8jZQBUgq/CRWdnJ42NjbS0tLC2tqoV
yX4XBoBjNzOD7WTm5BLy5D5//eUXsgsqiXnmw1/+fpWA56HExCTQ29pJqF8IsdHxFJZ34tA6U3k1
YgC+PO9iAPITowgPDSMmNhHf21f49Y/LPH4WQrxqjpmbQWVFFU+uXeaPW08oK00nNDGPnT0HKRFh
hIbF8PjebX75+w0ahhcxzo6QnZVF6ONn/P7Xf+Haw+cE+T3h8cMgHl69xKU/fuWnX+8zrQLnlzAA
7iMOtldISS3CcWAn4sFVbvskMDbUTH5JHvfvPiCruIay0lKy8vOoaOxlYXqAtOws5tYcHNnM5Gel
kpFfTn5aImmZZTSXl5Bb3MbKzCApKflU15UyOLaAze58Y07Cq/RnMgDq699rAJqamrRn5I0AV1ZW
tMhSsa4fxveJP3EJCeRkZONz/wqhSdlEBQVw64+b3H0cSGlJKTlpycQFBfDH1bsUlFSQlxFNTEYy
sbFx+D4JomvMjG19kcd3/+BhQBgRIWGERWYwNtjDkzt38HkazJOAUOIzk0lLSuXZo6v4xaZTU5rM
tbuP6Z5ZEwMgem95DYAKH83NzYSEhFBWVqYt29jY/D4MgHN3nYqaIuLT0wnx8ycyPp7CrCJC7/ny
67V7VDT30FCWS1leCYnJxcyppkLVrayvbkoOwDfE2w2Am6qyKjb39mkuzOLp/YckJKeSkJhGcnIs
qblZJIUn8+ymD/eeBZKTEUNoTBo2l5P06AjiE3OI8/fjzoOnVFbW0tk/xNjoMI11jSQEPiG5oIKy
9FR8Hj0h+NkzEtIyiImOZ2ROfV19OQOQmV3F/v4OD65eIy4xnbu//ZVrV69y92kE6Ukx3Lr9hPCI
GCIi4/jlX/6VX/+4QlHzBE7rDDll+RQVVLFgNFBdmsu1y3epbJ/mcHORjJQSqmrzGJhZ+6DKhX9m
A6DCovfZeXMBFObZARJSiujvbOL+5atcvXabqJhEIp8/49Lvt0hMy+bpg3vkFNYy0lRHdFQiof5+
xCSlkpMRzY3HCQx0tVDWMMzKcD2//v0PfJ89Jj6njt6OWvzuBPDo5m3+8z//RmlFPaEhz7l9+RpX
L98iODiQuORUUlKS6JwwigEQvbe8RQDqV4Xx9vZ2jEajlsZ+N0UACsPiDHMG9cIeMb+4iPPgCOPC
HCtmKweHsG9bZ0o3y67DpX35qDK13e035wCoskDhy/G2OgBKDvXsj461vh92t1aZW1pmb/8Q+5aZ
uSUjx4cHzE7p2LY7Meln0BtXtX3Ydne0/u4N+mW2tjcxraxgd3n6hVd9N2xZDSytbrJjXcW0tsW+
Y4u5FQM72+usb+6cO4fPaQAOXVskhgUTFxdNQGAUXf2jVGXHk15cRmFuJokJyeQUVtLR0UVdfRM5
SQlExiUxadjh0GEhLyuDqrp26horCYuLo6a5i7LMNPxDkxieWaC+LFfLAdiVHIA3ctEAqOx/FQmq
SHN0dFSrD6DYWTcxPW/kcN/G5GA/DXUVDE7r6a6pobaxnsbaOsZ1szRXFGgJeFtDLb3Dk/S1lVFS
24RuVo9hZYnZRTP7LgdtdWU09Q4wv2jAaFymp7GDorwiqqobSE/LpGNwhPnZWdoaKuifWWK0s5qU
zBws2pgML0zduxgA1bWzmq8if9GfUypsqDokKlyraW9ugNYF+PeSA/A5UK0A1tbW2d1VN0P0uaVG
dLzYCkD1ZPatoiJW9VIoPpUB0CJvZU7tu9oANk5txD5VIdDJtk0NbONib8+lRfRaBTD3IcfHh2xt
b2uVB1X588z0KOZtB8cHTu0F1vJNXHa27Xs4d1cZm9JpHWM5T5ozvo+8BkAZtR8d6/qGZgDUMzSb
zTQ0NGhZpMoMtLa2nj479QzUR8eHVxj2GFz1HD0VQL2zPWbzXVF1Ds4/qzcbgBWDUWvtYLWua2FN
9CeV1arFE6uray8tU2FkfkGvVb7+0xkANVqYqgms+gIQfX6tGExYrZ5mf15UoFtdXdX6A/jWZLFY
NLes+KQG4KTJl5rv/ULXaoq/YpAXr9S63m1VSYmWGJyZ71nHU2NcndOHVAD07GdfO8/JqWnt63F1
1fpDyrJqRTc9y5p1XXu2Suq+nZ0+e8+/Rb3JAKh5Kn7T65e1OE4kWnnFPBU+lDnwhps/lQEQvg3U
s/eWVX0rUufjfQEUn9oAfMvyJCxbWje+6qvhR5TK/ldfQCqn5OL1fy96nQFQxWrKuKrlKkx6TY1I
dFEqfKgwoxJ+FW6+KQOgTlAQvgXUi/JnMQBKL1DX9yPKw7f+lf8mvc4AKPOqInO1TCR6F3nDizdc
fXUDoCJRdRJqvkj0taUi1T+LAVARwNzcHMPDw4yNjXk0fvL7JfTRxxpnamqKqSkdUzodk5NTL62j
2vyPj4+f5jRevAffg15lALxFRhfXFYneJm+4+SYMgOJsrWyR6GvrIj+iAVAvv0oUBwcHT69TdT50
5Pbcg4vrn5XquU7VJj43/+BAq2D0pjoJWiW703f/iEO35z6eztK2f59EzYXZaMCwvMTKkp5169or
E/mZmRmtvf/brutb1esMwMX1voTU/f1aetU1X1znS+viOXGo0jxVpP2N6ujF+X4zBkAQvmU+3ACc
Df/H5yMvVW576ElEVRGYN+H0lNcdvrZZ31m8Xc6qbV63/uukXn6VkMzMzjDT3UhtXT+GxWkinkah
N3laRLwONczxnuvlYrvdnZ3X9sWhONp3UJCXSnFdE32tnSSFZzI5MUpsYjx9I0MUJqdQ1z5ycbPX
Ylxepr6qguaGehrq6qkqK8e59/KIi6qt/49qALw5ARcTok8ttX8Vrr9WkYM6rqqzc/E6v3YxiLon
3nNSzZb16w5KxzepmNiiYvIb09gmQys2jg6/sRyAHxl1rd+jXsfF9X40vYoPMQCe/uHt1BTlkJaW
Qmv//IW9qn15Eqs9u42Dk5TTtXfSl/crEljVZHCip5G46Gha+8ZOuxFW2zv3vf+poX5fGIrXyWsA
pmdm0Q+2kB5bSHVHI42NtVQ2tZ856svsWBYpLK5hdWOLicEeCrKzKSyqpLF1ENcbHMCR28XWjpXs
GB/8UkrobKmmumcU03w/ocG+PLj9lMr2Pg5f/RheYmF2htHhYeYWlpiY0dPY0Mrs7DyJuY1EpFSi
X1E96oFer/8hDYC6HlWZS4VDJbVcmUFtO9VhyglHFwccUuMYnA4FrZqmvlimhok+vpi7cyJ1LDVO
gZbgudQ4BvYPkjpXVXnR+79qxqqM2/l1PP3Yn91GtdhRCb46vvdd83bqpNZR63v37Z33quO9XS/v
46LUMmVI1tbWtHuj7rF520loh5U2vZ0Bg5ORVTejqwcMGBz0rzjoN+wxZN6n3/v/GQ0YnefmD5pc
DBj2Xlrv3Lonxxg2u15ednE7g4OBlT2iutbp1u9yfOQxjWIAPhPq5VSBU7V/V7/fk9SLdjEgqMCi
5l9c90eSelYqgrkYPj/IALiPcdvMhAWEUVFRRHJiISPDbbQNTTI+NEB5TiZPfcPo6GonLbeMidEB
ykuKef74Mcn59cxMDFBZW8HknI7yggK6hlW//8eU5WTQ3jdIUXom/f2DNNY3EvDsOQ09Y/R11DAw
u4xl2ciO1jnQy5G4V14DMDk1w+G2iZqsKsrb6unuaaO8qe3c9V9ka2WcK5fuMTAxS+STu0Qkl1CS
FsOtJ4m8aE/xCo4P6WuooqW5hZL6Bnp7W6lqaKK2pJSp+UUmJyZJTIhlZfcNLuIM+vk5Oto76O4b
oblrlLLyerY31ojLqud+YDZ2h6f3zx/RAKjwqK6rrq5O6/NdSU2rpraaCbCvU1OST1FRCWs2lf3r
aeGicGyvsmJWHV+5mZlZODWSKoQ7dtZZNqxqYfnieWjzHDssLiywvvPGJ/1W3Gf6SVB9Zdic59MK
lQt2EXUOKg7yZr2rxFdNe9GGhVatIc4MF+3l7Hrvwrv2BaHiDK0J8bGbnsVdyqZ2Tpa42TTqMRvN
59Z32V4zYNnxheMdqdy+16WT3nUPWDPosTvOPIuL+7nA9JqT3GHVRNtzD8UAfCbUdSqHqHhV2bIq
Lz2dd6GHvLPy3qqL88/pZJ3ji/PPHPPdj+f5ElYvmgogXlQCqQL6y8/Osy8vF/f3Np3dx6v0sdf/
Knmv4VXz1HV6XwgvH2YAjjh0rBLi+5y48DDCgkK5/NO/cuOBL/7PHnPp71cJDIsjITKSZ8/88PWP
YrSrl+BngSSnZfD4sR9llXn88cd1UlIySEjIQz2N6pISTDY3PeWFpETFcOmvP/HXq77kJMfyl3/7
bzwOS2fLvudp5vOKxORsoqIZgMlpDrYt9LaNMDUxRPCjUIYGJ7CYzvfjcJblqV4iQ+OJi0wgJjKR
gaklJvtbSMmu0c7xdRxsLnH38g3yqltprq4jITyN0vQ4HviG0jPUT05mGgV5bTjfLf1nYWaautom
WrvHyCmsISwwGLvt5QjsRzQACtWhkclk0t5L9bxnZ2dfjGuwMISfbyjdPf2MjY7Q3NrL5tYOutER
OpvrCQhNYnx+mJy8chb004zPG3DumkiMDCSvzjM40vnz8JRtV+elk5lfQGxMLluOg9PcGpfL8+RV
7tOCbpTJRSt7mwY6+ya0HIU914sEbceso6C0RZs+cttICYthbFl9Sb8IPdumaSLC4tEtrZ3GSeoa
VYLrNQDeOMr7bg7VNzIxb2a4vomxaaOWW+E9Xn5RA659F4d7W3R09HtKxE9NwTF7DpvHCB0f4TrY
o6akiN4JA0eH+9pAT971vE3qvHHAWQPQv7RLxYkBsMwOEB6eQGp8Eh1Dqlv0Izb0k0RFprPlVE02
3VovqAq320FNeQWzpm3PYfa3CHzmx9DippY7onA6Toq2jg6oLCpBv36AWddDaHgUSSllbNpduA5c
NJSX0DW6pGXz27zbnJy3+p20OCkcVUV8YgA+Kyrx9yaYWgKjBcRZslPTaekfOy0rPVJu9eh8Inqe
49MvmTcxN7PAwSvu67pRz8yC6fT/fafDM/LYOc4nwAoVMNQL50UljOqFUdfjdm5SkZtBSU0zjoPT
1Be3VoHspZ2/ERU5HB6+OO6rUIPdvI35mXlc75p3rEVuL8Km1zgoVPhUCftZPtQAHOyYKK9q5/h4
n8LEOMIC/ckur6cqM51HDx8RHRVNYUUdNdXVpMTHkZ2WS0ZiAglJWWSlq98YIuMzmJqZpba6Affx
MY1FGYQEh1BWWUFhTCoP7j/lcWA4pXm5RAT5U94xhGnZ9E45AOpaVA35c7z5A0JDN9LN5PLrDcLb
OPSGkdOPvHd/bmdx7e3R3txCbXUtxfkFDA/0X1xFQyX+y8vLP5wBUCO9qURQZUmruObsuAabS6M8
feRHdW0DYcHhREfGU5xfRvDDm/zb364Sm5xNQkoUz/2CuPLzX/jt2j0iY2OJT4ihoGlY28f58/AY
gJK0BBJT00hKzCQvJYLrj5+Tm5mOr28M9cU53PO5y9///gs5jROsz7Zz/3EozbXZBMUnYNp2YtUP
Eh3mw9PQBOLCH3P11nUuXQliYaqXRzdvEZpQyIrJRHV+Gv/0n/5Xkso83TS/iwHoLq1gdN7KZE0J
9274EZWaRl1LDUkRPoSkltKQl8iVP65z/X4QtRXZ/HH9Gh3TZtYXxwn0CySnppK6sjRi0pOIiIwm
KS2fwqxUUmKSyS2qpKWpiaU1z71/nQEoPzEApqkunvtFkJycTGFODo+f3OLX367w+HEoiXFJhAc+
4rZvALnZGfj7BhPsG8yTJ0H0jBtZmx8kPCqB3Kw0wmPDGZrWkRz0hKDYPBoqkrj6wI+5rUOM4208
9Qsmu7CE8qJUotMTiYqOITEln6LsNO28swsqaG5sZNHiOa8JMQBfBmUAVAKhGYBjON7fpSw7k+6+
QVp7hlkzz9PZ30dMWCiNg3ptm6n+ToYm9EyPDjE8Msfk0AAdbb1MTuoY6KmnsXeYga42mjvHsG2b
aevqZtO+Q3dNKj6hWahR5wfbm2keHMOxa6CxpYH62hLiUitYmp+iprqO9s5B9AvTdPT1YzIbaWvq
YHPH8xK9zQB4cgSOaK8sor6pk5aOHsyrRvr6uyjISiI5v1Fb1zA9SHVNo2eoVNsus1MTNKi+1Nt6
GR3pYWBympnJERoa24kLC6Oqa1rbbnaoh/7RBeYmRhgYmkE3MkRHWw/jEzqG+xqp7x5iqKeTxrYh
bDtrtHd1YN3dZbA5mwcByTgOj5kd7mVoTM/q8gQdIzp2Nk3UVlYzMjpBb+8gw6O9dLTXERSWxOTE
GN0945oBUQ797HM7y4cYAE+kqco2nac9+e1sWVnb2sW+s8XWrud3x6bKbt24HLssG004HLval9rh
wR5my6rWpazr5Bjqi37Ptq190Tr2j3Dv7Wo9L9ptO9gde6yvW9i0ObAp86nKal+RmJxNVNQ+VSuA
ufl5rX98Jf2S/nR6YWHhlVLdihoNK9p5eNd92zaa1P71evT688d6sR/P70vbvUYqwVP7mJmZ1poz
6peWXtp+fn5eu0aVXXxaPv6d6XUGQHVl7C0TV9dmMBi0AWAUm8tjBPqH09hYRUJ6GfMLE4Q+CiTg
7lN+vXSTkNAkktISCQ+NJsDnEQmZ+WSkpRAc6Et5q6ci5vnz8BiA4swMOrr7yUmI4fLffsU/JJz4
2ASe3LvPpb/8zPOgIB4+9KVz3Mze+jxpSSnkF2STnpXJwNwaQ82lFBQV4v/gFpd/u4J/YCDxOVW0
FBRx4/dr/Mtfb1NX30rIUx8uX39Iy6Cn7sy7GIDx1ioaOzqpKUrjnk889Q3V3Lz1gKrqUiJCQ4nz
DeWvf/+F0MRcoh7f5+7DpzQOzLEw1EF2TgWJsUFEJ6ZSWpzJ1ev3uXn9DikZReiGZshOCuRBRBou
t8qNeH0OgNcALI11kJZdRW9bLbd/u8K9h0/x9QshI6uA8pISgu/f5GlQqHbvfG5c5ubjeMZGB8lO
yaJ7YIC2pkru3Pelqq6MUP9wIh758m9/+4W03FxS09LQre2jH24hKbsem12NG5JKcXEW12/c5+a1
OySlFWjnnZcSwv2wJO28ldEWA/CFOGsA1NUe2ozk5FXj2DETFRLIrd9+4fLV3/npH7cZXdnlwLFD
iv8j/n75EYG+Pjx9Gk3g04fcvePP02fPKaspJsL/GU8D4ijIyuTmL7/y29Wr3Pfxo6Qki6jMKmxb
JhKjM8gpysQ3IJTS8hyePHuG77NAgkOiGWzvJiM2juu//IPfrl0lIDCYy79eo3PUMyDM2w2A+jw8
oCinkLUdO8WZCdy7eoVLV/7gp7/+RnHrFOyvkpaQRF9LB+HhWSwsTnPv6i2e+DwjxNdf+9q4cv0m
t+6HUJSTwd9+ukLf3DqHThvZoc/46+/3CfJ7zOPHkYT4+nD7lh9Pnz6npLKI2FB/Hj6LoiAnm1u/
/savl9WL9Uy7/oiUYg6ODkgJesj9u8+58evf+OP6HZ75hdLX0Ut6eCT+Pk/55ad/59ffLhEQm09h
WjiXrwdj2TmTPfkJDIC3ly0lb2SlflX55JHK+jvJRlTGQ8sKVE2KVLe0J725qdYBnqZ2nt67vNL2
c9p97YtpT29fKifJU/7pXfdtUuup61EJhxo17HuUygJX/fsrqemLy5XOJhrfo9S5v8oA9Pb2aln+
ExMTmlSOgBrcSAsf+w5mxkfo6+tjyWhlb8/BzuYWs5MTLBnMTI2Pojet4nLtYzXrmVmxaOX/qt+E
bZund8GLRuTw8ID5mVkcR7Cmn2egs5ma9m70umnKiiuZnZ6gur6e4dEB+gd1HLl36G7rYKivjrzy
elzuI/a3jeSmx9HWN8xwdxONPf3M6Y3MDw2Tk1VEZ+8AJbmF1Dd00dPZTE//uCcOPfa0orloANS0
d/nB/hYtjRV0jfQRG+JPYn4NFssKRdmJNLX10FFZTUl1HS2t7UyND1NWWY3VecTiYCP37z+jT6dn
drie4ppGxsfHGBmbpqepnOKyZgryE6no8hijs/HkWQPQq9+latqTgG6vGVk0bnLsUgNL9dHQUE33
qI4Z3TRLhjUM0wNUtHSin57x1PEZ0rGxuc5Adw+m9S2sFjOTwx3kl6gRb/XU5ObT0D1Eb2s5GXnF
2A6O2F41oDd6cuJ0/dUUVjUwMT7G8Og0vc0VFJY0UlKYTFm7p0hHxXG6NRf5I2IAPjvncgC0LIBD
+uuKyMrIJCQwgsjAQBJSM0hKSKR30siuaZHwWz48CIghMy6O5wGRZMXGcu/+Y2ITUsnNiOPGrTtU
to8zPdpD2DM/ohJTKC0rJSnqOdEZZeztrhL81I+knHzy89JITk0gPiGR8Ih40pOTKMrKJz05k5ig
YKKS0qivqefZzTs0aRXM3sUAeJ6nfrSdTDW8bkQcwc+DiImNJyMrndLqLnBvU5weT2F+JemxaUSF
x/H8eTQ19S30dveQHR1EfHomOSWtrOh1+D18QufYMnvrK0TffcK955Fkxifg5x9Odnw89+49IiY+
lbzMBG7duUth/RBzU4OEP/MjMi6R0vIyUmMDCE/MZf/YTX1aPI+f+BMdHEhidjHF+TnkZ+SQmpRD
V2cX8cHPySwqIDOrkJr8bO4/CMC0rcr4Po0BUBG1iqDVsu9BL3IrflydrSn/PUolMCqxU9fiNQAq
rKn5KuFXib5KuFV/By8S7jNx70n/Cqp8/mTG6Xy1H61ERk2fVBK8OBiRV973/0vjffdUUYfXACip
e6IlvmfW8bKx6a2M93ZsO9vsveXSVP0KbwsX77HUr6p0qSWgx27GjDYS+97chPbT8W5p6OL87GkL
I0XjnI3iMTEAnx2VNecNnC84ZGlxnk11Xw6dGCzKgTvY2bVrSzdXTaxt7mLb2tTKcO2bG2yppmIu
G+F+DwgobNQqjhypZjxH+xhMJi0YrBqXtCFz3fZ1KsoqWd1U+zvEaDJxqLLO9t0cHaiR35bZU6Hh
cB+D2awNVLO2uvbKttsXDYB68c522Wwx6DFYPS+Z2WzC4XKyczKkrhp+V2+w4D5wsLJkxOH0RB7q
XF32TUzWDdwnZsNp32F7x/NFs71mxrK+jX17i+1dB47tLTbVMreT+KDHPMmq0rKytOs/dmMwGbVi
ZKtpmY0dzz20ba6z49jnaN+GYU0F9COW9Hpt6GjF7uYq67t2rebx1voGG1vnIwplAFREc5b3MQBq
WzV9caxukehj5G0Dr37P9gR4kVd9uX8Kqf2q8K7qUqg6FV9DKofHa1jV+aj4VeXwXFxvZcWgDfBl
MFyc/2qZTCoHyfTS/FMZDJrZMBkN5+are6GejedZePr2KBzdIKrVQFKnkcSvLhOZgxukdBu180lq
NxDXaWHd7uLwQPoB+KyowKnc4dlBZ3bUGM1OJw67jV2bnT2HA5vNjt1m05Y79vbYc3jaoTrsdq0W
p8Nh1zpYUSM5qbGebSdd1qpIQB1DLXPsefapVTxU+3fYtRHC1HK1vlpXO542PvQuu9q2Dm0/3n14
IxklFShUmak3oVOo+eol0K5FO6bnXL37UMdQiZ/aj01rR6uuzcaeU7W/tXnOYXfHs8xhP70Oda3e
67ef7NOmtbNVv2pdx+n1n56/2tZ7/bve639xbO3eaffX7rnnqg3wyVjpqqxcW67a86qvK9We9+Ta
1fbqui9GrO9qALyR8vec3Sz69nS2COisAbiYSH9uaf0AqHf0K0mdw9nr9k5fXO9LSb3358/H0xOg
+nhTxSjqo+ybkc1zTkduT58F3vsnBuAzohJElaB4h539GK2ftFO/OP+i3mWdd5EKHBfxJpAX1/0S
etfr/1idzfXw8j4G4GKk6bVQb6qRf1GnteTVuPKvWP5WaZ3EHGo5PCqr8Ow8Na3VLXjFuZ7fx9n2
1W9Z94ze1gGRkqrf8Nbjv0LeWMPbk9n7St0Prc7FaUc4nnmqXoaaVvflTeev9dj4ivlfSl/bAIje
TSoMfbM6d55iAAThrXyoAVCV/sxz0zR3dLHtcJ1W+PPuSyXIKrFXlf7UulqnB8dHbFmWaWtrZeGk
XfDxsaeppNZkUuuz4HzlQE8rBk9lQLUL5fLX17dw2rZZXDJyoPXxrzpR2dDKe7c21rFrHa94alZ7
qqicnIPqGU59eTptDPW009LSxfqupwtirYOVU3NyrFVaVBGKZzsPB/surQmkWq4Seu92aitlJFRF
Upt967RIxvtl663QqK2vzlddh1ZZUp2c51jGhSna2tpZ3fZsqxJuTxNatb7n9+x9Ucu8FSvVng+c
Dja2drFtrrFkUq0CjrR56xuqGOiI9TUr+4dqm0Ocrn3PvVTHUBsfH7K+acV58HIHOV9KYgBEn1Ji
AAThHXgfA+CNmFXCvm2YJiE6iYL8Uq15p5qvimrW19Zoqy6nqXeKTasR0/ommxurLC4tsbFto62y
gPCoaJKSSzCvrrK2vottewOzZYPtDStGgwWbzXPsPbuTLauRRYMRm20Hk2WN6eEmErNrMc0O89Q/
HsfREXODDSRmVrK7YSA+Oo6MzBxyCsqZXzKxal7CtLHF9rqZmfllrSsA1Y48OCia/Iw0iit72Nm2
sus8YHdrg+HOJoqr21ldXaJncIKNjVXmZ8YozMuna3ga65qZxRUDe3u7zEzPalmiFoOBrZ09ONqj
obqK8dkF5hf02Oye7FT77g5rFjMVBQWMzpuwGBdZt9lYtRhZXDawY9+mKD2ZyIhIcguatVrSW7tO
NtYsWNe3WV81YzZZsdv2tP4BVPPLNbMew9o6W1sbrFrX6KorpLBukKnOKoKTSuHYRVtVHvnVPViN
40REJpCVnUNRRSMG0yqG5QU2bHZWDXqMlg0GOhsZmTee5h58SXnDlhgA0afSN2EANje3sKxaWbOu
i0RfRmsnujB/dU3Jeq6y48Uw+yYDoL46VQStWkw49hyMtNdQ1T6lrdtSV8/olI68pAQe3b3L7/+4
QXRKJkXZsUQnx/D8eQAPnzwjIrmQgsw0HvsFUdvRT2lyKL9e9yUqyI9nfvFEPn/M40cR5KUlEhwY
SnJKLqlJ0SSkx+H3PBj/5wHExvgTnVNNS00e9+/7kJqVQUZSGA/9ginIjeexfyC/X7rM/WehZKWn
k54WTXRyNM+fBxPoH8nw3AaOtSmePnxCWEQUqQlJXP39bzwJiSNQtc/+5SZPA8MIe+6Lb2A4GWlp
FKSmcP36PVKz8klJ9JzPs+dBWouX1PgUbl++THnLHMcuM8kp8WSmpFGQkUNSRgXzCzriQ4O5f/MW
f1y6R3peHpmpkYTHRuL79BmPnviSXlBJenw0foExdA0OE//8Hrd8Igh68pDw8Az8Ht0l0D+RzMQo
goMiSE/LJi01itjUWPyeBRMaGkxomD9ZlS2UZUXz8GkQ2fmZREcF4xMQSn52DPef+XPp1z94Hp5E
RkoSaWlRhMWEE/Q8iMiYXHramyhrbMe1v68944sDw3xOeVvhqPAnBkD0KfTVDYCKaKd0s5jNq5jM
FpHo88tkxmJZxbK6pk2fXabm66Zn2dw86ZLzFWH2bQZARdbqi1a11lA9jMXHpdNc305MYAxJSVlE
h0YT/syHKzcfkpaeQX5+GjFRIUTEZ1JRVk5OXhFxcal0jRu0NtNRtx/x200fokJCefDgGTFBAfgF
RhEXE8C9G095Hh9DQX4WWVkJ+PjHUVleQkZKHDExMaRkZNHaWMmv//gHmbnZPHl4n4zsTCJD/bh8
/REJCakEPX9ORk460RGBRGfUMtDZREPvPLumSbIKG1iZHeHx1RvcvfeI5Iwc4gOf88eVW0TGJFJY
VEpidDhRsWn0NDcTGxlDTFQ0wWER5OelcPNhBNMzU1qXxb63b5BQ1M7R/haxUUHExWfQ29pBmH8s
ySmZRIdEEfDgDrcfBZKRkU5+fgbP/fxITsvXxkgoKCgkPiGTeauL1ekhnv1+i8t3fYkO8ufR4yDC
nj0hPDaRyDA/7t59TnByAsV5GSTEhxMSm0tFSQFJifFaDkJWfhH1ZZn849JV8vMzuXP7HoWF2fg9
ecjte34kp6Tj+/QpBUXZ+D59TFljP+3NTdp5VLV4etpTRSdfSiqyVgZA/YoBEH0qfXUDoMoI9Usr
npreJ7XCRaLPKfWF7m1bvbOzfdpmXy1Tv0aTma2tDzcA3hdKvWCqDHtBDfJT2cTi3Cz1NQ3MTC8y
2NXN2MQoszMzjAy00jeqY9Vi9jRpMhjR61WzRodWcXCsq0PrOXJ6ZJT+oTFmhoYYHJ9h1aSaJBkw
b25jWRikubMPo2Wdnc01muvK6RsawWz1XMfS7AS11eXagDtjfS00tXWysDDHYG8vS0YzI33N9I1N
azkga6sW1jZ2cdq2WDFZOXDtYV7WM9DXgW7ZwlRfH8Pjowz39zO/ZGB11YpuqIuG5k6mxoYY0+lZ
mRuiuaMHg3lNS7gMi3p6W9uYN1q1+gxdLfU0tzRp/dPP6yaorW1jcWaB3q5uJibGWJifobujkbFZ
NZiKpzMfg9HI0pJBGzRm37ZDT1MTPSM6Jvr7GZ2cYay7m6mFJVaNyywbTKzv7DAz3ErX0DgW6yab
q0vUVFcwMj7Jlk3VIThEN9pPdXUV+pVlultq6OwfZmF2iv6+AcyrJrra6xmf1WNVzUXX12iurWRa
b9HqFVyMTD+nVEStjKWaVuFPDIDoU+ibMACL+mUtQF9s9yoSfQ6pAH+2yaL6X/Ui541YVQL8qQyA
0rui9qmO4TnO8WnN+9ehKr2p9VTlPW8VPK1yoKrh7l3npNb/+6O6r/Zc7/uO7fA2tJr2btcr+554
F1QFPe+5vQ9nL0NVxlStIt7E8ZkNPJURD7E7bOy/YpS8zy0xAKLPITEAoj+dzhoA9asGT0lLS9M6
9VC5Ap/aAHzrWl4xsrC4pOU6fCktLRtYWlJjCby87FNLxS8LC3rteasITz2ji7xITFWf+qqDqkOt
ydTFe6W1WHjFPXxfqeN59v+i0ujLy87PEwMg+tQSAyD608lrAFSgV715ZWRkEB8fr42lrgyAwWD6
dAbgpC29SjS8H5TeBMTb5//FyP6sTlvcnZzHuSmVY/ARWdHquOr8p2fmcKjOkX5gqThG1flQz01d
s+o6Vw0QpDQ5OXlyPw60IpeNVRMGo4V91UTwTCLr7ZtByz1Q6580cfQ8wxcJ+dlttPmnifrZ5apc
3/O/KuP3ruedd1FiAESfQ2IARH86eQ2ASghUx0LegXBUN6OfsghAtXc/cGwxNDSBY3+fLYuRhvpm
7CcNDBw2G1tq1L8zx/Em76qnLmUQVhbHaOsdYWl6krSUFMZnV+hrqCA+s5hFo5H5lRVt/TeZiNfJ
awBUHZwfHdWyQ0mhBs9Rg+jodDqmp6dpbW1lbGxMW7ZlnCIiJJyUuHjqO2fO7WPDvET/wAim1U2t
T337jpWhgSGty+t9t+p0yTPeuuo/QOswyO3pt0E90+MjNy6Vu+BWI9fBWG87PRMGHNZ5qhv7zh2n
rbaakVmLVlfibEQtBkD0qSUGQPSn09kiAPW/mlbyRqyfzAC4jzjYXiElpRCH207Cs7vc9olnbmaI
htY6/J76kl/RSGNjI+U11TR3j2ExTFNeXY1ha58jxxpF2Smk5pSSkxRHSkYpbVXlZObWMTHQQVpG
ITX1FYzrlrA5nO/ds57XAKj370dHff17DYC63+q5q8hPM1krK5opUFgXh3juG0JKagp52fkEP79H
fE4ZyVGRPLh+h1sP/ampqaMgM4XoAH8uXb5NcWU9JblxxOVkkpmexnPfUPp1a+xtGwn1u4t/TBIJ
0dFExOQyMz5E4JMn+AeE88A3iNT8DLLScwgPekBERjEt1en8fuM+3TNrWsdEZyNqMQCiTy0xAKI/
nc4aADV9dtmnNwAGsvPqOD528PDKZaJiU3nwx9+49Pvv3HwUQnpyPLdu+RAYHEZoRBxX/voTf//1
NwqbJ3BZZ8gpzae4qIZFwzKVxbncvvGQmp4FcJpITyqksjaPPp1ZyzF437LpP6sBaG5u1nJ+1PNX
RT56vZ7u7m7PenMDRMVk0FRbzv0r1/n9j+uEhEUT6vuE3367RVJGLk/u3Sa3uIHxlnqiopII9fcl
OimNvMwYLt+PorOlnrKGYVaGavnbv/+Kz8P7RKZV0NFUSeCjEB7euMl/+udLVNY0Exrsx81LV7j0
2zX8fJ8Sm5xGekYaHeMGMQCizy4xAKI/nb6kATh0bhAbFERycjxPngbT2tlHYWIYSXkFZKWnEhsT
S0pmMS0tbVRW1hAfEvL/b+88uNpIE3T9P/fce3bvnd2503dnZ6eTu8eh2+3Y2G0DxgYDJpgMJpqc
M8Y22GSMyCaJaAQCCQS8e74SwiDHmQHaUM9zzoOKUqlKJam+elX6gu5ExaprbFG+1WllpaeqqLRW
5TVlioqPU87jCuUmJys0Il5PexyqLspSe/eo3GtergB8hOArAOYnn0AA6O/v37sC8Gb2tbpfvdb2
xoqe1depsCBbrT2Dqs/LU3Z+roryH+vZi06VZqfoUU6RygvzVdfSroaKTGUUFOtF94DGRofUMzAh
75pL5fmZKm1sUe/AqMbHh1SdX67UxFRlZhUoNiZelU1P1N3RoYqiR2rpGdTT6lzdi43XxIJ7r65B
oKAmAOBhSwBA23lcAWDvAJt3amRkVG9cq1YTvXX3smYWFrXudmnpjWvv8R7PhnybHk3NzGh9w6ed
7U31dD7T64UVbbhd1lDO5lfmddeCNcyxx+XUi85OuVfXtO7x/sNXAOxQB8Dfy6Ppg2DHau1RUVGh
2tpaKwwYzSBQ/t/tzStsKv+921Lgc/E35zQVA/fV7tgxLQveVuD8FIHR2vYX1AQAPGwJAGg7jzMA
GN8O1GMGvfGPhGdqjptlzUnHZw2Qs6s1gI1/gB3zWNPe3brfDKazOz/weFNjfNsaFOgfOxGY52K+
Aff1O7SwYLqafXNKXZJjcHivi2fr9d3c3OtlL/A+BL8+X5IEADwKCQBoO487AHzJmgJgbm5ek1PT
Vg+Ip9Ip/+36+sGx20+SBAA8CgkAaDsJAAe1C//olZIvQQIAHoUEALSdBIC3mudrasGbjnF6e3tP
pKYSn99X1m3w/aaNv2nzb37uOKknTQIAHoUEALSdBAC/5uA3r0F7e7vV653VWY3Xa+2b1+ux7vuQ
a+vr8njWg+avWY9be8/ye49bW7cqw/nrQPjb4ZvnYXrLMa+dVedhc+Odx31I8/rPOp3WgEHGxYUF
67kFL2eCgenwyexb8OtwEiQA4FFIAEDbebwBYP/nP/jk4++X3kyb20DFP6tSmvn/AwX8fgLzrMf/
nb0BmvWb/R1wOPS6+5metPZpfmpMCeFJmllwH9hOMFubG9pfyT2AGdXzY3Xdd3xeFRdkqLz5uV61
v1RGXL7Ghh16mJKsvqFBlWc/Uu0Tf698n4NzelpVpSWqraxQVXmFKktL5dswI/0dZHx83OrwhwCA
+FYCANrOYwsAmz75NtfVWF6orMwMtfWZzl0O4vX6j48Nz/reCdV8M3avrmrduztjd7vma7JZ/1Bn
q1KTk9TWO7x3svVZB3Ng+W2rq9pPBYJAAHAMDsnRUqaEqGxVNNeq6PHbMe8/hGtuXGUVjVpyrWh0
oFeVxUUqr6xX89MueT8yzN/WxromneNKi76qkPhc1ZQWqLi5XUP9LboTel0XfrikspaXHw0R+xlx
DKir46WGR8fVNziumup6DQ2NKL/8qTILmzQxvWAtZ37mIAAgHpQAgLbzuALApm9HvtUZRdyKUHFJ
nuLj8zQ80q2uodcaG3KoobRQYXceqLOnU7mFVRoe6lddTbWiwsOVXlivseF+NbY0aHxmQg2Vleoa
mLKuIhRmJKusuk5ZSSnq6u5Xe9sLxdy9p8YOhxy9z+SYntfclFMrblPr/d2Dfv/Bb/a3t8+h7RWn
KjPLVNRYpZedz1RU23hg/4N587pH3397Ud2D44q9eUlh0el6FB+pX24my1+UfJjB9hbVVpYrr7pW
HR0tqmp+pieV5ersG1DXyw7FJ8RqcvUjKWIfY8NDamlqVmtbp+qfdKm4pEaL87P6Leax/noxTm9c
/isZBADEdyUAoO08vgCwra21OYX/GqLIsFBF3b2vH//87zpzMUS3Qq7pmz+f0Y3QKMXcjdDV6zcV
Gh6t1uo63bgcovjkdN26eVs5+an629kLiomK1YP4HJnuacofF2rOK7WVPFZqbKz++tWf9Kdvryoz
KU5/+uMfdOVuqhaWzWiHH+8cKBAA+voHtPFmSk2Vz9XZ8Uy3L4Xp6bMOzTqXDrwG+5keeqk7tyIV
Exmv8Ft39aR7RN1PKhUZX6CPtSvYXBrT3/7yrbIrGlVZVKrYO4nKjrurC1dC1db5Qo+y0pWRWim3
7/OuAZgrADU1jWp+3qfcojrdC4+Qe8UVvBgBAPE9EgDQdh5nANh0TSm3oEYbG6tKvXtHIVevKDm3
WAUPE3Th/AXdvRul7MdlKirI1/17UXqcXajk2FjFxiUrNiZSSckPdDMsRr2vHCopLLMCQMWjJEVF
RSs/P0dpd+J0/twl/fRruHLTUvTbr9eUW/NUzuk5a4CgT10BMPtiasrvZ3Vpzbrd++XhPfQ8r1fb
wJTW19x7QxZ/Lt51t5ZX16wNrLn8v9evrrjk3dzSpmf9sy//G8zJvrqiQiVFpcpITVdzfW3wIhbm
5G96ACQAIL6VAIC287gCgHWQeT1yuVa0sbkpz/qaZqfHNe5c0JJzRlPOWS04pzS78EbuNY9WlmbV
2+/Q4sKspqbn5Fl7o8GhIa2YMe3dbmu75oB1LTrV1dmpJfeGPMvzGnAMa27OqaU3y5p8PayZNy4t
Ly7Jvf7pKwCmaZxpBWBOkKZ/fKNz1rk3bWrOv8/pGafmZp2amZnRzMz03vLT0x9+jKWpre90yjkz
Yw2/POP03zqdTut22pr/iXUceB4zev16XAOvXmloaPC9z9ns28uXL61tEAAQ30oAQNt5rAHAjAG/
O6iLuc+swowRv2X1F7+zr0mc6Y7Wv05/18Gmi19/pb5Ai4C9FgOB5Xybe9Pm+ZgmdeYZbvt8n90q
wCy3uLiokZERjY6OnkjHxsetb/dGc6k/+H6zbyYYBO/7SZIAgEchAQBt53EEANOe3hxcJ8HAvpxm
zHsXvN8nSfO5IgDgYWs+QwQAtJXHEQDMt2pzi3hYmhELTYFNAMDDkgCAttN84I8qAAQK5cA8xMPQ
1NUIXFVyuVwEADwUCQBoO48jALzPD/4mv3uZ9535f4fB6357+fjdZb9UP/UanLT9OQoJAHiYEgDQ
dh5vANi0KvQZTKW94APQ9BZo9fC35dP29rtj0pu+8YMf568c6K88GFiH2UbwNs30jnaCWgKY43HH
mjYVEQMj5JlpU0PRVDgMfg4Htr21re3dSo1/r+Z5B56Xef0Cz8uq9GheoB3/89qvqSRp9j9QQXL/
Y8x+BCpYBmut/xSGBQIAHqYEALSdRx0A9tza1sbqvNra+9TRXq+G9v4D6zRseVZUlftIoXfuq//1
YvDd6m1/prFZf7v8AD7vqiYnpjS/8MY/Y2NJDY1te/dvb3lVlpOmhIeJysxvUHAVv6nJGevWvbwk
9253wytvFjQ5Oa3l1Xf70Q9gTrqL08PqGBgOvuujfQYEMPs6tdu50ML84l57/6G+LvW/GlBJ2WO5
TB7aR++LZ3KMz2lleUHlOfnqGJ615q+5ljQxMaXl1ff0O7jlVnvnS7k3t+V7T4W6ky4BAA9L8xki
AKCtPOoAYH6vNcuYjni21+d082/f6YcbsZqYGlRy0gOlF5Srt69fAwMOjQ+8VOqjCq2uuPW0tlIZ
GTlKTY1VSfMLdTTn6YcL11RcUaak9FRV1tYpLSlV0WGhOvfLTT3v6FNTab4SH2boYWKGUh8mqen5
qLTjUcLdu8orLFBCTJrqqvL0MLdUzXXVSomN0fmzvyi/uFhhkQlqaqpXZnKKLp89p5tR6Wp/3qSs
rETVtLYoKzFBhWVNqnyco5zHLdrakRoqilRTW6+UxGQ1tzxXRmKyCoobNDbqUH5GsuJSUpWRV6Kq
qkolJj1UUmahenq7lJ+brLt3Q3XpeoTyczL0IDVfzdWPlZ5VqrrSXP3ff/1K5S961V6Xo9jUDNW2
dur1UJ8S4xLUMzKvruZc/a9/+W81P29Velaybvx6TSHhD1RSVKSk1GQlpueps6dHBVmxKnnSrfry
AnWOOrXp3X0vVldPtGYfzOeVAICHKQEAbedRBoBAcy0zvbK6rm33jG79dE637ico/PLP+ss3Z3Tz
VriuhlxWcUufnMMvlZ5XaxryKz85SbcuXdH//+ovunDhJ8WnZSg/P13//r//j85f/Fl/+e/zKqmo
0fVz5xUZn6rkxCTF3bqlf/vDfyrk9n1dOfu97iZWmK/ASrx3V+kpybobGqZv//Qnnbv0q0Jv3dSP
f/1WN0JjlBSfoPDQcJ09f12Onn4lRtxXYnKaLpy7qPLqYp09851SHxUrJ+Whrl08rwuXo7Wyua3K
ikfKzsjRD3/5WucvhejKhZ8VGnpPtyJu6MrV33QnIkbR96N19seLuhsZo+iYBP3017/ov77+XmfO
nFPUg2QlRMfo5vWrunM/VYNdDj1Oidf3319QWnKCfvjqjzr303WFhd9SWEyCMjNy5JhcVH3uA52/
dl/RIZf0zZm/6bszvygt65F++tvPCo+ItrZz5Yfv9NVX/6nf7meprvax6l4OanPDdMTkst6zk65p
BWAKbTNNAMDDkACAtvOoA4C5NTW2ze/lGyuz1gh5E0Ndioq4o7i4BL0c6Nft8Ct6NbsueVdUkpmm
yLAYpaQXqa+nW6kPIlXZ2qaSR3EKvRelopxHSkpPV35prYbHXqssP0OJCQ+Vl1ukpNAohYRHWYMJ
pd2LUGphg7Z2fGqoa7H65H9WWarU+BhllFSrtaJCd0JDlZQYr9yiKjU1P1FRTqbio+OVk5Gu5OQs
lZcXKD7+nlKyH6vPMaKXz1uVExeviJg0eXzbetlcprBr9xR2M0IZOSWKC7urwrJ8hcXc0ZO2TtXW
NaupoU7p6blqbHmqhvomVRY+VsrDeJXUVCktIUEV9S1qrK9XTmq8EhNy1NjYqvGJaVXkpyk66p5y
KltUXZ6quIIyDbTV6/adSN2LilROcZN6n9XrQfxDlVWWKT0pSSkZ+WpobFVjY5OqS4uVmnBflc+7
VVOUq/6JBWtkxOBL6CdR08mT+VyZQpsAgIel+QwRANBWHkcAMP/7DzJ/4W0qsxnMPOdYr6pb2uWz
Kqr5TNd9WnW7rQp7ZhsbGx5tmIGEfJvyWpX2pLX1datCoL83QX/FPrNG8w03UJHQrNv8Tm/dmuGA
TWVAq06AT+ser3W7aSriWUMFm0qH/op0bmvd/kp5Bq/Haz3OVAgMVBT0bW1py7ellaUZDb5+bbVc
MBX6zL4NdLXqaY+/XoCpmGj1SLh7n9Fap9ejTdPjodWpjbnf1CnY1JrHs7eswV+pz63G+mqNzq1I
O1tyr65o3bthLWf2fd2zbj0v6zUwvSnu287G5oY8a8vqH+iXx2deg3cLvZOoKajpCAgPWwIA2s7j
DQD73P02F+i+N3h+4GS1N707PzDv7boOzj8wHbzN9y2z73+zjUA3wkZ/l8TmZO/vTnjv/y0zbZb1
vwbm/4ABAsv7H/N2ev869697/zYPLuc/mZtv7/uXO/C4A88r+Lm+7UJ5//yTfMI0z50AgIet+QwR
ANBW/m4B4Asz0ExuZGRcQ8OjGhkdP52OjFkDJq2s+E+a5j0K5u3J9G155TvCZoSbJpiYbe4b4yGg
+T/45E4AwKOQAIC281gDwKa/3X3gcnzgUr050ZhL+jvmEvtHCnL/F27z44D/r38dZtp/sJrnEfyY
z9UEAPP8B4dGrJ8EzEnptGreU+fsnPV6mff56dOnamlpsWxra7NabvivoHg06uhTd8+A1UQycOXA
rMO8X9Z7uXvSDvRNYDU13BuAyf+TT+BKjCnf/D97+PYGdTL3m9Edzc8am16PVlbd/ishu+sxQyyv
rR8cypkAgEchAQBt53EFgE0zvr17QU3NbXJveDUzMqiC/FKt7TbMX5ibk3N2Qb7AWX0fO6ZjoK0t
DfW1qrS2VX0vnis25oFedA+qtiBLEXHp6h0aVt/QkLX8+y79f8pAADDH32lndm5Os3Pz1nRDQ4O6
u7ut0QPNUMEmDLx48cK6b3G8W3fCIpWemKCSmm5tbW1Y749v06vxgW5VVTdqYnpBa+4VOSeHVVNd
K8folFbdq1pedWvb59X8wpI2Nresn3q8Hre85nbNpcU3q1azxLU1j9obq1XZ+kpL0/0qLH+i7a0N
bZrPwbZXRdlZah8wfTW8DXcEADwKCQBoO48tAPi2tbk8qaSkPK1vriri5+914Wq8OtuqlZGboZ/O
X1RaXqny8/KUkpmpx5WtGup7poSUZDmcbm2vzig7PUlp2aY5XoLVSqC2MF+PHjdrZrhDDx9mq6zi
sdo7h7Xq9nz0SsL7tFMAMN/+AwGgtrb2wFUaEwTMlQDDwliHQq79ppgHD5SRkq5fLnyr8Adpunf7
N5395qx+vhaqgvx8ZSQ/VFzYbX33w8/Kzi9SVup9Racm6H5UtEKuhaqla1qr88O6fP5rXbwZroiw
CN2JTFVXW6uunDunS9dCdf12hGJTE5QU/1BXL36nX6OSVFqQoB9/vqZWxxwBAI9cAgDazuMOAGkZ
pfJ63+iXMz8oLiFFP/31K/34w4/6+XqkUuKjde78NUVGxSgyKlb/9W9/0NffnVFeXa888w5lFmYr
N7tUw1OTKi/M0pnvLqi48ZU2FoaVmvRYpRWP9GJwzrpiEHxwf0o7BwAzWmPgvRsfH9eTJ0+s+2YG
2xWfXKCOp/W6+N0Z/fDjBd2PSVDkzV/19TfnFJecruu/XFRGTrk6aip1PypOd27dVHTCQ2Wk3NfZ
6/F68bRRhTUdmuys1l///K1uhFxXfFaV2loqFHL+N10+e17/8q9fK7+oUhF3ftOF737UD9+fU3h4
qGITHyoxMV4tvVMEADxyCQBoO48zAGx53yjxbrhiY+7rdli0nrZ3qyIrQakFxcp/lK6EhId6lF+m
lpZWVVfXKTspUffjEtU/5dLW+qwepaeqrKpZVTXFioiJVVXjMxWlp+i3OwnqGhxVVeEjvege1gpX
AD5KcAAYHh7eG7K5s7NTra2t1n2uhRk5Rqbl87r1qvOlaqtL9dIxrmeVlaqur1VdVbX6HMNqKM1T
UWmNWuqq1db1Su3NxSqqrpdj+LWmJic0NObU5sa6mmtKVPf8pUbGpjQ9PaG2hicqyC1QZWWd0lMz
9aSjW2PDw2quK1X74Gt1t1YqOTNbs8vrB8Y5IADgUUgAQNt5XAHAOsg2N+Vdd1snG9Ne3zSjM78n
r6ytacu3IY93w/qt399cbctq+mbWv2EqnW37NDTYI+fyuuTb2HtOvo11rax75V2ZVe+AQxte/3qC
D+5PGQgAY+MTB/b1NDK/sGgFAPMezs7OqqamRnV1dVYYaGpqst57qxLf7ntg9c/wD+GvmLmzs7Vb
ATQwe3vvM/M5BA8ARQDAo5AAgLbzWAOAdZC9rSEeOOjer/++/c3CzCb9J4O3861lrOXfdgoUfGB/
jmZ75nn29Q9oZmZWTufcqbV/YFDz8wsH+gkw72Hgfdz/mn+JEgDwKCQAoO087gDwJesvAJY1u3uJ
/LRqTv6me+bg/T8pEgDwKCQAoO0kABzUYPbtNGv40r/lf0wCAB6FBAC0nQSAt5oCYHBwUB0dHVbb
eMue3dvj8BC21d/fr/5Xryz7+vvfud9U8jO35v0+qSGAAIBHIQEAbScBwK85+M3+vnjxcm8/Tc+E
2z7/oDv+ionv1wzGE+irf7+G4HkHNL3n7Y4nYCrM+Tb9r+NOYN7u6H3vPO4Dmv2YnpzUxPiYXo+N
amFu9p3xBcz6HA6H1d7/n+k58feUAIBHIQEAbefxBoD9n/9AN8C7WgPxbFnT/i5n/fPNtJn/oWZ9
+wlUADTd0n5o+Q8ZCACOwUENtFSqrPyZXo+80t1rkRqZXDywnWA2PGta87xbU961vKytwPn9PWxv
uJWd9VB55dV6Wtek+IgU9XZ3KDouRk9ftCk7PkGVTR3BD/sgk+PjqiotUX11lWoqq1RaWCTPmjt4
Mautv+n1jwCA+FYCANrO4woAVu3/DbdKc9KVlJSoumeDB9ZpAsGya9WaWl9d0e6XYasv+KXFJa15
d0fF24dpG979pErRUZGqe9qpwBJr1pC5gf92/MMBf2Iwm0AAGHAMaryjUamxeSprNs3jKlVc27Rv
q+/ico4qO6dUzoUldbc9UVZqmrJzilRV3y7vR1q7bfs2tLK6qIzoK7qRVKDWxnKVPeuRc7RdEWE3
dPnCrypuevbe7pHfx8igQ10dHRoaGVPvwJhqqhs0ODis2PRKhcUVanRi1lpubGyMAIAYJAEAbeex
BQDfjnyrM4r4LULFxXlKjM/Ri/Y61bZ1q7PtmQrSknX1ergam+r1MKNA3R3P9Tg3V79euqyER5V6
1fNcRWWP1e3oU0FWlprbTb//OyrMTNOTF53KT03Ts2dtqiir1I2rIap80qnWhmI9GxjTzPiUlq3O
gd496Pcf/GZ/+/od2lqeUnl6qYoaq9TypF7FtY0H9j+YNxM9+v7rn9XW7dC9qz8pKqlQhSnROns1
Tv6i5ANs+/SkvEj19Q0qqKpWa2u9SiqrVZpXoFcjY+rv61N8XIwmVj6SIvYxNjyk5qYWtT7vVN2T
LhUWVWp5aV4JWbW6fCdLa+te/3IEAMR3JACg7Ty+ALCtrbVZhd/4TQ8i7yridri+/X9/0NlfQnQr
5Jq+/vMZ3b4bq7ioKIWE3NCvv0Wpp/W5wkNClZicqstXQlRcmq1vvvlBycnpio/LkjmayvLzNbmy
odbCHCVGRuvrr77SV2dClJkYrT/+x3/oakSK3rg92vhEs7e9ANA3oE2XU8+bujTQ16HwKxHqeNkn
5/SHfwYY63uqyIg4PYiKV+z9RL14Na7+9kalZFVaz/FDbC6N6+KZc3pU1qD68irF301RUVqcLt+I
sH4CyExLVm5O80evIuxnxDGgivIa1T/pUkZOmSJuh8q9+m4BRgBAfFcCANrO4wsAW9p0zaikvNkM
Iqv8xHjdC7utzJJqlaen6uqVK4q+H628kipVllcoOe6B0pIylZYQr/jEDGWmJ+hB/H3dj8/QK8eg
Kstr5NvZUW1+msJCw1RUWqK8mBRd+iVE10MjVZiTrajw2ypu6dD062m5PuMKgNmXnp6eA/u6N+bw
RxjoeqpXk2+CZ382e5v4jG19DK9nXc0NDdbr9zg3T10d/lH9gjEnf1MPgACA+FYCANrO4woAgYPM
6/FaFf5M5b4V16IWlle1vuKSy4wJv+rSituMRe/ThmdVUzOz8njcWl5etYaWnZubt4KE6cTGaCr9
edwu64S2vrkjn2fV6ud+bW3VGkN+aWley+51uV0rWjfbfc9Bv//gN8/TDIVrmgKOjIxoeGREo6Oj
1vTIyLDVZ/77fD05pcmJ17vLjWhkeHhvOnjZYPceY23r7fR+gx/zIUfHxqxv9w7HgIaGhqzp4GXM
/Pb2ds3NzVnvQfDrcBIkAOBRSABA23kcAcA6WZvuek2TuUCzNKt2/7bV97+ptW+mTXO6wP1m3s6O
/3+rFcDWltUsz1T8899vKvaZIOFvpre1u04zba3LetyOf/nddVrP4SOax5h9np6e1szMzInU6XRa
/fsbzXTw/UYzFkPgdQ5+DU6C5rkTAPCwNZ8hAgDayqMOAKagNgZv90vUPGeXy2Xt92nWvGeB/Q1+
DU6K8/PzVoFNAMDDkgCAtvOoAoB5vAkA5sBaX19HPFTNVSXz+SIA4GFJAEDbeVQBYGFhwVon4lFq
PmcEADwMCQBoO48iAJiDycw3l9MRj9qTPLIhfjkSANB2HlUAMAfTSa1khifHwM9MiP+s5vNEAEBb
edgBYK/GPyLiCXJ/s2UDAQBPvYcZAMw6zOPMPETEk6Qp70ydEgIA2sbDDAAmQZurAME1thERT4Lm
5G/6mTAQAPDUexgBAADgNPK+8o0AgKfGfzYAmOXMY4OTNCLiSdZczTTlWzAEADw1/rMBwFz2NwdL
oP0/IuJp0JRrpnwLhgCAp8Z/NgAAANgJAgCeGgkAAACfDwEAT42HGQB2Ntc0MjrxyWHtN33+VgMA
ACcNAgCeGg8jAJhmM2YoX59rQqlphTKn95mRDj3tdcjnnVdNfb2mFhbV/bJRjc/a1d7eqdamRg1O
LGphskfVLW1a82l3uF8zPDAi4u/v+77oEADw1PjPBgAzbS3rdmvzzWvlFTWbPgGVnx6n5KxkhUdG
qaAwW9euhqi4LFcRYXd07uxlPYhPUWzEXaVkJishKVWdo2/k9Xqs9ZntIiL+ngbGmgiGAICnxsMI
AIHp7fU53bsVptzHBUpOjFJy1iOlpacrMS5aIbfuKD8nRVeuXtOla3f1amxKVQWZSk55qNu3I/Ry
7M2BbQAA/N6Y8i0YAgCeGg8jAAR6AjTMjA+p59WQ5ucmNTn7Rs5Xz/XVdz+qttOhsGvndCu/Xu5V
tzY3ffJtbakkNUZ/uhKuhTV/71sAAF8CpowjAOCp9rADQDDbPp982/5lvRvvfv59GxvBswAAfncI
AHjqPcwAYOZ5vUHDbO4N2bqpTTM88MZm0BCc/iGDg4fmREQ8Kt8pp/bN394t2wgAeOo9zAAw/npS
jsER6zOMiPilOjY+8c484+CQv/wyEADw1HvYAWB52WU9DhHxS9V82w9Mm7LP7fZPm/LMhAMDAQBP
vYcZAF5PTGlxcemdbSAifkmafv7NrWnmFzjxm/9NGWi+yBgIAHjqJQAgot00AcCc/E2ZV1VVpYGB
gb0ykACAtpEAgIh20wQAU+Y1Nzfrzp07Sk1NldPplMu1QgBA+0gAQES7GbgC0NXVpadPn1pOTU1Z
8wgAaBsJAIhoNwN1ANbW1uTxeKz/TVnGTwBoKwkAiGg3AwEgWAIA2koCACLaTQIAIgEAEW0oAQCR
AICINpQAgEgAQEQbSgBAJAAgog0lACASABDRhhIAEAkAiGhDCQCIBABEtKEEAEQCACLaUAIAIgEA
EW0oAQCRAICINpQAgEgAQEQbSgBAJAAgog0lACASABDRhhIAEAkAiGhDCQCIBABEtKEEAEQCACLa
UAIAIgEAEW0oAQCRAICINpQAgEgAQEQbSgBAJAAgog0lACASABDRhhIAEAkAiGhDCQCIBABEtKEE
AEQCACLaUAIAIgEAEW0oAQCRAICINpQAgEgAQEQbSgBAJAAgog0lACASABDRhhIAEAkAiGhDCQCI
BABEtKEEAEQCACLaUAIAIgEAEW0oAQCRAICINpQAgEgAQEQbSgBAJAAgog0lACASABDRhhIAEAkA
iGhDCQCIBABEtKEEAEQCACLaUAIAIgEAEW0oAQCRAICINpQAgEgAQEQbSgBAJAAgog0lACASABDR
hhIAEAkAiGhDCQCIBABEtKEEAEQCACLaUAIAIgEAEW0oAQCRAICINpQAgEgAQEQbSgBAJAAgog0l
ACASABDRhhIAEAkAiGhDCQCIBABEtKEEAEQCACLaUAIAIgEAEW0oAQCRAICINpQAgEgAQEQbSgBA
JAAgog0lACASABDRhhIAEAkAiGhDCQCIBABEtKEEAEQCACLaUAIAIgEAEW0oAQCRAICINpQAgEgA
QEQbSgBAJAAgog0lACASABDRhhIAEAkAiGhDCQCIBABEtKEEAEQCACLaUAIAIgEAEW0oAQAxKACY
/82BYVxbWyMAIOKpNBAATLkXKPNcLhcBAO1lIACYA2BmZkYdHR2WfX191sFBAEDE02bghN/f32+V
dy9fvrTKPzOPAIC2MRAAPB6PdQCkpKQoIiJCtbW11ryJyWkCACKeKk0AMF9wGhoarPIuOTlZ09PT
VnlGAEDbuP8nAKP55l9SUqKFhQXrZwCuACDiadMEAFN2LS4uWuVdb2+vVd7xEwDayuBKgObzaDSX
wqgDgIinUX8dgDdWORco88z83z0ADA6N7FVGQDxql5aW5HL5DwAzbU72gQPBzDeBdGnpzQc/s/sD
gFl2fn7hnW0gIn5JBr7wGP3lnb/MM1cEhkfHrfLs2AOAuR0bn7AK0vHxScRjcmLXg/PNZ3FoaNSq
C/Chz+z+ADA7O6+h4bF31oOI+CVpyrbgecbhkTHNOGf3zsfHEgAAThLBASAwDQBwmnjf+flQA4C5
7GB+j/B6vYhfvOZqgPnMBk765vKZqTwTvBwi4knWnJdNWRfMoQaAjY0NqwBFPCmag4PPLyKedk35
FsyhBgAAAAA4GRAAAAAAbAgBAAAAwIb8wwHAtU4AAAAAOKn8QwGgb2JFw0639WBEREQ8eTqmV+WY
9X5eAIiMislb3JQGZ71yOL1WckBERMSTpzmXjy7tqG909tMB4Pr1GxXjzmUrLSAiIuLJtm9kVs87
Xn06AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAACcQv4HmFJ4x86rWXgAAAAASUVORK5CYII=</Preview>
  <Form>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
AA==</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $global:ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formEntraIDApplicationMa.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Retrieve the application ID from the textbox
		$appId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($appId))
		{
			Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned secrets" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Application"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-CustomAppManagementPolicyToApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Set-DefaultPolicyInputsFromConfig
{
	param (
		$policy # The policy object returned from the tenant
	)
	
	# Helper to extract a restriction by type
	function Get-Restriction ($restrictions, $type)
	{
		if ($restrictions)
		{
			return $restrictions | Where-Object { $_.restrictionType -eq $type }
		}
		return $null
	}
	
	$appRestrictions = $policy.applicationRestrictions
	$pwdCreds = $appRestrictions.passwordCredentials
	$keyCreds = $appRestrictions.keyCredentials
	
	<# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$txtPwdLifetime.Text = ($pwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpPwdDate.Value = [datetime]::Parse($pwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	#>
	
	# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$maxLifetime = $pwdLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtPwdLifetime.Text = $matches[1] # just the number of days
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtPwdLifetime.Text = $maxLifetime # keep as ISO 8601 if not just days
			}
			else
			{
				$txtPwdLifetime.Text = "" # fallback for invalid/unsupported formats
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtPwdLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtPwdLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $pwdLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpPwdDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpPwdDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					# fallback to today if parsing fails
					$dtpPwdDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpPwdDate.Value = [datetime]::Now
		}
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	
	<# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$txtSymmetricKeyLifetime.Text = ($symKeyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpSymmetricKeyDate.Value = [datetime]::Parse($symKeyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$maxLifetime = $symKeyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtSymmetricKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtSymmetricKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtSymmetricKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtSymmetricKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtSymmetricKeyLifetime.Text = ""
		}
		$dateValue = $symKeyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpSymmetricKeyDate.Value = $dateValue
			}
			else
			{
				try { $dtpSymmetricKeyDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpSymmetricKeyDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpSymmetricKeyDate.Value = [datetime]::Now
		}
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	
	<# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$txtCustomPasswordLifetime.Text = ($item.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpCustomPasswordDate.Value = [datetime]::Parse($item.restrictForAppsCreatedAfterDateTime)
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	#>
	
	# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$maxLifetime = $item.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtCustomPasswordLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtCustomPasswordLifetime.Text = $maxLifetime
			}
			else
			{
				$txtCustomPasswordLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtCustomPasswordLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtCustomPasswordLifetime.Text = ""
		}
		$dateValue = $item.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpCustomPasswordDate.Value = $dateValue
			}
			else
			{
				try { $dtpCustomPasswordDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpCustomPasswordDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpCustomPasswordDate.Value = [datetime]::Now
		}
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	
	<# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$txtKeyLifetime.Text = ($keyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpKeyDate.Value = [datetime]::Parse($keyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$maxLifetime = $keyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtKeyLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $keyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpKeyDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpKeyDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					$dtpKeyDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpKeyDate.Value = [datetime]::Now
		}
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
}

function Convert-TimeSpanToIsoDuration
{
	param ([string]$input)
	if ($input -match '^(\d+)\.(\d{2}):(\d{2}):(\d{2})$')
	{
		# e.g. 1.00:00:00 => P1D
		return "P$($matches[1])D"
	}
	return $input
}

<#
function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}
#>

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkPwdLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
				
		# customPasswordLifetime
		$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}		
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
				
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			# Log 
			
			Write-Log -Level INFO -Message "Calling Graph to update policy..."
			
			# Do task
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			# Optionally refresh the UI
			Load-CurrentDefaultApplicationPolicy
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		$defaultPolicy = Load-CurrentDefaultApplicationPolicy
		Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:GitHubRepoURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website $global:GitHubRepoURL"
	
}

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>