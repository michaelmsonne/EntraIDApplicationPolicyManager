<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGVISURBVHhe7f33bxv7oi149m8z6D+je95PDfRg
0IPpwTy8xvw6QGNm0EDPoLvfu++9e+85Z5+zc7K97e2cZQUr55xzzjnnnCNzzkkkRUqr8S2askzL
W962bEvi+gALkhiKRapYtVis8F/8F0RERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERXxo1/82/+T/VPnsbUJ6dk
1b9MTGMYhmEY5hImLSO3/rsffqj/L/+P/4f6yIX9W/7r/+q/6i6tbsay3IZlhQ1LMgvDMAzDMJcw
K0qxHDfh2o1biFzev0V88hd3GFzYQ//cDgbmdhmGYRiGeVfm/2Q+433EcnxsTYOxuY2zC0Baelb9
hsaJwQUZhhdDGVqSYWBFhf5lNYaW5ceXMwzDMEw0Z2RJHlrQzu6cmb7ZHQyJ+yzLMTgv7rONAemD
9rsjbjM4v4eRZQWGFmTSMCKHe1rEOIlxE+M4uqrGxOL22QUgOSW9fkPjwsiSAqPizqtKDM/Lsdg/
jrWBPoyPbGNoTYXRZTlGxW2WmbMjP+Wy03Lidkvv+J1hGIa5EBlfVaFjdBW1HVOo7555rzT0zKJ3
ahNtg7PoGJlH+/A8OkcX0Te1ht6pNelnz8QKOobnj9M2FLpPfffsG8NpGVhCc/+CFPG7uEy6rntG
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
WACIiIiiEAsAERFRFPrgAmBjASAiIrq0PqgArKmd2NG5pTszDMMwDHP5sqlxYdvwngUgLT2r3nIA
7Bh92DL4pObAMAzDMMzli1j4y21HWN0znF0AnjyN6ZLrbFJbYBiGYRjmcmd1T4/J+bWzCwARERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERER0QX1vwOuf8Efbds9dgAAAABJRU5ErkJggg==</Preview>
  <Form>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
Gm3RAAA=</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	# Retrieve values from textboxes
	$dispName = $textboxPolicyDisplayName.Text.Trim()
	$desc = $textboxPolicyDescription.Text.Trim()
	$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
	$keyMax = $textboxKeyMaxLifetime.Text.Trim()
	
	# Get the overall policy enabled state from the existing checkbox
	$globalEnabled = $checkboxPolicyEnabled.Checked
	
	# Get state for individual restrictions from the new checkboxes
	$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	
	if ([string]::IsNullOrEmpty($dispName))
	{
		Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Call your function and pass the additional state parameters.
	# (Update your policy creation function to accept -PasswordState and -KeyState parameters.)
	New-AppManagementPolicy -DisplayName $dispName `
							-Description $desc `
							-PasswordMaxLifetime $pwdMax `
							-KeyMaxLifetime $keyMax `
							-PasswordState $pwdState `
							-KeyState $keyState `
							-Enabled $globalEnabled
	
	Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}


$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>