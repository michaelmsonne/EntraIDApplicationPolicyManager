<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>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
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEfIX8n23oJaULeWD2AAAAAElFTkSuQmCC</Preview>
  <Form>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
u3GALqG7Okavf27/+v8Vmr/PFEQBAA==</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $global:ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formEntraIDApplicationMa.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Retrieve the application ID from the textbox
		$appId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($appId))
		{
			Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned secrets" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Application"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			New-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Set-DefaultPolicyInputsFromConfig
{
	param (
		$policy # The policy object returned from the tenant
	)
	
	# Helper to extract a restriction by type
	function Get-Restriction ($restrictions, $type)
	{
		if ($restrictions)
		{
			return $restrictions | Where-Object { $_.restrictionType -eq $type }
		}
		return $null
	}
	
	$appRestrictions = $policy.applicationRestrictions
	$pwdCreds = $appRestrictions.passwordCredentials
	$keyCreds = $appRestrictions.keyCredentials
	
	<# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$txtPwdLifetime.Text = ($pwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpPwdDate.Value = [datetime]::Parse($pwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	#>
	
	# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$maxLifetime = $pwdLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtPwdLifetime.Text = $matches[1] # just the number of days
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtPwdLifetime.Text = $maxLifetime # keep as ISO 8601 if not just days
			}
			else
			{
				$txtPwdLifetime.Text = "" # fallback for invalid/unsupported formats
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtPwdLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtPwdLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $pwdLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpPwdDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpPwdDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					# fallback to today if parsing fails
					$dtpPwdDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpPwdDate.Value = [datetime]::Now
		}
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	
	<# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$txtSymmetricKeyLifetime.Text = ($symKeyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpSymmetricKeyDate.Value = [datetime]::Parse($symKeyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Symmetric Key Lifetime
	
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$maxLifetime = $symKeyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtSymmetricKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtSymmetricKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtSymmetricKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtSymmetricKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtSymmetricKeyLifetime.Text = ""
		}
		$dateValue = $symKeyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpSymmetricKeyDate.Value = $dateValue
			}
			else
			{
				try { $dtpSymmetricKeyDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpSymmetricKeyDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpSymmetricKeyDate.Value = [datetime]::Now
		}
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	
	
	<# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$txtCustomPasswordLifetime.Text = ($item.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpCustomPasswordDate.Value = [datetime]::Parse($item.restrictForAppsCreatedAfterDateTime)
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	#>
	
	# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$maxLifetime = $item.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				#$txtCustomPasswordLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				#$txtCustomPasswordLifetime.Text = $maxLifetime
			}
			else
			{
				#$txtCustomPasswordLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			#$txtCustomPasswordLifetime.Text = $maxLifetime.Days
		}
		else
		{
			#$txtCustomPasswordLifetime.Text = ""
		}
		$dateValue = $item.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpCustomPasswordDate.Value = $dateValue
			}
			else
			{
				try { $dtpCustomPasswordDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpCustomPasswordDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpCustomPasswordDate.Value = [datetime]::Now
		}
		$chkCustomPasswordLifetimeEnabledAddToPolicy.Checked = $true
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
		$chkCustomPasswordLifetimeEnabledAddToPolicy.Checked = $false
	}
	
	<# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$txtKeyLifetime.Text = ($keyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpKeyDate.Value = [datetime]::Parse($keyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$maxLifetime = $keyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtKeyLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $keyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpKeyDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpKeyDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					$dtpKeyDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpKeyDate.Value = [datetime]::Now
		}
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
}

function Convert-TimeSpanToIsoDuration
{
	param ([string]$input)
	if ($input -match '^(\d+)\.(\d{2}):(\d{2}):(\d{2})$')
	{
		# e.g. 1.00:00:00 => P1D
		return "P$($matches[1])D"
	}
	return $input
}

<#
function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}
#>

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkPwdLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
				
		# customPasswordLifetime
		<#$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		#>
		#if ($customPwdLifetime)
		if ($chkCustomPasswordLifetimeEnabledAddToPolicy.Checked)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $null
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		
		if ($symmetricKeyLifetime)
		#if ($chkSymmetricKeyLifetimeEnabledAddToPolicy.Checked)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
				
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			# Log 
			
			Write-Log -Level INFO -Message "Calling Graph to update policy..."
			
			# Do task
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			# Optionally refresh the UI
			Load-CurrentDefaultApplicationPolicy
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		$defaultPolicy = Load-CurrentDefaultApplicationPolicy
		Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:GitHubRepoURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website $global:GitHubRepoURL"
	
}

]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>