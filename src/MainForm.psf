<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAHu1SURBVHhe7f1ncxtJv+0LnpcT93OciDuvZm7M
nRd3JmIm5n6EiZiIO/fEnL3P3vvs/fTztFW31Oputbw3lCh6772n6L333nsSBGFJACQISwLkmvgX
CAoEnQzVgsT1i1iBRKEqKwtAZa7Kf1bWf/pPhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYSQ//Sf/tNv/8f/8X8sffzkeWlkVFxp+OsYiqIoiqK+QMXEJZdeufJL6f/wP/wfSoMb+2P85//8
nxtyS2owsbqJCdUmxlfMFEVRFEV9gZqUtnzFhD/+vIPg9v4Yj5+ElU6qt9A2uozW4UW0jixRFEVR
FHWShn2vbe+oY9u/p4LzO03+9VuGF9E1pUHPyNz5BiAmNqF0VruN9tEVdIz51D6hQuvkGlomNUra
v5yiKIqiLrM6x1VKe9k0MI/mwYUzJeu0DC2ic0K2WUbzoLxfOFuyzvCish/Z37vtR7Z9u03X1Bp6
xxbONwCRUbGls1obOsdX0SUbT6+hq38ZU83tmG1pRm/nAtpn1pTPuiZW0TWpRvek2pd+R73v+l+k
PvoYP3Z7iqIo6lNLGtnShiGUiRrPVnnjEIrr+lHbPY26rjHUdY6grnMUdV2jaO6fRsvAzKHqu8dR
q3w2hpr2ITT2TeNN8yjKGgYP86pqG1dU2TqGqvYJvGkaOdxXSd0Aajon0SON/4wOvaPz72YA5nR2
XwM0rUFf3wKMlWOwL6ngWFvCVs0YRlsm0TmrVTLuHF1E2/ACuifXlPe+nWnRI8Zgak2RLJNG36dV
tA/Po2N8Fb3TGt+yKd9nynoB6/vzk3SnuJiJ1cN1FE36Dqx7QqX8CIHrH64n+Sum42g5DtPB25y4
7G253ubhTx+8+o/74POOkQV0HJTJt63v2DvHlpXv9mheb03U2+U+o3R6mU5eFpwnRVEU9Wkk9a2E
AKQxlnZGrupFwb0Egcub++dQUj+I5r4pDMwb0CeN87QGRTVdKKxsR1F1J/Ir2pR1+2d1ShvXM7GK
qrZhlDeNKBffkpeE6ItrOpFX0Y78yk7kv2lBfc/04f5aBuZR1jiMvhkt+mb16Hu3HoC40kWjE73T
WnTP6aCuGYLTsIwt7xosex5s7zhgqhtA3/gq+qZXUFnbgoaeafTN6JVt+qZW0Ng9jp4ZPfqmNcoX
JAcoB9raN4G6tj5U1LWhoqkb7WOrGJg3or1/BOX1XeibM6J/Rqt8Gf1SYHmd06Gxox8NvdPomdKg
b9rX6CnrzGnQ3DOuGBAxCIfbzklZZL9aDM4b0NDSgTfNwxheMuJNVS3q++YxMKvz7WNG49smYNvD
ZUpavjyd8nnftG8dOR75YeQz5QdStl9DU/cYuqd16BmbwZuaZlQ29aJrSqccx8CcBvWtfWgemDv4
nnx/Hn8+A/M6VNU2orZnDkOzKpSU16B1VK3s1/9diMFQXv1lm5bv4eDzg7L4P1fKTVEURX0ySZ3b
MaZCZcsouifUaB9ZQefYKpoHF1HbM6OocWBB6VGXz2RdaZjfNI+gbWhWaZ9Edd3TSEvPQ1l5JYqK
y5GVlY/iuh6MLG34DMLUKuq6fFf7vpCDCvU9s0jJLEFrWw/qGztQVFyFgpoedE2soW1kGS2DC0rP
wOC8HoML6+ifWHo3A7Cy4VYa7MEZDXQtNbDPZ8E7+L9hZ+I32DVZsLSVY2JoGAPzGrypaULb6Apa
ugfwpq4dde09KKlsREPXMOraR9HaO4jyui4MLZnQMTCOmuYutAytoHt4HHXdUxhb2UBL9yCqW/rR
ObaAuuYuVLf2o6V3DNUN7ajvHkZDxwDqO0bQ1j+F+rZe5Uts7uxBZVMXyirrlW6S1v5JNHT0o6Zt
UNm2sq4FNe0jGFkxo6WzGyU1negen0dpRa3yA9Q0tqK+ewx1LZ2oaOxB98QKquub0dAziebuQVQ2
dqO5bwIV1Y2o7RhEbXMXKhu7UNXYicaeSbR09aOsrh31nYOorGtDfecAistr0DamwcDELKqbe1Hb
1oem3nHUNHWisXcU9e39aOgaV8oq6cauYXSMLCrGaGDRiLrGZlS0DKFzeALFbxrRMTyPirpmXx4N
bahuHULPxJLynUsXUUN7L6qb+9DSN4ayqkbUdQ6iuqkXvbN6DC3IH0tPURRFfSJJPSs9AdIw901J
D7AWdd0zyCmoQk19O2rqO5BXVK00xL3T0lu9hrahReW99BKPLG4ojbwYgNKyKiQk5yIsMhVlpRUo
re/DuMqCwTkjBmY1aOidRHX7pHKB1zmxqhiDpJwqdHX2YlW1gujkAqVnXXqlpZe5fWQZ1e0TGFla
x8iyCYOTy+9mAFYtHgwvrWNobROzqS3QdY9Cq1VBo9FAu7CEpfh6DM8aMbK0qvQAdE2pUN/ag5a+
CdQ2d6C+axRN3YNo7p1GY3sniisb0b9kRtfgBGpbutDQPYG23mG0j6kxMreMN7XNqKxvQ3VLF+ra
BtDcM4LqpnY0dAyjqbsPNW39qGnpQVV9u9LbMDynRnV9E8rr21DbPojW/nFU17eirmMErQPjqGxo
Q3PfJOpbezGwbEZbz6DS4FY0dqCxawh1rf2oqGlARYM03KNo7RtBbUufb1l9Gxq6x9DUJQ17C0qr
m9HcO4i69iHfMfVNoLG1G2XVDajuGFKMQYvsq60b1S196Js3YXBqFmWVTUoIpbW7Xznexq4e1Lb3
o7alF5X17WganMfIvBrVDa1o6p/DhNqEpvZ+xeBUtnSjUUxPWz/KqupQ2diOpt4JxZjUHi7rUIxB
Y0ef8v2V13eisbMX9Z0TGF/d9P3oFEVR1CfT6LJcoWuVhrZfrtRn9ahsH0daZgHa2joVZecUoaS+
H/1zRnRPadA+vKSs3zW2iNFlE0aXzGgdWkJSai5KSitQXPwGqWm5qGgZwbhqC0MLGxic1aGpfxo1
HVMHvcZ65So/IiYd6VmFSE4rQExcGkobBjC0sK70DHeOqVDTOYVxlRkT6k0MTa+8mwHQWPcwpjJh
bG0TE6OrWI5tgLa5H7rOfqiSWjDZPoMx3TYmVEalIW8dnEHP+DIGZtfQO7GMjuFpdIzMY3BWg87B
cbT0T2N01YKhWTV6JxbQ1NmP9pFFTKitGJqROLka4yvr6BoeR0VNC5qHFpQegjc1rcpoyYFplfJl
STd7W98oOscW0dYnDmoR3aNzaB+aQf+0Gl1DE2gZmEX/zKqyrpRlVGVB/9QyBuT95AoGZ9XKNi09
I+gaW1C64gdmDpZ1j6BnUoXu4QmUVTWgfWwJHQMT6ByV9VbRP61C/4wafZMq9I4voGVgGt1ji8px
902uoHNoCj3TWowtatE7tYYprQ0jC2o0dQ6iW7afWkb32BIGZlbR0j2M/jktGtp60DNjwJTarJR3
YFqNvulV3zGPzKK5ZxTd475j9y9r6h5F//Qq2noHUVbTip4pFVr7xg+OZw0Taovyo1MURVGfThOr
FqVBruucVubNGVau6E1o6J1FResoKltHlZ7u4cV1DC+ZlM96JzWKAZA2Y1Znx9TaNqY0NnSMrqCx
b1a5IGwZXMTE6ham1mzKZxPSkz0wi/quGWWfo8tmxTy0yqj/gXnlLgS5OJbGf0w+WzFjcFaP2s4p
TK1tYVq7jZHZ1XczADobMKne9E0goLdhYt6EpepmrFTUYHJEhwmDXflM5guY1toxrdlWNLVmxdRB
2v9+WmPDjNamrO97v42Zg22UfciyNavyOqlaR9fIEmYMbgzPLKN3SocZvXxBvu2UV63t8NW/n8B9
yYEq5Tgoi+xD+YID8wgog39dZZnOjhnNFnqGp5RxDGNqq/IDBa7ny9efR+Bx+/YvX7byvWismFy1
KMclxy/HKOXwrz+rdyrH2D686CunfD/+8gWW6eA4j5bTgalVEzr6RtHSP4tJrf3Ier7fhqIoivqU
mlJvYWzFjJr2KbT0LxyqY3gFHSOqQ7UMLCrLWwcWUdsxhbbhFfROqjAoF3Yza8rryIIeo0tGjC4a
FMkFtPLZrAa9EyvonVKjvmsWTX3zSl7N/QtoH15R1Da4dLif5r4FtPYvKKakdXBJaadm9Q6Mzqnf
zQDo7VAaMH9DNKXdxuS6G5MbO5jS+xrgTyNfg6c4FjEOwQ3vXya/QQheftHyH2/w8neT37Qc/k4U
RVHUXyppp+SqW2L80jV/pqZ1GJg1KHW3XMkPzRswvPAOWjQq28iYgHfdjwwOl/JJOzZvdGFsfu1d
DEBsqcEOZcONbTdcu95LqL0TloWivpRyUhRFfb1ye/aw491/Z0nd7RZ59t9ZyjYn7GfXC3j2AO8+
lHTwflbW7ZgzuDA+r3l3AzCptsLq3AUhhBBCvkzUG44PMwBbDhoAQgghJBTZ9e6hsHMZ/xHVgX+L
aEd60zxcO94j66xeqAHY3UZvzyA8ADxWI7p7h4PXIIQQQsgnJqpyCv/TD8X4n38qxf/1Sin+z98X
417eMLx7+4frXKwBsKvxH//v/x/GN3Yw2ZCCf/73u9i2GDE6PguLeR1dbe1YMZhgNVtg3dqC2WQN
zoEQQgghH8G81or/1x9V+F+uluH/+VuFov/7tXL8L1fL0TtrPFzvQg3A7pYaMXceIaewFPk5yciI
z0bYrT/x8/U7iHoVgbCHYUhKTEZuxhsMdrajpLAtOAtCCCGEfATtUwb8X34qxf/jtzeHBkAkPQIS
FvBzoQbAZVrCm7wqFGQmo6C6Dk1FJYh5+RJxmQUozczDyNA46vOLkJ+djgd37iGvvDc4C0IIIYR8
BNID8L8e6wF4g//btXL0zq0frnehBmB/zwOHw4W9vX3s7Xngcu5g17WN6ZlZmDa3sbuzA7drBw6b
GZPTs3C4ZLQAIYQQQi6SmOppJe7/P1/xjQH4P31XjIf5I59wDAAhhBBCPjse7z4KlLsAOvFvER1I
a56HWyYDCIAGgBBCCPmK2X970X8EGgBCCCHkEnLhBmB/fx87OzvY3d29lPIfOyGXhb29va/inJdj
8Hg4LolcHi7UAHi9XphMJlgslkurzc1N5TuwWjnHwadCTKZU1NRfL2nsA3G73VhfXz92Hnyp2tjY
4LlLLg0XagBsNhu2t7eDF19KpCIRQ0QuFmmA5ueXsLKihmp1jfoLtaJaw8zsAhxO1+HvYTabFRPw
NSHnbrDRIeRr5MINgN1uV9JyAh2TMhJhD+vrRrj39pQrOf9yfzr41Zf25R94UsqthvsHn8uViXJr
g3/FoPwUKetK2p/nPjy7O8p8ycA+lJLtumAwGJS8DrdT8nmbX+B+T5MgFaOU6yQkr1DDbrVgc2sT
5s3QvvqRrlqVai14MfmL0OmN2Nx6+x+Rq2bpOg88X8/TSef4EQWcv3t7XmyaN2C2mGHe2j48l33n
5vH8/Bzm5d1V6hvnrnx2yv6CyibnLs07uTj2sGHaQCj+o/46AyAn5/4O2ivK8DoiFm39M0e2lccV
Kq8nnHherwOT49PY3dvH0swUdBbnkc9rchNQWD+I1tJkvEypgDzvwBOQj894BLOPtpJ8JOdWYmN7
B3uuTVTlpiI9PQfjKt9Uibu7bxtwqRgmBrowNKNV3h87vgAJxw3APtJfv0bH2Dw627rhUFbbw+zU
NKxuv7E5Xs7DWzZPOAbv/h4WZmaw6Tr6WXNNPdbMb6/S3oXxnmrcvnYThc2DR5Yf3yvglnkcZlak
BJgYm8JO8AonbHeW6dnb34N+bRnLGhP2A+5RPQkxAKurmuDF5C9CDMCW9W0v37kGQPk53WiobYDe
6qszxET7Ma5Mo73vaF0gSMMv7MOD9soM/HntNhqH5wLW2Idy1uzvHf7XpAwW4xpmFnz/j+HeHpQX
FeJ1RBSycotgtJ5RzgPRAJALZc+FppJiREbGo3dc6sxAfP/chenpoDp8H811jTBZrWhtaMaG42id
qFyEHlkSyOmfnMRfZgAEx8YSsnIrfWnzKrJTXiGnohyZSUlISclGdkYOIl4norW5DRFhd5BaWo+G
NwVIjY3Bt9//gXWnB9lRz5FeVInCzNcobO1T8motTsfziGQkvH6KW0+T0VRXiczkVBRk5yMxPhnp
aa9R2NiEwrR4pGZWo70uD/FZcfjz2m/4299+RNuUEfrZPtS3jUK1MIaSkmKkpxWgsiANT1/EICej
EHHp6UhKicf9W49QVjcI7xkViXDcAHiRExuF2NQCFBdV4k1pOhKzE3Dl6g1MGxzYWl9Bemw0ampb
UVuWgoyyIhTkZCM+Ph35OYWICo9GfUMnshOf4lV6CToaK5GWkIKrP/2GyoYmhL+4i+zKRjRXJOPn
2y+wsnlSs3wWe6jLrYPVZkFC+D2EJ2ciIzkZccnFUM1P4/WTp0jLKkFSbALCHz/Ajaep8HjteHD7
ARrbGxEb9wp9y0bsua14k5WI3PxadDQWISk3AyWlxYh5HY/8nBIkRkWhqKwJdSXJuBseh472FuQk
p+DO1atIKm2Fcc2AnTN6X2kAPi8fZgBcKM4vwYbLi/n+KrxOSkT3YCey0iKRlpeNuNh0dPV3oXdw
EprVOSTHpCA8Mgod00u+nexYUJ3fgu2tVTx/chux6blIiYlBem4tliZ68fjBM2RmFyE+JgEP/vgD
zxJLlc066muQnJqHpXUHpltr0T7oy+9YGQNEA0AuEqt2FrkljUp6ZawLsRHxiHh1F9H5tVgcacWj
+4/x08+3UNXQiFfP7yKnqglNFUm4ejccFocTufGReJaQguzSNxjsH0Bvdw/0OitsmzoUFRaguqIe
JeXlqK6sRV5BESbn387z/y78ZQZA6oGdbR0y0/KwtmZES0kOispKERX2ANGZdehrLMKP18MxOTmC
G3//O679dgtPnzxCUkYZFoaH8PJlCtx7++hurEFyYgrelOcjNbtY6VbpbqpF+KMnePU6Co/vPcTN
208wNzOP/NhEJCWloaqyGDl5WYh88QLXf7mO+MwcvClJx/3nCcjJKcTMmg0by6Moe9OE4e4G/NN/
+XcUvGlAZVIivv/ue/xyKwHt7Q346efb6B8YQG52KeT6+rRQgHDcALhQWV6DtsYK/O1fvkFqXqFS
ht/uRsPp3cNwcymqaroxVFOKjNx8FGTH4NbzTEwPt+O7b//EyNQ0Im//hh+/+xnPwsIQFpGClYkZ
pCVmIT36Na5dv4Wnjx6hoLQEmVm5mDe+Xw8A4EBlZjUG2mvw0z+u4PGj+4jLqsVAVwMiHkfj0Y2b
+P/+yxX0j00h/tl9xOW3KtdgFUXFSMvIRElJPgrrBrClnUBmVikWRoYQF5eIurpCfPfzY0xMTuDW
lauo6xpBZUYMvvlv3+DZi5e4e+8ZZifnURgfj4b+BXg83jM9LA3A5+VDDUBeRg4W1WoUZKWiqrYc
13+/hcaWOry4fw9//7cfUV5bi6KCGjTXleGH7x6gpq4OmUV1yj52rRq8yW1AW1UOfvr5D9y9fRv5
le1orS1B9NMY3Lh2Ff/099sYn5zAo99/R0nzmLJdW20VEhIy0Dk0jfY3RRia0SvLj5UxsJ6iASAX
iNOsQmZmMXQaAypz85CRkIg/fryClzHJyIxOxrUrV3DtYRzy4yPx62+38OTRIxSWlSAzpwD6rS0U
p+ejrKoWKSlJuPfoLoaXN+D1eLHr3MC3/+1fUVzThB/+4x+obGjAf/+v/4YhlS24CGfylxkAkXRP
LI32Iy46Bb19g6guz0RlcwfmlzRYW55GfcsADAY9xgaHUFtZhKGFVfQ1lCI3vwy1VdXQmJ1Qzwyg
s6MDb4pT0Tw0r5ywS7PTWFEboVcvobGpA+ND3chJTUNVbQd0Bh0a36ShtnsUo80NKK1sQG9bGfLf
VGF8ZgGDXS3oH18G9ncx1FKF1PRcFJbWYmFlDb2VVcjMz8eDe/cQl1GA7sFx6LQ6jE/MYvdwXMFx
CccNgAeTE7PY3tpAY0MTutrKUFzXhO62JixoN+G2m1CYloTm9kF0NRaipKYRU3MqrBvUqK1rh3Fj
A9PjE2ivL0fb2Dxmh1qRlVmApvp6DA0MoraqFBMra+ioykFKTjG2d85qRk9iF1OD03A4ttFSVYSG
nn7MLWmg16vRVtmE3PRs5Fc2Y91kwcRgB6qqm+HGPoY7WzHQ346srDQsGG2A142WN2LuWjA+UI/c
klIMjM5iY2Nd6c5a1RmxND+P/vZ6vGnpxerSJLJSM1BfU4Oe/mFo1OwBCGXe3wD4YvXddWVISctE
U2MZsgtLsbI6h6LcVDR0DmB1SYWRoQE01tQiK7MEkc+e4El4HKYlJCRjdVxbmBiag317HZUlBWju
HcSySovVlQU0ldYgMy0bJXVdMJnM6GmtQX1zt7Jf1cICBns6EB8Xj9q2PuV/dax8QaIBIBfLPuYG
upAcl47KmnbojRvobihF2+gMBuuakJlThDdV1RgZHERNZSkmV9bQXpmFlLwy7O7toa+2AtGp+ZiZ
HURUShI2bQ7oNWaYNtbQPzCImooaDIyMofqN1J+DmJlVBxfgTC7cADgcDiUdfGL59L6NUjDHt5d8
L4KzimbQGY7t+bTG31+e4waAXAQ0AJ8XvWH92CBA+U1ONQAfcN6bjDJI2JeW7c8YPnIqJ9YLB4MG
z5JAA0BCjQ3NAubXNoIXfzQXagDk6t9/8gTfP/zlylcReL3By0+XXBHJvdGsRC4eqaRn5xaVOwFW
1RrqL5RqVYPpmXk4HG8H4cq8F3Lr70We88L+3sXl9z6Sc5e3AZLLwoUaAGUUrsWCtbU1aLXaSy2X
631j8ORdkcbG7d6BW54uSf11ch+fKU9+C6PRCI1Gc+wc+FLFc5dcFi7UABBCCCHky4AGgBBCCLmE
0AAQQgghl5BPaAC8mJ8YQXd3N8z2s9fdcTths25haqgPw5OLh8s9zm1ojeYj6/rwYnPTesbo4FM/
IOQd2cfC5DD6RmYPp/DccdqxbT85PrzvcUKl1imD17QarW+WOkIICWE+mQHYsa4h8mUU2tvbsaYz
Krdu9bc3o2NwFqYNEww6HcxbvlsGVVPDyM/OQ2JiGgpzMtAx6Jvyc220A2GxuXA6bVCtrmJn3wud
Wu6NX0JacjbUBgv0ayqYtx2wb5pgWteisvwNhmdWYN0yQ2Ncx57XDdWKGm7PHszrG3DvAisTPajv
HIdtax16y5ayL5djGzqDHutmK7y7bhj1BmUbg0YNk9WFHdsm1k0yyYIXyyvLcHj34dg2weGh2fga
2XMYkBgTi9iYNAxOLEGrW8PkYBsy8xuwbbdhZXkFZpuMhpdH4brh2VzElV/uYm6mF9/9eAM6ixkb
5m3suh3KHQs78v8z6ODyyFTK61jSyIxdHpg3N+HZ80Bv1EO/blasq91qUiaH2trQQ6NbRXlJJdYd
vKOEEHKxXKgBkHkA5FGaNrsDO1tqvHzyAtXVTUiLT0RcTAKuX/kD4VFxSE3JQ0lqJP7+031sOLzQ
zY0gIz0b3RMawL2Ownzf1IkNJal48uQJIqJSkZKWgai4OCTGpSM5JxlhL2ORkpKO/MwstLcNoyk/
Ht988wN+v/0MeYVlyMlMRFpeKsJeRSE6Mh45adm4+etv6BrXY6anEmGRyaguTUFUZi4sDjeaS7Jw
8+4jPH6VisG+Xjy//Qdu3AlDTEQksvOq0d9YhO9/vImc/DykZycjNjoOf/z6HR7GFcPl3Ydte1u5
HYr6ciT/VXn1I7exbm1tYdtmx57TgNePHyO5oAIVZQVIy4hHdEIcXkckISs9DRUFxUhNSENhcSn6
ZI7vHRMin79EfNxrRMblorsmHz9f+U2ZSjriVQyamnuQ9vIBbjyMQuWbTMSlZyHy+SNc/f06noZF
4tGTZ3gWnoCcjFT88dtPuPngGSIi4pHwOgz/uHIfWtsuXE7nYZkpiqLeVUq7bDs+S+CFGgDZiW/i
jn24t1bx+mU0urt7EJ9UiOWlOTy99wiJyZlobutESWQU/vHzHcxaPNDPjyArPQtpGQWof1OI9v4F
eO0GpKdnorOpHP/yz9+ipKoBj+7eR25BJdLS4nHn7jM8ePAMNTUt6KmpR+y9MPz86294EZ2C1MRE
RMcloLQkC7ceJWFFtYSs+CQ8u/UnChtHYNJMIyM5FWWlWUjJLoDWYkN7XSUKi6tRUlaOqIcReHHr
Af75b79gaGYFTW/yEH43HL//dhu3X0Sjo7Uej3//HXfv3ENacQNk0j05ZurLk/xn5dX//5Xb2uS9
d1uDzMxSZYKortpC5Bfl4cUz33/u5ato9LT2YqKnCdfv3YHBvQ+3eQW5qRnITktBSkYuYh9E4Ldr
v+LnB8nQaJYQ8/glIu49ww9Xf0f+mwpUleTh+g9XERkTjfDIJJSU1qKyohqv7t7Cg4dPERERgaq2
MQy3leHGnUhsOHyz7VEURb2vpF2W+i2YCzUA4jRkZz52MdjZgrq6OgxOLMLtdkG1OI2R4TFYbE6s
jI2gtXsYzj1gx7GNdYMe3c11aOka9m1t38LGpi9EkB71HJnlLRgbbEd0bAqmV9agUa/BZNpAX3sj
xqdVWBgdQffQKGanxjC3rIVuZRyd/cMwmjYV52NY02CouwdaswP77k0szM1jfroPfeMLyj7MG+vK
LGcG4wa0K6vobevA4MQ8rDY7LCYTFsbG0d49jKn+VvzXf/ln5PdMY3a8D7NaX7ct+TIJ/M9K2j8B
zL7HBb3eN/OW165DW3ubElJSqbTY0C2jrrYJvR11yKmsVX5/j9sOw7pFWd+0se77v3T2YH5VD4fD
Dr1ai+HOTowvqFGU+AL/n18eYEmtRt/QINQGE4yGdejlUbsWM6ZG+zG5pMbmlvSomTA5MgzjwblA
CCHvi9RxUr8F8wkNwMVxmOXBI0I/J7uObayuaUPy2c7k/TnNALwLti0TbK73/yes67QwWI6fjIQQ
8in4og0AIZ+KjzEAhBDyJfBVGACZl9/tdvumgaWo95Q8tCaY0wyArOt/uuVFS0ICwctOk5RBpqb1
j635UkUI+XzIOfhFGwAZnDUzu4DllVWsqNQU9d6anp7D9vbRkbCnGQB5qqXT6VQM5+6uB17P7oH5
9MkrDfLeW0Pqez6BGx6vF7u7Yjjerrsj23s9PhOy44bT6Tp47/tM5hwI3uZw250d5YE78oyNrS2r
Ui6bzTeqV+5YUO5a2N4+TCuSOwUCPv9oWa1H9ieS71HKsm31L5O7E07ep5RfjoUQ8nn4bAZAKkn/
40D9T9b7EKQilErc5XLCLldmFPUeklvotDo9LJbNI/+rswyA/8pbNTOCgYmVI9v1t7VgdFZ78M6r
DOITJvp7saz3zS1xmK9hCW3dE9jbc6MoPRFRESmYWPKVY101jZqGbmV+gED292V+AV+vhdLg2uxw
OW2Ym5qEWquH1bqt3G4rvQmbm1u+HgOb9C44Ydu2KsucLjEQLthk+WHvg+PIqy/tVPYj35PN3/Mg
y51On+FQDIbPfPi3Ma/rMDMzA7PVAacstwWu4zjcn+i0W5AIIX8Nn80AuI0zuHP3NWYW59HUOoSd
gysBqeB2A54s5ttq/1STsLO7qxgAqUiCrzAo6jzJ/2ZNo1UaxkDOMwDC0lgHXr2MRlJcMlo6htDV
kIkr1/9EfFoB+gdGMdzVitziGnS3FOL6b78jpawDOo0aMxMTKMtJRUxcKopr+mSmASRERCI6IQ2l
pWXIy0lEQXkBwiPS0N3RgqzkZOTkvcH4xATGxibh2ds7NAAy2VBfXSniY9NQ01CD3MJqGDftcNnW
UVpYgjmNSZlR02q1Qz07hIq6XmhVM+jsn4LHu4NthxNulx3rG2bFNJhNZjjdO7BubcGyoUVrcwc2
rD4T4ZIeDc8OVhYXsGF1YKq3CZVNg/DuueFwubHvdaEiNx3h4a9Q9KYHjl03TLoFpKfmQmXYVCbh
MlutcLndcDrkfLUqRoAQ8nn4bAbAsbGMZ49eITu/DK1tXciKCsPjl8mIj4vBs/AoFJTXoyDlBa4/
Csf0og5G49ErND80ANTH6GMMgHqqE9/+/Vc0tLTjxa0byC4pQVrSa9wPS0ZmUjgeh0ci7MkTxKVm
oqQgGT/fjEV/XxeiX0Qh4sF9/Jd//hvy64YUAxD59AXax2ZQW16AsooSPHpwF7du38eftx5jfGwO
7WUF+P32TbQO+6bE9hsAu3ULGQV9MBhXUVKQjeiYZORkxiA+IxGPHj3F3fBoDI6PIun5ffx26ykq
28Yw1FSA+89ikZP4BL8/eIrIyFg8eRKB7t4hJDy7iwfPYhD9OhKvnz3G376/Ba3NjbGOJqQnJiE3
qwDJcekoLsnC0yd38TwiDg/uXEV4Vo1i3otT4vD0RRRy8/KRnfYasRnJePYsErm5BUhPjEd8RDxK
K6vR0NCEdZsLTgcNACGfi89mACzqKVTWdaAw7TV+vf4MiU/D8E//9h3i0/JRXvYGaXFR+O6//x3P
XkRiSmVmDwD1SfShBkDeG1VTSMsowop6Dd1tzSjMjkd4RDhq2icw3tOAisZOjA30ojQ/BZHx8SjO
K0Z0VArKcsqR9joWL2OS0TWyiL09Gzo6BpT8N5YHEBcXgfLaehQXV6K5vhLxkfHo6mjBk4gXMDr3
sefZPTQAbqcdxTnl6Ovrxp2ff8a3P/6OhNRU5GXH4aerYSitKMPzh2F4efMu/vd/+nfk1g1hdW4I
qXHx+POnH/D02WPcfpqCwYEuPL31BC9u3cP/9l/+DcX1PajMjsH1e7Gw7u5jcbASP3/3E36/cx/P
oyJx6/ZTVFaX4Mp//A2//PIb4jLL4d33oDA1EY1985gaaER2VgZiosJw9dfb+OWXG6iqacNMfx/u
37+G9KpueDw77AEg5DPy2QyAa9uEZfU6TPpltLZ0oansDUpqWjAzv4TlpSUsLaswMdCO2u4hmDYs
WDceraD90ABQH6MPNQBKHP7AlHoOQlZ7Xi/2ZJv9PWWmQAld+d7uweuVBTKoz7eux+M7T2QsjOTl
j+3LuBgZOBiIDCxUL4yid3xeKUfgGACJ5xuXx5CVlob8kip094+iq6kYJbVNaK2uQlJOMaYmplGW
kYPc0ipMLGiwZVxCS2ML+jobUNHUiuHxOajVKvS0dKE0Kxe5pTWYW1ZjYXYUb0rfYEm/CduGCgO9
fRiamMDw5CwGu1qQkhyPvsEh1FcWo3tqBe4dNybHx6G3OOC2r6OiMBU1bT3o6uzG6OgISrLT0dDU
iuj4cEysrsPt8N1NQQj5PHw2A3BRSGUodwAoI49PmOuYos6S/G/EALzPIEAZuf6p/s/vg3/w3c6R
3rG9YzNQBhoKieG7dw7Mx8Eynwk5et7K3Q0ez8Gtj24XXO5dZX0xM2J0Drf1fw97HqU8YlZ23C44
XTv+NQ6MkG89t9WI8ZlFZZyPlJ13ARDy1xI4p8kXbwDkYOak12CZtwFSH6AVtXIbafCV6GkGQG4B
lF4DlUqFubk5LC4uYnl5CQsLC1iSnqul42n5XNbzpZePpOV1MTCt5BeYPp6fvEov2fT0tE9TU5ic
nFRG309NTWHKn56cVN5LWj4PTMt2gWmRkkdg+iC/t+nJoLx96RPzPsgjMG9l+ewcFhfmlc+Vsk5N
YnZ2VvlM3ktaXuX90bSvLLIPf7mOp9/mEZjf9LTk8eF5y+dH8wsu66fMOzg/X1qO9W06OG9/Hsfz
PlrWk/cj259U1vPyPrvcp+V3Ut5fx+/nK3dwfoG/3/H8zvuOz/79/Hmc/PvJOpKWu2/8xvuLNwB+
5CrH65WuVop6P5303zzNAMiJo9Pp0NHRgenpGYyMjGFsbBzDI6MYHR3HqD895kuPjIwqn4+OjinL
JT0yOna4XF6PpEd9+UlatgnM25/25yfrjo9PHr4fn5j07defHh1T3vvTst7b9MRhenx8QpE/LZ+9
TX9g3gH5nZu38nlgekx5L8fm/z5kuT895k8f5BGcVvIITCv5+dKyzJf32/xOzfsg7S/r2/yCyxqQ
d1B+p+YdkN/Zeb/N49S8A8oanPfR7yE47+Byv/2+T/oegvM+//c7oazBefP3O/M7fr/f7+3x+s9X
eRXJ8vn5BdTX1ysXFv6w5VdjAAi5SM4yAHq9HqOjo1hVa7FptSk9AmazBSazTI4j7+0wmSw+yfLD
9BYcrh1lDIGMOZBlm3KLndw/r2xvweaWFWbLZtB2H5g+adnHpA/KeGI6eN2PSZ+07GPSn7qsnzLv
4GUXlZbXT7Wfk5Z9TPpTl/VT5h287KLS8nrSfkwW5eF1eoMx4NUIg2EdqtU1pQdAehBpAAg5g7MM
gMFgwNDQMMxmM/SqRSytmQ6323VasbCoPnx/FA+qC7ORW9QA+0EYbku/iplF/8RB8rRBf+ycEELe
H5lsyz9ducztIWm326kYgaGhoa+vB8DlcitXXTIDGkW9l2x22B2OY//PswyA9AD09w9ie3sLvfVl
SM6uRm9XJ97k5uDp46d4/ioKRa3d2LJqUFNTiuG5OcxJ7Ht8EPHxiUhIzEBzaxuqaitQV1eG+LQ3
mJ8eQXlJOVra+jE/M4aa5mYsryyj5k09NjZpCggh5yN1lsT4/VN0y3TbkrbbbdDqDBgeHv66DIAc
yPTMvNK9saqmqPeVBlPTc8pJEshZBsDfA2C1bmG45Q1u33uF188f4efv/0B0QjpycstQVlWCW/ef
oLKqBNm5afj+7z+gqXsY0c+fo6ZrCOUleaioKsKDhw/x+OEzvHgVi5nBUeTGJ+Dnb/6OX/74HWEv
X+P6levoGDk63TAhhJyE3wBIndXa2qrE/H0GwA6N1he6DLkQwOmfnI/MAyCNv8RVxeVQ1PtIniHx
Ps8C8BsAcdLirqf7mxGblI/y9Aw8ffYMmekZiH2dgPjsQtTVliM1JQ65JeVIS81EY0Mz2nomlXxm
+qoQlxiHnLx8pKTkoiQ/B3npOSjILUVuShISs3LR1dGNl3fuoWNCdaRshBByElJnyZ1KMuo/ISEB
cXFxGBkZUW6Xlx6AkAkB2M069Pf2Ij89GZFRCZhc0R/5/F3hREDUx+h9JwJ6GwLoh05vPFxnx+nA
jscD764btu0tbG07leUyp/6uMgkQsLe7ezBBkLCvzIWvpJRlXmyYzfDtZR+WrS3FGMsc/IQQ8i5I
fSR1mkajUW4RFKnVajidjtAKAWxq5pGdkYXiyg5YTWrkZxRheVmL3ffsDqABoD5GH2IAfCGAIeh0
hiPbEELI5yQwBCATcylP7VQGBNpCKwRwaACqOmGzrKEw6w1cHs97hwNoAKiP0UcZAL3xyDaEEPI5
8RuA4HpODEDIhQD6unuQl5aEqKhEzKt10C2tYec9HQANAPUx+hADEBgCIISQUOE8AzA8MhIaPQBv
2cdBiFSZZ/x9EQOwuLRCA0B9kOR/I3cDfMggQBoAQkgocZ4BCJkQwEUhFbM8OVAeCKRSrVHUe0l6
j+bnl5SRs4GcZwAYAiCEhBrnGYCQCQEQEsqcZQAYAiCEhCLnGQC5JfCr6gEg5FNwlgE4DAHwLgBC
SAjxRRqAPecWJmeXghcraNd0cB08lzyYPa/vIE5DnlvuPXlTQs7kLAMgPQCDg4PsASCEhBTnGYCQ
CQHIe/8y8+IoXrxKhN60gZHhYWzYtrEwNYZF9SzSk9IwtqjB8uwYFlYNsK5rsbi4gLzMTDT1TsJo
UGNidhY2xxZGh0axbrFDvbSIDYsTrm0TxsenMTk6CrXRhn27FkkpebA6trC8uoptmxXjwyNY33TC
pFmGSrOBdZ0aYxOzKMzOxsCc7wrPX1bq61Uw5xmAgYEBGgBCSEghddZZBmAkFAYByuQE/ocUyF0A
bZWZePDgLh49iURObhHCI14iMTEf6blJePwsAuGvo1GYV4iO1gG0lmbgm3//Br/eeo68gmIkxMch
vyQTd+8/RWJcMjIS03Dn+jUU1k5h16HDgz/vICoqFpm59bBbNYiJTkR6zHP8cO0qbtx8jLiYBBQX
16AyLQrffHsNj5/HIis5EX//5lcMLZvh9eweTqxAfZ3ynSBHZ9yT5acZAIYACCGhyLkGIBRCAHLr
lb8AXsc68vMKMDM5hG//5V8Rl1GCqNcvERefiezcDDx5Eo4XYREoKihFW10jEh++xh837+Dxq1hl
IiGZ67igKAuPXiRhRa1GWW4uIh/cQ3JJO5zWNdy68QiTiyuoq26G3bGF8vx8JEe8RGRcPCJiM7Cg
UqM4NRlR917hytXriMpthmZ5DDdv3MfoAiv4y4DX6z12EpxlABgCIISEIucZgJAIAcjVlr8Aezsu
bNt8t2A1l+cgv6oD6uVJZGXmYVm7ju2tTTgcTizNjGJ+RQ/T2iomZxeg165CrTPBsaXDxIyEAFzK
A4FsW1Ysz8xifcsB7HlgNKzD6XJje9um9DYYNGvYtJgwPTeLjS15TrJLmW99bWEOk7OLsGw7sLPj
hmFtBfp1y2GZydeLGAAxpYGcZwAYAiCEhBpnGYCQmQo40AAQ8rl5XwPAEAAhJBQ5ywCEzMOAaABI
KPG+BoA9AISQUOQ8AxByIQBCPjc0AISQr4GzDEDIhgB2dnaxs7Nz8OrXDtwU9ank3oH3YJKI9zUA
DAEQQkKRswxASIYADIZ1zC+uKO5E5mVXqdRYXV1TCruq1hxqTWuAXn90mV8arQE6nf7YcrVGj/UN
s/KZ2p+PRge9wXj4/qi0h5/JE+KUPNa0inQGEzY3rdBpdTBumKHR+F61muA8NNAZ1qHV6o4tl3xk
//Ia/Bn110qeAzA7t6g07KL3MQDsASCEhCLnGYCQCwFIJSpPYpMKtb29HZ2dHWhubsbyctDMgLt2
mK3uo8sO8Di3sLF19GEufhZm5rCxefQe73Wj6cj7QHQ6X6Xu3XtbXsGyNo83VfXY9gDqhTk43LuY
n56G/YSZBk0GPbbsO8GLDzmaM/lcqFbXsLvr+SADwNsACSGhxlkGICRDAGbzJgYHhxQDIN3+UhHL
ATQ2NmJXWWcXYwO9aG+sRmxcJqYXDfC4zJhaVMG7t4Phvh7UV1WisX0Mps0t2Ld0mFHp4N21oq0q
Bz//chO55a1YWVZhcrAbqYkJiIpNQcPAFLzYweTYAFb0BmViIrNmAdn5VbC57ZiamMbS/Dwa35Qg
K6sAxbklaG/rxOvnj/D7n1Gw2K2IfxmOoQUtxoYGsKg3QLM8h+HpGVQW5+FN8yj0q7MYGJmBfcuE
mek5VBTmIae0EVqtBmNjgzBatzA9Moh5lVG57XBhSR/wrZFPzYcaAIYACCGhyFkGQOkBCLUQgBiA
gYFBTE5OHhoAeTRra2urcqU83lWLwoIKVGVlIjwiHjlp6bj/+zX8cO03hIVHo6GuEZWpafjuu+sY
nJpA7L2r+OHXG4iKT0RJSTZu3nmI19GpiHr5BNd/+h3PwqKRnJqD9IJ8RMREoaggDTklBbj75x8o
q+lEbWOv9CmgOD0V92/fwtUrd/AyPBrldUNKeV9e+Qa/hxdjeaYHd+/dx/0Hj5GeUYq0jGg8D8tA
fmkOHj8NQ9iLSKSnZaKlrhtDzTX49Yfv8bcf/kRmXjFio6JQXJ6Lp08fIzY6Cdlp2Xjx4BYehuXB
7j38msgn5kMNAEMAhJBQ5Is0AP39A5ienlbeiwmQz1paWiCbTPc3IS+rCEVpmegcmcdwRy0e/Xkb
cSlZyM3OQkVpJYpSMhEdnojaujokhz9DQnoecrKzkZUeh4f3H+BlVCoKU1Jx99ZNxCekIDYiBak5
BUhOTUZ+Xioy8wvw/MkzVNW3ISMhGeVvihEfl460iHDcuHkXb6qbUVVUhMysEqSk56ClaxitDZUY
m13A65s/4o8HscjLTcHTpzHILcrHq5cRCAuLRmZ6JhprWpD9KgF3b9zHjYcvkJudh7i4WGX2whcv
ozAyvYzuljokvXqF+8/isbVzQkyBfBI+1ABIDwBDAISQUOMsAxCSIYCNDTPm5uaVBn9mZgZTU1NK
IaUHYE+Jw+9hbnIMy2qDcneAjN52bpsws6TCHryYGR/Fql5i+vvY2rLCumnEnEoLz44DUxOjMJrM
sG7bYdJqsabTw7Kux/LCPCZml5VtFuenoduwwLW7A6fVirWVBWWghGFjE7oVFdZNRmxsWOC0WzA8
OgmXdx8uux02m29cwepkN5IySmCw6FFakI/JJTVcLie27S5YDCpMzi7DvmVRQgDrG0asremwu2PH
/NwMNu1O7LjdcLtcMKyqsKYcB/mr+BgDoIQAaAAIISHEWQYgNAcB6gywO5zQaDQYHx9XQgEieWAQ
IZ+SDzUAEgLo7++nASCEhBTnGYCQuw1QDIBVmaefkL+WDzUA0gMgTpoGgBASSpxlAEIyBEADQD4X
NACEkK+JswxAyIYAaADI5+BDDQBDAISQUOQ8AzA8MsIeAEKEDzUA7AEghIQiZxkAhgAICYAGgBDy
NXGWAWAIgJAAPtQAMARACAlFzjMAIwwBEOLjQw0ApwImhIQi5xoAhgAI8fGhBoAPAyKEhCLnGQCG
AAg54GMMAJ8FQAgJNc4zAOwBIOSADzUADAEQQkKRcw0AxwAQ4uNDDQBDAISQUOQ8A8AQACEHfIwB
YAiAEBJqnGcAOA8AIQd8qAFgCIAQEoqcZwAYAiDkgA81AOwBIISEIucZAIYACDmABoAQ8jVxlgHg
VMCEBPChBoAhAEJIKHKWAVAeBjQ8zB4AQoQPNQDsASCEhCLnGQCGAAg54GMMAG8DJISEGmcZAIYA
CAngQw0AQwCEkFDkLAOg9AAwBECIjw81AAwBEEJCkXMNAEMAhPj4UAMgPQAMARBCQo2zDIA/BLC8
vEwDQMjHGACGAAghocZZBoA9AIQE8KEGQEIA/f397AEghIQU5xkA3gZIyAEfagCkB0CcNA0AISSU
OMsA8C4AQgKgASCEfE2cZQAYAiAkgA81AAwBEEJCkfMMAEMAhBzwoQaAPQCEkFDkLAPAEAAhAdAA
EEK+Js4yAAwBEBLAhxoAhgAIIaHIeQZgZGSEPQCECB9qADgPACEkFDnXADAEQIiPjzEAnAmQEBJq
nGcAGAIg5IAPNQB8FgAhJBQ5zwAwBEDIAR9qABgCIISEIjQAhLwjH2oApAeAIQBCSKhxngEYHBrC
wsICDQAhH2MAGAIghIQa5xkAzgNAyAEfagAYAiCEhCLnGYBhhgAI8fGhBoA9AISQUOQ8A8C7AAg5
gAaAEPI1cZYB4FTAhATwoQaAIQBCSChylgHgw4AICeBDDQB7AAghoch5BoAhAEIO+BgDwNsACSGh
xlkGgCEAQgL4UAPAEAAhJBQ5ywAwBEBIAB9qABgCIISEIucZAIYACDngYwwAQwCEkFDjLAPgDwEs
Ly/TABDyoQaAIQBCSChylgFgDwAhAXyoAZAegP7+fvYAEEJCivMMAMcAEHLAhxoA6QEQJ00DQAgJ
Jc4yALwLgJAAPsYAKCEAGgBCSAhxlgFgCICQAD7UADAEQAgJRc4zAAwBEHLAhxoAhgAIIaHIWQYg
ZEMADqczYG1C/hpW1RoaAELIV8NZBiAkQwBarR5Ly6swmTdh2dyCXr+uOBWd3gCt1gCt3gC9YR0G
eb+mgXpVB6vNAbPJpFTABuM6dDotNDpZX6fkJ9utG32fK9vKOlotNHoDDPLesK6sq9HoYTQYoJXt
D/KSz/QGX1rZlvoqpdcbMT0zD4/H+94GgCEAQkgocp4BGB4ZCa0eAHk1b+gQ+/wOfv/jDzx6lY/h
4X78+cdjdA9MISX+NR48eoV7D15gcnoFo519KMvOwrVrfyA5pwKZCbHIKKhAc20hfr8Tja6OdsS9
ikDY81foGp7FaH8n0tIy0dTSjLyMWMRkNWB6pAPXf3uOzq5uvLh3H40dbcgrqsCa2a58WU21ZWjv
60XJm1Ksb25hk/rqZLFswma3K/9Br9f7XgaAgwAJIaHIWQYgJEMAgkU9hcqmHmjnOvFP//t/Q0JW
Hl6FvUT461ikZWUgIiIeqalpyMvKRU1hBaJuPcFvdx4gKjYBmVm5yM6MQ2JaElLy6rG4OIvCjBw8
/uMGumY0WJ0ZRWNjM4qzo5Cal4/0pBwkxMThWXgWVGoVspKTkJH8Cq8TM7CmM8PtBdRzI3j14CXq
m7oOy0i+Xj7EADAEQAgJNc4yACEZAhA8O254lfp1H7XlxZhS6bA4OYi6lj7Y3R64XW5g34vVlSVY
HTvYNGhhMFtgtWzA5vLAYV2HfmMT+/t7SpfujsMBg04P2YN311cey7oGm45duG1mrK7q4XLvwOP1
Yn9vD+u6VeVK32lzYNfrK+fqzAqcLl+lT75u3tcAMARACAlFzjMAI6EWAiBfL/Ibb25uhpwsFsuR
/+T7GgBOBUwICUVoAA6w2ezKActAPurTSxpDiav7kd97Y2MDDodDaTRDSTs7O4cmQHhfA8CHARFC
QpHzDEBIhgA+BcvLq8pI780tK/UXSO7gmJ1bPHJVbTablbQs8yuQo8vervNWR1b3rRWw8DB9bLug
/Z2wTEyA9AYIH2IA+DhgQkioIXXWWQZgJBQHAWJ/D/MjPSivaYbjHF8gtwK+S2RerdYq93iTvw6Z
WMf/O/sNgLyXxlMkYzTmR3tRUlKCtv7Zw+1Wl1dO/d21ag2cbieWFpaw7Xq70v7evlgGbB004qfh
b/T9ZfCVY19pyD/UADAEQAgJRc41AKEYAvBsaxH/4jnqmnthMesxNDYGm9uN+bERLK3qMTszh6mJ
UXT39CMrKQkF5W0wWuywrJtPNQNiAFwyeJD8Zayo1GcYAFnuRUFKIsrr6pAUm40l1SLGZqdRUlSB
Ufl9R8axs2PDSN8gTNsuLE404OGLZFjtVqTFJqBjcArT4xPIT0lEWesE4LWivLQUfcNTmJsdw9ya
AdqVeUzOqLFtWsPYzCSSYuMwvLShlOmiDABDAISQUOQ8AxCaIYB9D+aHO5GTX4DXj+7g7z/8gLzi
asQ/eYD/+PZXhD2PQHx8MvrbuxHx7DUS4pJQUtkNh9WGE3qJFWgA/nrexQAUpcQiKiIS8QkpePrn
Nfz4y1U8fPIaSXI7ZkE2qqtq8Oj6Vfxy4xEq3mQhIqUQVqcD6dGRiIiMx8Pbf+KHb39H0+gKtAtj
yMvNRcTDJ/j57/+K6/ee49WzR3h47xXu/XoFV375Ed/8eAdz8ue8YAPAEAAhJNQ4ywCE7DwArm0T
qupKkZSVhdfPXiAmKQkluaWIuP0UP16/jarWPjRVFKCisBwpaWVYXJxDdW07TEYLewBCiPMNgAc1
FTWwOHfQWpKLx3fuITktA8kpmUhLS0BGQS5So9Lw5I8HuP3kJfKz4xERnwmb24WsuGgkpeQj8cUz
3Lz7GNXV9egeHMHE+CiaG5qR/PIR0oqrUJGVgQf3HyH8yRMkZ2YjPi4JY4u+rvqLMgAMARBCQpGz
DEBIPgzIj2ZlHosa6ardw9LKCly7e9AuL2JNv4FdL7BjM2FmdgHbDjc8u7twOhzY3jq7B2Bn53hZ
yKfjvDEAIof89nv7ytwP25tGLK6q4dzxwr6px+KqFvveXSzMzGLL7oJONQ+V1qjkYdu2wrZtg0al
xuaWBbq1Ndjdu9jdcStzN2xuaLBqtMC6YYRufRM7jk0srmlg3TLBZLEeKcPHGgD2ABBCQpHzDEBo
hgA+AXIXwPq6CdvbNuovkDzRMfguAJPJFPyzhAz+WwEFGgBCyNfAWQYgZEMAnwKrdRvqNa3ieqhP
rzWNDhsbvtv+/EgDazQalfkAQk3Sje88eArl+xoAhgAIIaHIWQZA6umQDQGQrxP57eUPKH/KUJGU
x+VyHZbxfQ0AewAIIaHIeQYgZEIAUukSEgpI4/6+BoC3ARJCQo2zDEDIhABkelgZgCXLKepzS06Q
9zEADAEQQkKRswyA0gMQCiEAIXBUNkV9bgVzlgFgCIAQEop8MQaAkFDmLAMgPQAMARBCQg2/AZAe
TRnnJJJ0SIUAvnbkWL9EnUbwel+bTuI8A8AQACEk1JA6S8bYyVV+V1eXorm5ObhcztAZBPi1Io2E
TH4j97/L65ckuTUu+I+wu7urLA9e92uS/FbSRRb8/zzLAEgIoL+/nz0AhJCQQuosGWMnjXxiYiLi
4uIwPT2t1Fshcxvg14ocp3S/CCfFluVpeIfLgmbIC5T/qwpefkQH6+wHLw/Y57vvz3clLI29NPp+
pIGUe+WP/3a+vPwE53eeAvM4SR97/CfJfwwnLZPjDLwtUDjLAEgPgDhpGgBCSCghdZa0QdILIHVU
b2+vkhYxBPCJkS/e32AqDYws0y8gLyMLbYMTh88t2PN4lLnx/Y3KcfZhd5z/HIPF+WXsnvC9mrQq
zC/rDt/vuBzwHFvtaAMsyJ0Z0sD5kYZR/ihyPB6XBVUF2Siva4Vj97D1hccj2x/L/Ez297zwet/u
9yRs9qMN8kkszS/B7X33fQdODe03DoL8P8U1B0IDQAj50vAbAP+dTdLwh9w8AF8r8sVLQ6IYgH1g
f2cbFXk56B0YRnvfKNb1S+geHEB8ZASah1XKNjOD3RiZUmFufASjY4uYHhlCV0c/pqdnMdTXiOb+
UQz1dKC1ewK2LT06enphsVvRW5eBBxG52MU+hjtb0To8Ace2Bs1tTWisL0diRhVWl2ZQV9uAzu5h
qJbn0DUgA9e06GjpgsW6e2hUzjIAvh6BPXRWl6KxpRttXX3QG7UYGOxBcW4q0oqalXU1c8OorWvG
gkoHu20bCzNTaGpuRHNHP8bH+jA0PYf56TE0NXciMTISNT1zynYLI30YHF/G4tQYhkbmMTs2gq6O
PkxOzWJ0oBmNvSMY6etGc8cIbNZ1dPZ0YWN7G8OtebgblgaHdx8Lo/0YmVDBqJ5C19gsrBYd6qtr
MTY+hf7+YYyO96OrswGvIlMxPTWB3r5JxYBID0ng7xbIWQaAIQBCSCgi8+sE3wEQaAAYAviEBBoA
OVqvTYv8wlo4rHrEvn6JGz/9gKu//oxvvv8T42vb2HVYkf7iPr69eh8vnz7A48dxePn4Hm7dfIHH
T56joq4M0S+e4HFYIopzc/DHDz/ip19/xZ0Hz1BenovYnBrYNnVIictGfmkOnoZF4E1lPh49eYKn
T14i/HUchjt7kZ2QiN9++B4/Xf8VYS/DcfXH6+geVytlPt8AyB9lF6X5JVi32lGWk4zbv17DlWu/
4Ju//4Sy9hlgx4jM5FQMtHUhKioXyytzuP3rDTx68ASvn77Ate/+A9d++wM37rxGaX42/vHNNQws
muB12ZAX8QR///kOXj17iIcPY/D66QP8eeMZHj9+jvLqUiREvMC9J7Eozs/DjR9/wo9Xr+H2vSfK
8Uenl2F3bxfpr+7hzq3n+P3Hf+CX327iybMIDHT1IysqBi8ePMYP3/wNP/50BWEJRSjJjMLV38Jh
sO4ovSCBv1sgZxkApQdgeFjpUpOHG8nnIun9Edftf09RFPWp5K+3RIHLght/vwFgCOATc6QHQOkC
8GKwoRS52Tl4/TIaMS9fIjkjG6nJKeif1mJbt4KoGw9wNyweOYmJeB4Wg9yEBNy+8xAJyRkoyE7E
7zduorpzEnPjfYh88gyxKel4U/EGqbHPEZddAee2EeGPnyE1vwhFhZlIy0hGUnIKoqKTkJWWitLc
ImSl5SD+VThiUzPRWNeIJ3/cRMvoslLm8w2A7/dUjXciRx6vG52I8OevEJ+QhOzcLLyp7QE8WyjL
SkJJUTWyEjIRG5WI58/jUNfYhv7ePuTFvUJSVg7yy9uxpprFs3uP0D2hhtO0hrhbj3D7eQxykpLx
7EUU8pKScPv2fcQnZaAwJxk3bt5CSeMIFmeGEfXkGWISU/CmsgIZCWGISinAzr4HjZlJePjoBeLC
XyIlrwxlRfkoys5HRmo+erp7kBT+HDmlxcjJLUFdUR7u3A2DbkueA/ARBmDIZwBsByedrLOwsKA8
+0Dey3dJURT1qST1zPLyMrRardLVL8uCG/7gHoBBhgA+HfJF+x8w8xYvVleWYJHvxeuCxmCE2+2A
dduufGox6rBu2YZt0wKr3QW7xYzNbQfgtiHq2V2ElTQrj8/d8+4BezvQ6HRKs2XUriqPzPXYTaiq
qIbRIvl5odXp4JXH3e54sLfrgEoet7u7B3h3oNHrsevxYN24fjgeIRD5AwUaABkhHzhls0GjgmbD
N8hRr9fB4XbBevBIXXn8rkpjgGfXgbVVLRyuHcU8SFnddgt0G2Z4DsyGy27FltU3897Wuh4G0xbs
W5vY2nbAsbUJi3zmcSHp1UM8yq2B23Nw/PseaHRaSIk2dGqYrb7v0GYxwerYwd6ODZp1ecLfHlZV
KuXR0cK2xQjTth1O+zY2TWaYN33H4Mc/aCaQswyAEgIYGPD1ADjsilFqaWlBamoqVCrVYdyNoijq
U0namqamJmRmZiq3+p1V7/gNwMjICHsAPhXyg/ivAP1dMVbpGna54LDbsG2zw+lwwGazw26zKZ87
nE44HTJK06F0J9uULh07tq1WmM0WuKRb+aB7R7qXZR/ymcPpy1MZeCj5O+zKExCVbuiDdZX9Kd3S
29hWtvV1FfnzUMp3UFZp/NfX148MzJPlcmeAcizKPn1l9ecROMjEZnco+StldDmVP5yvO9zq+8xh
PzwOOVb/8dsP8rTZ7cox+NZ1HB7/YfllW//xb/uP/+2+le9O+X7tvu/c6VT2oTTuDqfvcxkN6/Dl
bz04dtlejjvw7gfhLAOgzAMwMqIYADlm2b6oqEi57WZ1dfXME5GiKOoi5DcAMTExysyk0osZvI5f
hwaAIYBPi1T+0iAEP372Q2Q6uE89eHmw3mWdd1FwIyjIn+eijud99a7H/7EK7PXwc5YBUB4GNDSk
GAAxGfK55COTbkh3nLwPPgEpiqIuUtLWSEx/YmJCudgK/vzourwLgJB35jwDICEAOaHcLpdycokb
39lxK70Y8p6iKOpTyj/dr9RJvnv9j6/jl9vtUu5aYgiAkHfgLAMgIYCxsTEsLC5DpVJDtbpGURQV
wlJjYXEFY2Pjn98AWCybMBg3sL5hoqi/RusHClpuXBdtHBnsGPyfDTYAOp1OMQAut1v5L29ublEU
RYWsLJubSm+BhAvkbqXPZgCkop2ZXYBeb4ROb6CoTy+dHgaDEQbjupIO/EyWz84twGLZOvU/e5IB
kNibICfS55aM3fgrFbx/iqJOl/9W688r3wWOPBfgs44B8Hi8SpeEMtL7hMkNKOqi5b/PX+L0Vqtv
ikz/5BnyqtXpFZd82n9W0nISCf4xAOKkZdnOzo6yzP/ozb9Ksk8pu/8uDmUuAtvbOy/kTojg7+Go
ZBvf3SKH2xzMZ+D/zo5v41su8UY5boqiTpeYZTlXgx9A9ldLBlLLXV5Sn01NTX1+A7CiUp87apGi
Lkry5w+8ZVHeSyMu/0tZvqbRvpcB8PcAyOdyokueFotFaXRt23LLpO81eOKO87S15XuWhEyl7F+m
3Kp44rpbyoktJkC5Kvfuwet2YnN7Gx6v91hltKPM6AjsHqmgPMrcCFvbdnj3fNvIMjkuz+7u8TwO
JN9H8DKKoo5L7qCS88XpdCnnqFJnuF3KeS6S8y3wvV8SXpQBxv737h3f1O1v13Vhx+0+tt1JEhMi
9ZPUFWIAPmsIgAaA+qslDabfAMhrT0+PMnmGWq1WTpCPMQDyXvKXk8u0rod+w4LtTTMM6xvKSSw9
Xcr8CU6HMgeBnIxSDjmBlc8cbz/b3tzwjdJdW/f1KjgdMJvMh/M5iGQ+A2XOCIfjcL8ywZLDrENu
YhIiY1OwYvRNsuRjH16ZlXLPiZmZBWUSJT+7jnVkxEXjdVQ6ZlZ9x786M4TK+h7syLxLBzMlCtKF
6K/UaAAo6nzJuS4m3c+6ZgVT09PYdr2da2XbYsK283ibubvjhifgQWdOqwmzs7PYdh8s29+DyyXT
mZ+Nvw6TiwS5mJA82ANAXSr5DYCckGtra8jOzkZSUhIaGhqURlWj0b2XAQgMAfgNgDSWjQXxeBpf
jIaiWNyNyIdDusxtDmyajNAZTLBZN6E3rGNndwd6rRrrmzY4bL6ZD/f29zDeWYPnryIQn1AEnRiJ
LQNKcrLROjAH66YJa1odtsUw2KU73nZoAISRgVlUts8q6cbyYiQnpuDFqyeo7Z1Ad2U+njx8gmt/
PkdXZx0ePnuKgSUzvA4Dol6GIzY5C+VlJUhNj0V2YRZeR2WgtbEKafGJyMwpw+DgIIbHpg9DHjQA
FHW+Ag2A17WBhKhYlJXmIaewFd69XbgdJiS8iMKkxqTUIzKBmlLHOJ0YaG9EfccYXAePcW0ozUNs
bCyKK3rhdGxj26xGVkY+NBvb2N4yY92oh85gxu6OU5nl1SM9Ba5d5amn/p5KOW9lDAB7AKhLJb8B
UK7STSZoNBplwh65kv/YEIDfAOzte9FXX4K795/j5ZNHyMivQlbUY/x28xlev3yF8OhMDHa14PpP
15CcmY+0lJeISEjHq4fX8OPtlzDaPJjqrMKt+0+RVVCEwux4RKXEIuzla8TEpSM7JRGpsSlIzcxH
xZsKzKo3YJcZEQ8MwNTwNAqq+2E1bSAjIQWRjx7gp6u/Iyo6ASlh4fiXf/sbXicXIOLuH7j6+028
aZvE3s4GXj0Nx+SSGpXF2aioKsXdWzdx88+7uHM/DLNTc2gtzcW1W7cwvGBQrjr8FUlwZUdR1FEd
MQDOdUQ+f4n0pERkZ+Yj6vmfuHL9Gn777TFSUjIQ+fwZrv75G1Kz8vH84WOEP4vGo4dPkFPUomxf
k5uKsPA4lJaXozA7Bgk56XgVHofc3ALkpacjP6sIBTm5uH/7KsISshHx5D5S8tohzXygAWAIgLp0
CgwByPu3A98+fAyA3AYYaAD29z3oaqpBxJMXeBkegeiwaLy68wj/9Z//DclFzehurcSj35/iz6u/
479/fx3NLQ2IfXQHP/7jOzx9nYQ1ixujbZVIK2rBtnkFWakJyM5JxtVrf+La1T+QmJqL8YFpZCY+
xa3XqcrzHaxbByEAifnbzKjMzUZCTCoq67uxujCNvOx0dA2OozwpHQkZ2SgqrUBXawMycvKxvOGA
17mBnr5x5bj08z1ISIpDQ1s7Kqsa0dVSg4ToFHS01uJFXCzse4Bn11ex0QBQ1PkKNAAemxapqYXK
I9HD793Db7/8hleRUUjNKsSbynpkRLzCrXsHZuDRXXz74x0MT82gtLBM2b66IAe90wZo5geQn5eN
lKQY/HHzEW7cuIeG5l701FTi9x9/wR+/30R8cgbinj/Eo/AsOKTaOjAADAFQl1KBBsA/gM6vDzEA
J4UAXC4nVItzWF41wGzUYWxwBPWl5SipasDM4irUqyvoa+1EceEb9PX14Jd//Ff8GleIqaFO1HUN
K8820KoWsajSw7Prxlh3FcpqmzExPobR8Rl0N1WgorIJuTnxqOoaBfY8hyEA5fY8jy+6v3cQtz8o
+qnseT3Y2ZFz1Vc5yDCBk1iZG8X4oka5fddfscn3EXxrIEVRPp1kALw7diwurSnptYV5DPS2oWtk
AisrKiyv6rC1oUVDYwOW1wzorqtDe98IzBYLVCtqpR5aU6mw5ZQHwrnR0ViKzuEpTE9OYWVlBc1V
pahv6sWaWoOBrkaMLWkw3t6KzqEp5UFysr2US85bhgCoS6eLNgCBIQAZQyAjbOVklyctejxSCXiU
mL4f78EyPx7HNgYHh6A2vX0qoeQj23s9O8qgQf/Wst/9w7x2MDc/D5tzV5naU8ruP5H/SqSsYgiC
JWUJXvYxuuj8qLPF7/vjJN+f1A8iMQDyKg+Hk+V+f608Jv498dc9Ytbfd3Nf/bF/eNszQwDUpdOn
MAD+EIB8Ji5/eHhYMQWyXNLyKpJR/fIqn/mXj46NK4/vnJmaVJbJOuPj48qrrBeYPsxPSY8rJ7DS
K3CQnzh6kSyX7j15PS0t6wWnJycnMTMzo8ifls8C08H5Se+HlO+kcp/2PRwe++jo4XanpU/6Hvx5
B+f3LnmfV9az8g7MT5a/a97B+zkp75PyC877pPzOy/u0sgbnfdJ++Pu9X7kD85ZzRqYJVy4GDnoD
pH6Qu41k8PHnkuxfxjyJSZFz+rNOBUwDQP3VumgDEBgCkJNdpVIptxbKchlgKCecvIrkBPS/+k9E
/4n5Lung/E5Ky6s8hti/D3+FE5iWzwPT/vxPSmsPyivl8Jfdn9Zo1hQDpNW+HUjpH1Sp1/vSOt3b
5fJ6NO3Lx5eHVsnnePpofoH7OZ7f6Xkf3c/Rsp6UPp7f2/Tx/I6W9aT8PlXeslzei076PwSm/f8D
f9r/nwr+f/l/45PyOC19Wn7+V//58K7fw9nfyfHvITgdnMe75HcRecvxymt3dzeWl5eVOsIfCvC/
+nsGPpekHFKfffapgGkAqL9aF20A5GSXKwR/CEDicOKqBVnvS5Ucj7zabHblNkPfbIIyWPL90tZj
6befn5YOzuPs/M7POziP09Kn5/cp8vanP+x7CEwr3cr7x3/DUJAgxljONf8slXKu+V9PSwev+77p
4Pw+dd4i6Vr31xPSGyD1gL/BDR4U+Lkl5ZReChoA6lLpog2AXNnIyS7LpKIT1y9d5LK+crLt+s+B
g/dBknNAxgoEL//cki7CjQ0TZmbmlbkRNFo9FYKaX1iGWq1R/n/Bv+HnljR8cp7JDHj+aav9kgmr
ZHSqzHAX/Nlp8sW8z9rGfXCqeQ+Xyfknj+Y+vu67SY7h9P29ldQFEv4TU+C/upaLgVA1APJ/CYln
AdAAUH+lPoUB8IcApAdAQgDiqpUKWWJ/bjumRoYwPruCPewdDq6S/77kaZPnEThcStob8DAf2Vby
kEGDsq7Mvifb7sk0v17fevK5sv4nMBBSRnk4kslkOfJdkNBC/nOhagDk/yrnmL9Rkf+4/zyyaFYx
OjOn3Jt+PrLNPtaWZjEyMX84KPYYe7uYnxzH3Ir+cJHL4YB79+jTPd8H6QE7bayd/3j8xyS/hcy3
L+9lLECo9wAwBEBdOl20AQgMAciVgLh+GdSnNOj7wMbKKF48jUB2ejJKK5uxbtrE5tY2HLYtbJjN
6G6pR6fM7rdlhc3pVhpzl9P3gB2jXgeL1Qn7lgXmTZuy3LixDpPFKpP6YnPTgh2PB9ZNqzI/ePBJ
/jESA2A0rsNo3DjyXZDQQkIAoWwA5LySq2JByihnkWVtDinxqcjNLcHMsg42uwM2+7bSsDusW7Ca
daipacUO9pSHWglepxExryKRnpKM+o5ReHadcO7sYs+zp8xwt7vrhVU7g5iIaMTH5ShTaJs3N9HT
VIWy+kG43E7oDUa4PMrN8PB6d9HeWI9lgw1ul10xIjbbFsybW3Dt7Coz6m3ZjKgsr4Zm3QqbzYqm
ukYYtneU2ffEUgSHOiQE4DcAMjAweAxAKEnKyBAAdel00QbgrBCAGIC12SHUds4AO3rc+/0BEuKj
8eDuU8SEpyA2JRGv4lLR2dSAB79fx61H0aisrEDXwARU0314fPcBsvJr0FtXgJ9/voHwiFjcf/wE
L2MykJcahx+vfI+c2h4Y1vRw7XqOPNznY0UD8GXwpRkAYbitFh1jvvvgG4tz8OzBI1z59SdkVbSi
Ljse3357BX8+jEZFQQq+u3IFjSNq7O+so7SqW9kmKywMt/78GXdeRKGsvBKlJeUYW7HAuTGHx/cf
I6u0Em9KchCfHofo+DhEx6SjIDsD+WnZSEnNQVVVDZbW1pAZF4Gs3HzcvPELHryIRFhYGJ6ERSI+
IRUxkUlIzk1Cam4FOivzcOWHX/Dj9UcoLy3A1V++Q2pFj1IWMR8nGQCGAGgAqBDUpzQAwSEAuUrQ
zw8iJj4Xfa0VePzwBRKiY3H/96v47WYkqqrf4PaDR4h+GoM/f76BV/EpuP/kJiZ0dkx3N6CxfQCV
BWl4dfcVfvnpJ1x/EInyskrk5xXg1799izsPHqO8qR9Ou+8JYcEn+ceIBuDL4Es0AGvT/UjPKsNw
dz+Sk3JRlJqIW3ceIi01A/EPX+LbH39GVGoBEp4+wL3HL9A6vIz9XTPiY9PR292OhKeP8Mcv1xGX
WY7W6mxcvRsG1z5gVo0hJbMSbo8blYUZKCkvwJ3b93D71n1ExqRgtHcCbVU5uP7oBXY8e+hqrEFS
eDhu3n6AsLBwpGUWoaqyCjFhzxGZUIySwjTce/waiU+jcPWXX3HrRRKyosPx5817KKztUeqE0wwA
QwA0AFQI6qINQHAIQHoA/CEAmczHvb2BysICVDd2Qmc0YnpwBJ0t9Yh+FYassjrlSmRmaAw15dVo
a29AfGamMtWuWa+BRmfA2qoKQ+2dqKxuwMjUPFSqVSwsqqBemkdTUwNWDCboVBo42QNwKfkSDIC/
UVG6y+U82vdioqsdZWU1mJhdVR6C1dnWiIU1I0ZbW9HU2YOhoWGsLM2hqbUNJqeMl/Ggq6EKhaW1
sO/sYHqwHf1zGrit65icWVa69Z3bFqxq1pV9mdSjqGpowsqqCrNzKixNDaD8TRMaa4tQ0NChrLO2
MIGZWZmJrx3Ds8tYU69Bq9NharANTx49R8fgKLQ6Pca7elDX3I7+gQEsLy2is70Jy+s25RxXjumg
PggcAyAXBaEcApAyyzwe7AGgLpUu2gAEzwNw7C6Ag2l5Bbla8LO1dfxEs5l0WDNYlIF/3oOKxb9f
P773Acv2vPAGPJ73ouQfBKjXG31XOlRIamvLCpVKHZIGQBo+OV9kdLzSI+afKS/gPHgn9mXbk7fx
nwmSr39mPEmfhk6zCqvTV45T2duFw3XG5wccHo/XN6BX6hOZCVTSDAHQAFAhqE9hAGTAjywLDgEE
n3SBkkY7+IrdKzXYOdv9VfJdvVkxM7uApWUVlpdXqRDU7NwCDIZ1pREK/g1DQdL4iQEInGTqc0pM
rU77drKiE6VM6vN2Aq53kUyIJDP/yTFLXcEQAA0AFYK6aAMgIQA52eXz4BBA8En3pcl3q6Hv9kMq
NOW7pVQe5nT89wsVhWID+CnkP06pHxgCoAGgQlAXbQBOCgF8LQZAjs9s2YTJZKZCWE6nb8Ka4N+P
+jyiAaABoEJUF20ApAdAQgDy+YkhgIAn/wWfhKEsubJUZgKcXYBWZ4COCkktLK6E7CDAyyqGAGgA
qBDVpzAAwSGAw0GAMkufy4ax/l4MTSzAezBwSwb5KYOiZLCfVwb7HQwmki7dgFHF3l2fgdjf21dO
Ut+2HuXuguDxAxct/yBAzgQY2oTyTICXVfJbcBAgDQAVgrpoA3BWCEAmAlpfHkHY8yhkpSWhe2Qe
tm0LHLtebG4YsW13Y3Ndi1WdEdZNA3oHRqDR6mDY0KKhuhJtfRMwmU3Q6LRw77qwurICy7YT25tb
cLp3PqkJ4G2AXwahfBvgZRVDADQAVIjqog1AYA9AcAjAPxNgXdcssGtC+J838fOvP+J5VAqe3r2N
mNgc5GeloyyvCC8ePsbdB48RFpaI5Mxo/HztBpKzipCVloDkzAS8iojEy8cvkFvcAIN+3TdtsPQQ
nHByX4RoAL4MaABCT1IXMARAA0CFoD6lAQgOASgzAS4MIiomA+1NlXh19w5u/nkHqRm5iH/xFNeu
/Y70nDL01dcgMSkHGXERePwiDSUlmXjyPAppSUl48uwVysvz8OsfjzE2MYGignKYrE642ANAaABC
UgwB0ABQIaqLNgDBIYDAhwEpMwHazKgrL0VtSx92d13o72zGzKoeY50dmFxYwURfK2rr27GyZsDi
ZB+eP3mO9pFJrC5MoH9oGpqVcdQ3t2BJrcXG+gbW1tRYW9GwB4Ao0ACEnuTc58OAaACoENRFG4Cz
QgDKyRbwKFL/iXZkJr8A9jw7sDt3jix7u6Y8wcw349jevjz97PhJfZHyDwKUkeYyUFEGJ1KhJ/mv
hupMgJdVco4yBEADQIWgPoUB8N8GGBwCCD7pztWu3BUQGpO6SKUgD3GZnVvkTIAhLPl9pJcmVGcC
vIxiCIAGgApRXbQBCAwBSA+AnPTz8/NfxRWZ/9ZDuU0xtLSnlE0q1ssu+R5Ewb8d9fkk5wxDADQA
VAjqog3ASSGAr8UAyPFtmMxYX9/A+ropZCQTFElvSyhWrBQldQFDADQAVAjqUxiA80IAfoJPwmAd
xvUPZg/c9b+esK6cO/5wgfIQIbzd30VUONKlLA3/7OwC9PJUwBDS/PwSdHqD0hvgL2/gVXHwsXys
5LcMln8/vu9evn5/WXyTPJ02RsO/+kn/B/92HuUJc0ev6s/KkwotyW8lV9dfQghATAoNAHVpdNEG
4LwQgPIfnxlFz9Akdjy+7aRCkNyU7ux9eeSv/zG/UGb6c9ktmFtUwe1yYGlpGTvKZr5ZAP0zBm5v
WbBh3lLysm4YsbCy5ius0kDtwe2Whsv33jfD4D725QmEnl143qFC8t8FEIozAcpTCuU57fL9+UMB
8ruI5DeUsr9toA828jfQB93mwcd7mmRdMXTNzc1oa2tTXsXwyWeyj02jGu3tbVjSbvoGbHp3lMGT
Dtfb79/fTe/x7GJds4S2tlYMTy34iiXHoBRyH6b1DciYUduWGeYtu/K5bCO/p3nDBLvLfaIZpEJL
/h6AUA8BsAeAunS6aAMgPQAjIyPK58EGQNr7Te0sop89R2VdB8ybZuiM69jHHpbmZqA1mpQrWeOG
EWazFiUFxVjb9MCpH8f3P93GxGgb/vHDDaytm6DXGrFlc8C+vQ33rhdzg62oahmFbVODl7fuoaRp
CHabBYszI8gvKMP03DLWdFqsrKqxaXPCub0Bw+Y2HNvb2LLaz62UQvk2QLPZohgAaRjld+zs7ERT
UxNaWlrQ0NCAwcFB5fikYrNollGYl4vxed3B1vuKOTrv+EWyvTzKtr6+HmazhELWlf+M7EceASt0
VBchMiYWqRmV0K3roNMtIiM5FcPzWhi1K5hfXoXN5YbLboVnz4vq3DSk5lVgbGoGq8uL0Bo3YTNv
wLhhQEleHjonljDY2Yi2vimYzetw78t/aAJR0anQWd3K9NHB5aRCS1IXcAwADQAVgrpoAyA9ADLt
pyyTEIB0qflDANKF73ZsorWiEMWV1ciIeYq//fQLYuJTUJhTgIKUVDx/9AK3fvsBP129gv/44RaW
LTtwbizj5eOniIp4gYjYbLSWZ+Lb7/5EUmo8Hj1NxKZrFwvD7WgdXIJFPYB//W/fIS83F9ev/4hv
vvsR91/EICUuFnfvP8TDJy+RkpaFRze+x/c3nmJqUQfL5va5V8FfggEQ5PsWA+DvgZHKVsyANNjS
2NflJiI2IQ/zy1oszIygs70OYREp2Pbg3J4Q362QBnR0dChp+c/Ia39/v1K5C52Vubj/5CXKqypQ
mB2P2PQEPH32GjGxScjJzER+ahZSMrJQXFYFh2cPtXnJiE0vQk1pIcKevUBqZim664rx/bc/49aD
cMSmpuB1fALiwp7hhyvf41lkPIpyY3DnVTL0tl3s0QCEvBgCoAGgQlSfwgAEhgAC5wGQ//fmxhpa
OhsQERWJaz/8gldRcYgIj0BNdQvK0jJRVFKByHt/IjI2Ds9fxkNtcWNTM4vMxFRkpiQiKSUDkXfC
8Mv1u7j/+CGu/RmGLacXS0PNiE3OR1VpBm49jkdtcS5u3riD6Lh4pKRk4NGDJ0jLLkZlRSVSosPx
25WriEjIxuKaCQ6Hr6EMrhQC9SUZgIGBAeV45PeTsktXvVy5y29gNa6gtLAA0ZGR+PHvf8M/vv0O
917nYHdfDMDx4w7+DvwGwN/DI6+BBqC1qhStI2o4NhaQnZ6ItPRE/HnzIe7cfoi8vBKMDs4gKfY+
ogoblfUrslOQXd6Ektx0NHWNoKkiFy9uvsD1a9fxtx8eoqSsDE+fv8C9X3/Ho6cvERMTg9zsVETG
pUBr3WEPwBcg+Y9wECANABWCumgDcFYIQHoAXM4ttDZWoXt8EdsmDdp6+mGxWtDRUIOe/nEl1qtd
HEfvxDTmZyawqrfA7djCmnZdGQim12oxPTSE5uY2jMwvQ6dWY93igMtqRH1lJaoamjE1uwKHYxsj
/Z2YXlnB1MggxqfnoV7TQKvRwGBcx+L0EPqmFmA2bmB9Y+uL7gGwWN4aAKnApMtfkIpWaG1txcbG
Bvb2PBjoa0JydiYiX0fj9fPnyMzPQVJKPixOz7k9APIdyX9Ewgqrq6uKtFqt8l5e5Tde1+uwYZFx
Bx5MDbWid3QaatUKNDoDhrtb0NMzgMzsZEyo15V4v2ZxClVVVahtbIN+YxMbRgNmh0fQ2t6D4YEB
1Da2YkVrwIZeg96eTmjNmxjpqkd73wjcuzLe4Xg5qdCS1AUMAdAAUCGoizYAwSGA43cB+Gf/g/Jw
IGHP+3Z2QGk4AtmX0d/yCGBltj8ZAHawkf9zZTDgLnYPBhT68Z/Egci2In95BWUQ4TtMNuSfCVCj
1QcMYgsNiaFZ0/pi+hKXlwZZKlyRmLHGxkbl95V1rSY9xsansLMPGDQr0MhthAYdrA65jfD4cQdL
8pBeHekF6O7uVsINYvD8lfrenszQ6EsHcvi77bkUMyAD/WSdwF9zz+t7/PMxlNkeD5J7b/8rwWWj
QlNyvnEiIBoAKgT1KQ1AcAgg+KT7kqQ0ntZtzM0vhdxMgHPzi7BYNpUyilHxh2Hk8aZyVSM9BPKZ
7zh8Dahc7ctPKA2qr3fm+DGfpmATJgSvc6pkv7K/4OXUVyv5vzAEQANAhaAu2gAEhgCCHwYUfNJ9
aXpbMcitiqEjQcom37+UM7CHQ7iIaXGlwcb+bmgLHng9x8tOfV7J/1EuCkI5BCBlFMPMHgDqUumi
DUDw0wCPhwC+XMnxyGRA0uXuGw8QOnI6XUoZ/b0ADodDkfTCBM4D4Dlhoh5/78BpksZf7r9vnNtC
Wr8JGYPm0FO/CTnDZmza3fDQBISUGAKgAaBCVJ/CAJwXAvBztBvY30D58jqpi/h4xeE7n6Q72/d6
wjYez+EMef68A/M7nufJkkZUGv+5uUUYjBvKYMBQ0cLC8uE8ANLoS2xebv2TSXrknn3pkZHjlIpt
y7CK0uIiTC0ZDn4F3yx+Z4UA9vd3MbC6jaR+Cww2D4y23ePallcPtvcA2y4Clh3VeuD28rl9DzLF
j83zdhuzax8mh+fE7U/Tht2D1iU70gfNSm9A8DFQn08MAdAAUCGqizYAwSEA6QF4GwKQp/t5MdnX
hda+ITh3fdvJMkHi0TaLCdOz83AdNO4yMMzfoS0NnDyKV5BG3+O2YWp6FnanE/Ozs9j2TRGoDCr0
D+6zb29CbzQpDZx904SZucWD/A5mCHS5fTPUHcxE6FVGJvoaxcArY/9dAKE8E6AglawM0JOyixmQ
30QGAR6ZByA+B7NLWqiWpzHQ14LI2AylAT7JQImka71mZgu9q46DPfq+o7eSb9SXnurrxMDk7JHy
nc4+sLONvrZWjEyrDpdum02wO9xH1nzL230Fl8G160Vyvwk4GIRIhYYYAqABoEJUF20ATgoB+A2A
aG6wHYnJOaipaoJWb8CaTg+ny47a8lyU17UiM+IVnrxMg3bDhIWZSejWLVjXaqBamERmdim2nHao
1Gq494B9hwY//3ANg6O9+P4fVzC+pINWrcGGZRvWrS1sO3agWxhG4ZsOuJ0mxD96iKS8Bli3N6Ba
mkJOVj6GJmaxvLqK+aUlGExWuO0mrBrW4bDbYDFbDyurUL4N8Kx5AOQ1cB6ALf0iSgoKkBAXhyvf
foO/f/sd7r7KUu4KOMsA1M9toXPFNx2v5BMsYby7CWkZRWhoaMPcohqGdQM0RiM8cvumWo3p4W4U
V3XA7dqCZl0MCaCfG0BUZBziY7OVWQKX1Go0VBShvHEUWxYDZmbmYbY54d1xwu50Hdvv4f7392B1
eZA6QAMQapLfR+qEUDcADAFQl04XbQACHwYUHAKQK7X6kgJMaJzK+iVxD/GPn3/B/QfPcP3aNUQn
puLXH68gMiELSfFxyM3IQVf7IIoTXuFf/uUb3HkWh5zEV/j3f3yLyt5F7Hu3EP/yJV6Hv8CL8GS0
1Zbh+39cQ3xKEm7dfg6NxYX1pRFUNo/BY1vBP/7170hNy8Ht6z/iHz/8hJsPwpGWlIi7dx/gwZMX
iE/OxLNbv+CbX/5A34QKZtOXZwAC5wGQcgtiAHzzAOxisL8FqblZePXiFV4+eYr0nEwkJudj03X6
PADnGwDfVXhFQQG0vp8WKa8j8ODmb/jHL7+gqqEdcU/v4p//7XvEJOci4fkNfPPzDcwZHNhWj+LO
rUcoqmtAWVEmUrKTEBYegdcRCchKT0dlQQmSElORm1+EadX6KfunAQhlMQRAA0CFqD6FAfA/Dvik
HoDZgTYkpRSgubYJL/68gdcxMQiPSkXFm0pkJCbi6YtoVFRV4emDR6isqEdTcTnCbz7G97/8iojE
bCS+eIyHz16ha2INew4D8jOykZeehqSMHLy+/RK/XbuDB0+f4dr1+1CbnLCsjuL16yTUVebjxp1X
aKyuwKMbNxGXkoykpDS8ePocSekFqKmuQW56Mv746SpexSRjYkGL7YBnBHwpBsBoNCrzAMjtf1Kh
Sddr4DwAm+saDAyNwuXdh251ASqDEQbNGrbspz9O+HwD4Pv9x7oakZ5dgYaSImQXVKMkOQrPo2KQ
mZCJsD8f4ttf/lAa8oiHd/AqOgWqDSeMi0MoquxRuvArC9OQU5CNRw+f4sGD58rv09kyhJaqTPz5
MhYe5SFRx/dNAxDakt+HgwBpAKgQ1EUbgLNCAL4xAB6M93SgrXsUlnUN+gYHsarfwLp+FROjo1hU
rUGnN8K8oUd3axOm59WYHRpE/+iEcjeBVqNCT/8AzI5deFw2aHUyoxxg3ljH8vQMujq6MDq/rMwo
pzduwbOzje6WBtQ3tmJ6bgUOpxMLk4OYXFZhaWYCU7OL0Gr1yhS3xnUztCuz6B2bhsVsgdFgPhwH
4DcA6+umI99FKCBzAPifBijl1Gg0igmTxl96YyT+7z8O35P2DuYBkEpOGlB5Qt8p3f8iZQzA7Flj
AN7G4Se6O9HbPwrTph0ehwmDI6PY3NrGRG8vpufnoVapYNQuYWjK95/wOLdhsViVXLeN8+gfHsOm
xQSj0QzDyjS6eobQUFOA5qHpg10H7/OtOAYgNCV1AccA0ABQIaiLNgBnhQB8J9vbc+Dto2n93cg+
fFd1/vf+lXz4l3qVBsv3aFipUPxl8CONmm+Gv6MzAvpP7kACryr9+B41fHQQoMwEuLamO7hjIXSk
1xuxptEd3u0Q/F187DwAMqq+T7kLwIx1GXFv2zmubXndhX0fcHiBTacXZuc+nPIESKcXYh3sHsC6
45PTC2U7Ge2/6fIq21vcB9u69mF172FrF8r2C2oDDNue4/sMkNm+g/YlGzIGTbwLIMQkdQFDADQA
VAjqUxiA4BDA1zAPgFQK29s2zC8sY3llNaQ0v7Ck/EaBdy1cpOSWzF2ZB2DWgtRODdJ7tH+psgYM
yOw9vvyIujTI7DfAYpN5AEKvgbnMYgiABoAKUV20AQgOAXxNMwH6ehp8txeGkuS2x0/d6PlmAvSE
tjgTYEiKIQAaACpEddEGILAH4OQQAEVRl0kMAdAAUCGqT2kApAdATnrpAfD9v48/ye5LkVRawcso
ijpfglxdMwRAA0CFmC7aAJwUApDuP8lLnkon+5DXwLS8fkw6OL9Qzjs4j4/Nj3mfnQ7O72PzDs7j
Y/O7DHlL3dLV1RXyPQBy6yx7AKhLJTlBL9IABPYAyFS08nz6vr4+DA0NKRPUyGfyKu9PSg8PDytT
CUtaXgPT8pk/j8D8zso7ML/gvP35nZf3u5Q1OO+T9hOcd3B+75r3u5Q7OL/gvP3p08oq6Xf9HoLz
Pu97eJ9yf+z3cFa5z8r7pP0E5x2c37vmfRHl9qdPK6uk3zU/SZ9W1tPyPq3cwXn785PZKWU2SgkL
hqoBYAiAunT6FAbAfxug5CGfy0nvfzqd7Oe89Hk6bbvT0u+j0/I4Lf0+Oi2P09Lvo9PyeJf0eTpt
u9PS76PT8viU+X0Neb/Pfk7b7n3yOE2n5RecljpA6pdQNQAMAVCXUhdtACQEMDMzc7iurPeuClz/
tPSH6rT8PjTv0/I4Lb/Tlp+n0/L+0PwCdVp+H5r3aXl8aH6BOi2/D837tDxOy++05efptLw/NL9A
nZbfh+Z9Wh4fml+wQh0ZpzA/P08DQF0eXaQBECctU9GWlZUpblp6AqQrUGJrgWl5lfcnpWW8gHTF
SVpeA9Py2Un5nZV3YH7BefvzOy/vdylrcN4n7Sc47+D83jXvdyl3cH7BefvTp5VV0u/6PQTnfd73
8D7l/tjv4axyn5X3SfsJzjs4v3fN+yLK7U+fVlZJv2t+kj6trKflfVq5g/M+6XuQkICkRZIOztuf
n3+7wLS/rLJdYDowP386MD//fk7LW5bLOAUZsyQ9FAINAPXV6yINgORhtVqh1WqV6WjX1tYUvU9a
Xt8lHbzdu6SD8zgtHbzdu6SD8/jY/D5l3sF5nJYO3u5d0sF5nJYO3u5d0sF5nJYO3u5d0sF5fGx+
nzLv4DxOSwdv9y7p4DxOSwdv9y7p4DxOSwdv9y7p4DzeNz+1Wq30XsqYJRm8LNAAUF+9LtIASNeZ
xPiC42sSGnif9Hk6bbvT0u+j0/I4Lf0+Oi2P09Lvo9PyeJf0eTptu9PS76PT8viU+X0Neb/Pfk7b
7n3yOE2n5feheZ+Wx2np99FpefjT8iqNv0ydLdAAUF+9LsIAEELI18hJ9RsNAPXV6GMNgKznH+VL
URT1tUjuYJD6LRgaAOqr0ccaAH+3v3SdURRFfS2Ses1/R0AgNADUV6OPNQCEEHKZoAGgvhrRABBC
yLtDA0B9NbpIA7C/68DyyhqOf3KUXY/vrgFCCPnSoAGgvhpdhAGQ22a8e3vwWNeQnVMBad71y6Po
m5qHx72B5rY2aE1mTIx0oKNf5iQfQ29nBxbWzDBpJtHUPQiHPNJ9b8+XF0VRVAjopAsdGgDqq9HH
GgBJK+va7djdVKO0sguAA2W5ycgsyMTrmFiUVxTh0cOnqKotQWR4BG78cR9JKVlIjIxCVn4mUjOy
MbayCbfbpeQn+6UoivqckknNRMHQAFBfjS7CAPjTe851RIeFo+RNOTLTYpFZUIic3FykJcfjaVgE
yoqz8ODhI9x7FIVZlRaN5fnIzErHy5eRGFFtHtkHIYR8bqR+C4YGgPpqdBEGwD8ToKBfXcTk7CI2
1jXQGDdhmB3A36/+hpaxeYQ/uoGwsjbYbXbs7nrg8XpRnZ2Abx68hsnhm32LEEJCAanjaACor1oX
bQCC2fN44NnzreveOf7/9+zsBC8ihJDPDg0A9dXrIg2ALHO7g+bg3t1VJtPY2dnFrseD3Z2jzwKX
noBQfD44RVFfr47VUwHL9w7qNhoA6qvXRRqAVbUG8wvLyn+YoigqVKVaXTu2TLSw6Ku/BBoA6qvX
RRuArS2rsh1FUVSoSq72/Wmp++x2X1rqMzEHAg0A9dXrIg2Aek0Ls9lybB8URVGhJJnnX17lNj9/
wy/vpQ6UCxmBBoD66kUDQFHUZZMYAGn8pc5rbGzE3NzcYR1IA0BdGtEAUBR12SQGQOq8rq4uRERE
IDs7GwaDAVbrNg0AdXlEA0BR1GWTvwdgfHwcfX19irRarbKMBoC6NKIBoCjqssk/BsDhcMDlcinv
pS5jCIC6VKIBoCjqsslvAIJFA0BdKtEAUBR12UQDQFE0ABRFXULRAFAUDQBFUZdQNAAURQNAUdQl
FA0ARdEAUBR1CUUDQFE0ABRFXULRAFAUDQBFUZdQNAAURQNAUdQlFA0ARdEAUBR1CUUDQFE0ABRF
XULRAFAUDQBFUZdQNAAURQNAUdQlFA0ARdEAUBR1CUUDQFE0ABRFXULRAFAUDQBFUZdQNAAURQNA
UdQlFA0ARdEAUBR1CUUDQFE0ABRFXULRAFAUDQBFUZdQNAAURQNAUdQlFA0ARdEAUBR1CUUDQFE0
ABRFXULRAFAUDQBFUZdQNAAURQNAUdQlFA0ARdEAUBR1CUUDQFE0ABRFXULRAFAUDQBFUZdQNAAU
RQNAUdQlFA0ARdEAUBR1CUUDQFE0ABRFXULRAFAUDQBFUZdQNAAURQNAUdQlFA0ARdEAUBR1CUUD
QFE0ABRFXULRAFAUDQBFUZdQNAAURQNAUdQlFA0ARdEAUBR1CUUDQFE0ABRFXULRAFAUDQBFUZdQ
NAAURQNAUdQlFA0ARdEAUBR1CUUDQFE0ABRFXULRAFAUDQBFUZdQNAAURQNAUdQlFA0ARdEAUBR1
CUUDQFE0ABRFXULRAFAUDQBFUZdQNAAURQNAUdQlFA0ARdEAUBR1CUUDQFE0ABRFXULRAFAUDQBF
UZdQNAAURQNAUdQlFA0ARdEAUBR1CUUDQFE0ABRFXULRAFAUDQBFUZdQNAAURQNAUdQlFA0ARdEA
UBR1CUUDQFE0ABRFXULRAFAUDQBFUZdQNAAURQNAUdQlFA0ARdEAUBR1CUUDQFE0ABRFXULRAFAU
DQBFUZdQNAAURQNAUdQlFA0ARdEAUBR1CUUDQFE0ABRFXULRAFAUDQBFUZdQNAAURQNAUdQlFA0A
RdEAUBR1CUUDQFE0ABRFXULRAFAUDQBFUZdQNAAURQNAUdQlFA0ARdEAUBR1CUUDQFE0ABRFXULR
AFBUkAGQ93JiiBwOBw0ARVFfpfwGQOo9f51ntVppAKjLJb8BkBNAr9djdHRU0fT0tHJy0ABQFPW1
yd/gz8zMKPXdyMiIUv/JMhoA6tLIbwBcLpdyAmRlZSEyMhItLS3KsjWNjgaAoqivSmIA5AKnvb1d
qe8yMzOh0+mU+owGgLo0CgwBiOTKv7q6GiaTSQkDsAeAoqivTWIApO4ym81KfTc1NaXUdwwBUJdK
wYMA5f8okq4wjgGgKOprlG8MwKZSz/nrPFn+2Q3AwuLy4WAEivrUslgssFp9J4CkpbH3nwiyXAyp
xbJ56n820ADIuhsbpmP7oCiKCiX5L3hEvvrOV+dJj8DSyqpSn/3lBkBeVatrSkW6uqqhqL9Iawc6
ulz+i4uLK8pYgNP+s4EGwGjcwOKS6lg+FEVRoSSp24KXiZaWVdAbjIft8V9iAAj5kgg2AP40IYR8
TZzUPl+oAZBuB4lHuN1uigp5SW+A/Gf9jb50n8ngmeD1KIqivmRJuyx1XTAXagB2dnaUCpSivhTJ
ycH/L0VRX7ukfgvmQg0AIYQQQr4MaAAIIYSQSwgNACGEEHIJ+WADYHXSABBCCCFfKh9kAKbXtrFk
sCsbUxRFURT15WleZ8O80f1uBiAmNqHUvAssGN2YN7gV50BRFEVR1JcnactXLPuYXjGebwAeP35W
v2rYUtwCRVEURVFftqaXjRgYnT3fABBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBDyFfL/B5nSI6Vi32UXAAAAAElFTkSuQmCC</Preview>
  <Form>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
z9JOf23vTgU9h+5FHX388/Dn/wOjrYMvg/AAAA==</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$buttonRefreshDefaultPolicy_Click={
	
	$policy = Get-DefaultAppProtectionPolicy
	if ($policy)
	{
		$details = "IsEnabled: $($policy.isEnabled)`r`n" +
		"Registered App Restrictions:" + "`r`n" + ($policy.applicationRestrictions.PasswordCredentials | Format-Table | Out-String) + "`r`n" +
		"Enterprise App Restrictions:" + "`r`n" + ($policy.ServicePrincipalRestrictions.PasswordCredentials | Format-Table | Out-String)
		$textboxDefaultPolicyDetails.Text = $details
	}
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>