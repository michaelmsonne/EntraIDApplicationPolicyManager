<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGbwSURBVHhe7b1nbyPboqZ3Pxr+HQOMP9mGxx/G
BmzYP8GAAc94PDfMnXvuPufss2P33p12R3W3OkitnHPOOeecc6Qyc5BISqRIBZLSa6yiqJbYSlRT
akl8H+EBS8WqVUWywltrVfi7vyOEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhPzd3/3d
g//u3/7b0rfBH0ojo+JKw8JjKKWUUnoLjYlLLv35519L/9v/9r8p9d7Zf8G/+Tf/pjG3pBaTinVM
ytcxsWKilFJK6S10SuzLV4x49OQ5vPf3X/A2OKR0SrmB9rFltI0som10iVJKKaUnOeJ+bb+gX4zv
o97lnaZn+NaRRXRPq9E7Ond+AIiJTSiVaazoGFtB57jbjkk52qZUaJ1SS92e/pRSSmkg2zUhl/aX
zYPzaBlaOFMxTOvwIromxTjLaBkS/y+crRhmZFGajpjexaYjxv08Tve0Cn3jC+cHgMio2FKZZhNd
Ewp0i5FnVOgeWMZ0SwdkrS3o61pAx6xKeq97UoHuKSV6ppTu7gvq6/C30q/+jF87PqWU0qtW7GRL
G4dRJmw62/KmYRTXD6CuZwb13eOo7xpFfdcY6rvH0DIwg9bB2UMbeiZQJ703jtqOYTT1z6CiZQxl
jUOHZVW3T0hWtY2jumMSFc2jh9MqqR9EbdcUesXOf1aLvrH5iwWAOa3NvQOaUaO/fwGGqnHYluSw
q5awUTuOsdYpdMk0UsFdY4toH1lAz5RK+t89MQ16RTCYVkmKfmKn71aBjpF5dE4o0Dejdvebdr8n
DXdkeE95ortLpJhJxeEwklPuD9YzKZd+hKPDHw4nypdCx/H5OOz2HufEfp/n63MZnu6DV8/nPni/
c3QBnQfz5B7X/dm7xpel7/Z4WZ9D1Of+7qB0+jyd3M+7TEoppVej2N6KJgCxMxb7GXFUL/SuJTja
v2VgDiUNQ2jpn8bgvB79Yuc8o0ZRbTcKqzpQVNOF/Mp2adgBmVbax/VOKlDdPoLy5lHp4FuUJZro
i2u7kFfZgfyqLuRXtKKhd+Zweq2D8yhrGkH/rAb9Mh36L1YDEFe6aNhC34wGPXNaKGuHsaVfxoZL
BfOeE9ZdO4z1g+ifUKB/ZgVVda1o7J1B/6xOGqd/egVNPRPondWhf0YtfUHiA4oP2tY/ifr2flTW
t6OyuQcd4woMzhvQMTCK8oZu9M8ZMDCrkb6MATHD4nVOi6bOATT2zaB3Wo3+GfdOTxpmTo2W3gkp
gIiAcDjunJgXMV0Nhub1aGztREXLCEaWDKiorkND/zwGZVr3NGbV7nGOjHvYT+oWX55Wer9/xj2M
+DzihxHvST+QNL4KzT3j6JnRond8FhW1Lahq7kP3tFb6HINzajS09aNlcO7ge3IvPJ5yBue1qK5r
Ql3vHIZlcpSU16JtTClN1/NdiIAhvXrmbUZ8DwfvH8yL531pvimllF6ZYpvbOS5HVesYeiaV6Bhd
Qde4Ai1Di6jrnZVsGlyQatTFe2JYsWOuaBlF+7BM2j8J63tmkJaeh7LyKhQVlyMrKx/F9b0YXVpz
B4RpBeq73Uf77iYHORp6ZUjJLEFbey8amjpRVFyNgtpedE+q0D66jNahBalmYGheh6GFVQxMLl0s
AKys7Ug77KFZNbSttbDNZ8E19P9gd/IBbOosmNvLMTk8gsF5NSpqm9E+toLWnkFU1HegvqMXJVVN
aOweQX3HGNr6hlBe343hJSM6BydQ29KN1uEV9IxMoL5nGuMra2jtGUJN6wC6xhdQ39KNmrYBtPaN
o6axAw09I2jsHERD5yjaB6bR0N4nfYktXb2oau5GWVWDVE3SNjCFxs4B1LYPSeNW1beitmMUoysm
tHb1oKS2Cz0T8yitrJN+gNqmNjT0jKO+tQuVTb3omVxBTUMLGnun0NIzhKqmHrT0T6Kypgl1nUOo
a+lGVVM3qpu60NQ7hdbuAZTVd6ChawhV9e1o6BpEcXkt2sfVGJyUoaalD3Xt/Wjum0Btcxea+sbQ
0DGAxu4JaV5Fd1P3CDpHF6VgNLhoQH1TCypbh9E1MoniiiZ0jsyjsr7FXUZjO2rahtE7uSR956KK
qLGjDzUt/WjtH0dZdRPqu4ZQ09yHPpkOwwtiwdJRSim9IsV2VtQEiB1z/7SoAdagvmcWOQXVqG3o
QG1DJ/KKaqQdcd+MqK1WoX14Ufpf1BKPLq5JO3kRAErLqpGQnIuQyFSUlVaitKEfE3IzhuYMGJSp
0dg3hZqOKekAr2tSIQWDpJxqdHf1QSFfQXRygVSzLmqlRS1zx+gyajomMbq0itFlI4amli8WABRm
J0aWVjGsWocstRXanjFoNHKo1WpoFpawFN+AEZkBo0sKqQage1qOhrZetPZPoq6lEw3dY2juGUJL
3wyaOrpQXNWEgSUTuocmUdfajcaeSbT3jaBjXInRuWVU1LWgqqEdNa3dqG8fREvvKGqaO9DYOYLm
nn7Utg+gtrUX1Q0dUm3DyJwSNQ3NKG9oR13HENoGJlDT0Ib6zlG0DU6gqrEdLf1TaGjrw+CyCe29
Q9IOt7KpE03dw6hvG0BlbSMqG8WOewxt/aOoa+1392toR2PPOJq7xY69FaU1LWjpG0J9x7D7M/VP
oqmtB2U1jajpHJaCQauYVnsPalr70T9vxNC0DGVVzVITSlvPgPR5m7p7UdcxgLrWPlQ1dKB5aB6j
80rUNLaheWAOk0ojmjsGpIBT1dqDJhF62gdQVl2PqqYONPdNSsGk7rBfpxQMmjr7pe+vvKELTV19
aOiaxIRi3f2jU0opvTLHlsURukba0Q6II3WZDlUdE0jLLEB7e5dkdk4RShoGMDBnQM+0Gh0jS9Lw
3eOLGFs2YmzJhLbhJSSl5qKktBLFxRVITctFZesoJuQbGF5Yw5BMi+aBGdR2Th/UGuuko/yImHSk
ZxUiOa0AMXFpKG0cxPDCqlQz3DUuR23XNCbkJkwq1zE8s3KxAKC27GFcbsS4ah2TYwosxzZC0zIA
bdcA5EmtmOqYxbjWikm5QdqRtw3NondiGYMyFfoml9E5MoPO0XkMydToGppA68AMxhRmDMuU6Jtc
QHPXADpGFzGptGB4VrSTKzGxsorukQlU1raiZXhBqiGoqG2TzpYcnJFLX5aoZm/vH0PX+CLa+0WC
WkTP2Bw6hmcxMKNE9/AkWgdlGJhVSMOKeRmTmzEwvYxB8f/UCoZkSmmc1t5RdI8vSFXxg7MH/XpG
0TslR8/IJMqqG9ExvoTOwUl0jYnhFBiYkWNgVon+KTn6JhbQOjiDnvFF6XP3T62ga3gavTMajC9q
0DetwrRmE6MLSjR3DaFHjD+9jJ7xJQzOKtDaM4KBOQ0a23vRO6vHtNIkze/gjBL9Mwr3Zx6VoaV3
DD0T7s/u6dfcM4aBGQXa+4ZQVtuG3mk52vonDj6PCpNKs/SjU0opvTonFWZph1zfNSPdN2dEOqI3
orFPhsq2MVS1jUk13SOLqxhZMkrv9U2ppQAg9hkyrQ3TKium1ZvoHFtBU79MOiBsHVrEpGID06pN
6b1JUZM9KEND96w0zbFlkxQe2sRZ/4Pz0lUI4uBY7PzHxXsrJgzJdKjrmsa0agMzGitGZYqLBQDt
JjClXHffQEC3icl5I5ZqWrBSWYupUS0m9TbpPXG/gBmNDTNqq+S0yoLpg27P/zPqTcxqNqXh3f9b
MXswjjQN0U9lkV6n5KvoHl3CrH4HI7PL6JvWYlYnviD3eNKrZvPw1TOdo9MSH1Saj4N5EdOQvuCj
ZRyZB8+wUj+tDbPqDfSOTEvnMYwrLdIPdHQ4d7meMo5+bvf0xZctfS9qC6YUZulzic8vPqOYD8/w
Mt2W9Bk7Rhbd8ym+H8/8HZ2ng895fD7tmFYY0dk/htYBGaY0tmPDuX8bSimlV+m0cgPjKybUdkyj
dWDh0M6RFXSOyg9tHVyU+rcNLqKucxrtIyvom5JjSBzYzaqk19EFHcaWDBhb1EuKA2jpPZkafZMr
6JtWoqFbhub+eamsloEFdIysSLYPLR1Op6V/AW0DC1IoaRtakvZTMp0dY3PKiwUAnQ3SDsyzI5rW
WDG1uoOptV1M69w74KvRvcOTEosIDt473mvTExC8+/tbz+f17n8xPaHl8HeilFJ6rYr9lDjqFm38
omr+TGe0GJTppW23OJIfntdjZOECLhqkccQ5ARedjjg5XMyf2I/NG7YxPq+6SACILdXbII24Zt3B
tsMVgO6d0O8melvmk1JK7647zj3suvYvrNh27wid+xdWGueE6ThcgHMPcO1D6vaezsqqDXP6bUzM
qy8eAKaUFli2HCCEEELI7US5Zr9cANiwMwAQQgghNxGHaw+FXcv4U1Qn/jmiA+nN89jedR0bRuHX
AOCwoq93CE4ATosBPX0j3kMQQggh5IqJqprG//hDMf7dT6X4n38uxf/wt2K8zBuBa2//cBj/BgCb
En/6v/4/TKztYqoxBf/wLy9gNRswNiGD2bSK7vYOrOiNsJjMsGxswGS0eJdACCGEkK9gXmPB//Go
Gv/+Xhn+9weVkv/r/XL8+3vl6JMZDofzawBwbCgR8/wNcgpLkZ+TjIz4bIQ8fYJffn+OqE8RCHkd
gqTEZORmVGCoqwMlhe3eRRBCCCHkK+iY1uN/+qkU/9uDisMAIBQ1AqJZwINfA8C2cQkVedUoyExG
QU09motKEBMairjMApRm5mF0eAIN+UXIz05H0POXyCvv8y6CEEIIIV+BqAH4P7+oAajA/3K/HH1z
q4fD+TUA7O85YbdvY29vH3t7Tmxv7cKxbcXMrAzGdSscu7vY2d6FfdOEqRkZ7NvibAFCCCGE+JOY
mhmp3f/f/ew+B+C//74Yr/NHr/AcAEIIIYR8c5yufRRIVwF04Z8jOpHWMo8dcTOAIzAAEEIIIXeY
/c8H/cdgACCEEEICEL8HgP39fezu7sLhcASkns9OSKCwt7d3J9Z58RmcTp6XRAIHvwYAl8sFo9EI
s9kcsK6vr0vfgcXCexxcFSJkig01vX7Fzv4oOzs7WF1d/WI9uK2ura1x3SUBg18DwObmJqxWq3fv
gERsSEQgIv5F7IDm55ewsqKEXKGi1+iKXIVZ2QLsW9uHv4fJZJJCwF1CrLveQYeQu4jfA4DNZpO6
xQr0hdKZCHtYXTVgZ29POpLz9Pd0e7+6u93lH10pxaWG+wfviyMT6dIGz4Be5UlKw4puT5n7cDp2
pfslA/uQ5syxDb1eL5V1OJ5Uzufyjk73NAViwyjm60ROOyPjG2KzmLG+sQ7T+s0++hFVtXK5yrs3
uSa0OgPWNz4vI+KoWVSdH11fz/OkdfyYR9bfvT0X1k1rMJlNMG1YD9dl97r5ZXkeDstyOaTtzZZD
vHfK9LzmTay7DO/Ef+xhzbiGm7hEXV8AECvn/i46KssQHhGL9oHZY+OKxxVKryeseC6XHVMTM3Ds
7WNpdhpa89ax92tzE1DYMIS20mSEplRCPO/AeaQcd/DwZh/tJflIzq3CmnUXe9vrqM5NRXp6Dibk
7lslOhyfd+BiwzA52I3hWY30/xef74iCLwPAPhAeDozPA+09YpmQFgxMzwA7nmBzwnx6ep30Gfb3
gNlZYNvrvdoGwPT5KO0iTPTW4Nn9P1DYMnSs/wlTxY64j8PsivhlMDk+jV3vAU4Y7+jG2Zu9/T3o
VMtYVhuxf+Qa1ZMQAUChUHv3JteECAAbls+1fOcGAOnn3EFjXSN0Fvc2Q4RoD4aVGXT0H98WCMSO
X7APJzqqMvDk/jM0jcwdGWLfvQrt7x1ZRfZhNqgwu+BePkb6elFeVIjwiChk5RbBYDljPg9kACB+
ZW8bzSXFiIyMR9+E2GYexb3kLszMYP3YNnwfLfVNMFosaGtswZr9+DZROgg91ucop79zEtcWAAT2
tSVk5Va5u00KZKd8Qk5lOTKTkpCSko3sjBxEhCeiraUdESHPkVragMaKAqTGxuCvf3uE1S0nsqM+
IL2oCoWZ4Shs65fKaitOx4eIZCSEv8PTd8lorq9CZnIqCrLzkRifjPS0cBQ2NaMwLR6pmTXoqM9D
fFYcntx/gH/91x/RPm2ATtaPhvYxyBfGUVJSjPS0AlQVpOHdxxjkZBQiLj0dSSnxePX0Dcrqh+A6
Y0Mi+DIAuIDYKCC1ACiqAkrTgewE4N5jQG8HVleA2Gigrg0oSwHKioCcbCA+HcgpBMKigcYuIPEd
kF4CNFUBCSnATw+Axmbg4wugqgmoTAaefQTWT9otn8Ue6nPrYdk0IyHsJcKSM5GRnIy45GLI52cQ
HvwOaVklSIpNQNjbIDx+lwqny4agZ0Fo6mhCbNwn9C8bsLdjQUVWInLz69DZVISk3AyUlBYjJjwe
+TklSIyKQlFZM+pLkvEiLA6dHa3ISU7B83v3kFTaBoNKj90zal8ZAL4tlwsA2yjOL8HatgvzA9UI
T0pEz1AXstIikZaXjbjYdHQPdKNvaApqxRySY1IQFhmFzpkl90R2zajJb4V1Q4EPwc8Qm56LlJgY
pOfWYWmyD2+D3iMzuwjxMQkIevQI7xNLpdE6G2qRnJqHpVU7Ztrq0DHkLu+LeTwiAwDxJxaNDLkl
TVL3yng3YiPiEfHpBaLz67A42oY3r97ip1+eorqxCZ8+vEBOdTOaK5Nw70UYzPYt5MZH4n1CCrJL
KzA0MIi+nl7otBZsrmtRVFiAmsoGlJSXo6aqDnkFRZia/3yf/4twbQFAbAd2rVpkpuVBpTKgtSQH
RWWliAoJQnRmPfqbivDj72GYmhrF4z//GfcfPMW74DdIyijDwsgwQkNTsLO3j56mWiQnpqCiPB+p
2cVStUpPcx3C3gTjU3gU3r58jT+eBWNudh75sYlISkpDdVUxcvKyEPnxI37/9XfEZ+agoiQdrz4k
ICenELOqTawtj6GsohkjPY34+//3X1BQ0YiqpET87fu/4denCejoaMRPvzzDwOAgcrNLIY6vT2sK
EHwZALaB8lqgqRL4p++AvEKgJB14EQ2IZoiWUqC2B6gtBXLzgewY4EMmMNIB/PWJu6bg2QPg+1+A
kBAgIgWYnAUSs4DocOD3p8CbN0BpCZCVCxh8qwEA7KjKrMFgRy1++svPePvmFeKy6jDY3YiIt9F4
8/gP/Id/+hkD49OIf/8Kcflt0jFYZVEx0jIyUVKSj8L6QWxoJpGZVYqF0WHExSWivr4Q3//yFpNT
k3j68z3Ud4+iKiMG3/3jd3j/MRQvXr6HbGoehfHxaBxYgNPpOjPDMgB8Wy4bAPIycrCoVKIgKxXV
deX4/eFTNLXW4+Orl/jzP/+I8ro6FBXUoqW+DD98H4Ta+npkFtVL03BY1KjIbUR7dQ5++uURXjx7
hvyqDrTVlSD6XQwe37+Hv//zM0xMTeLNw4coaRmXxmuvq0ZCQga6hmfQUVGE4Vmd1P+LeTy6nWIA
IH5kyyRHZmYxtGo9qnLzkJGQiEc//ozQmGRkRifj/s8/4/7rOOTHR+K3B08R/OYNCstKkJlTAN3G
BorT81FWXYeUlCS8fPMCI8trcDldcGyt4a//+F9QXNuMH/70F1Q1NuK//ud/xrB803sWzuTaAoBQ
VE8sjQ0gLjoFff1DqCnPRFVLJ+aX1FAtz6ChdRB6vQ7jQ8OoqyrC8IIC/Y2lyM0vQ111DdSmLShn
B9HV2YmK4lS0DM9LK+ySbAYrSgN0yiU0NXdiYrgHOalpqK7rhFavRVNFGup6xjDW0ojSqkb0tZch
v6IaE7MLGOpuxcDEMrDvwHBrNVLTc1FYWoeFFRX6qqqRmZ+PoJcvEZdRgJ6hCWg1WkxMyuA4PK/g
SwVfBgAnMCkDNtbcR+ztZUC9eG0GNOuAzQikJQEdQ0BTIVDbBMzJAb0SqO8QZyYBE5NAQ7m7GWG4
DcgsABoagMEhoLoUWFEB1TlATjGwe9Zu9CQcmB6agd1uRWt1ERp7BzC3pIZOp0R7VTNy07ORX9WC
VaMZk0OdqK5pwQ72MdLVhsGBDmRlpWHBsAm4dtBaIcJdKyYGG5BbUorBMRnW1lal6iyF1oCl+XkM
dDSgorUPiqUpZKVmoKG2Fr0DI1ArWQNwk/E9ALjb6nvqy5CSlonmpjJkF5ZiRTGHotxUNHYNQrEk
x+jwIJpq65CVWYLI98EIDovDjGgSEufqbG9gcngONusqqkoK0NI3hGW5BoqVBTSX1iIzLRsl9d0w
Gk3obatFQ0uPNF35wgKGejsRHxePuvZ+abn6Yv68ZAAg/mUfc4PdSI5LR1VtB3SGNfQ0lqJ9bBZD
9c3IzClCRXUNRoeGUFtViqkVFTqqspCSVwbH3h766yoRnZqPWdkQolKSsL5ph05tgnFNhYHBIdRW
1mJwdBw1FWL7OYRZmdJ7Bs7E7wHAbrdL3d4rlltfd0refDm+KNcfnDVreq3+iymftvP3zM+XAYD4
AwaAb4tOv/rFSYDiNzk1AFxivTcaxEnC7m4x/hmnj5zKiduFg5MGz1LAAEBuGmvqBcyr1rx7fzV+
DQDi6N+z8nhfP3x7dW8IXC7v/qcrjojEtdHciPgfsZGWzS1KVwIolGp6jcoVaszMzsNu/3wSrrjv
hbj015/rvGB/z3/l+aJYd3kZIAkU/BoApLNwzWaoVCpoNJqAdnvb1zZ4clHEzmZnZxc74umS9Prc
+fJOeeK3MBgMUKvVX6wDt1WuuyRQ8GsAIIQQQsjtgAGAEEIICUAYAAghhJAA5AoDgAvzk6Po6emB
yXb2sLs7W9i0bGB6uB8jU4uH/Z1bVmgMpmPDunFhfd1yxtnBp75ByAXZx8LUCPpHZYe38NzdssFq
O7l9eN+5BblSK528plFr3HepI4SQG8yVBYBdiwqRoVHo6OiASmuQLt0a6GhB55AMxjUj9FotTBvu
Swbl0yPIz85DYmIaCnMy0DnkvuWnaqwTIbG52NrahFyhwO6+C1qlHKv6JaQlZ0OpN0OnksNktcO2
boRxVYOq8gqMzK7AsmGC2rCKPdcO5CtK7Dj3YFpdw44DWJnsRUPXBDY3VqEzb0jT2rZbodXrsGqy
wOXYgUGnl8bRq5UwWraxu7mOVaO4yYILyyvLsLv2YbcaYXcybNxF9ux6JMbEIjYmDUOTS9BoVZga
akdmfiOstk2sLK/AtCnOhhePwt2Bc30RP//6AnOzffj+x8fQmk1YM1nh2LFLVyzsiuVPr8W2U9xK
eRVLanHHLidM6+tw7jmhM+igWzVJ0dVmMWLLtYeNNR3UWgXKS6qwaucVJYQQ/+LXACDuAyAepblp
s2N3Q4nQ4I+oqWlGWnwi4mIS8PvPjxAWFYfUlDyUpEbizz+9wprdBe3cKDLSs9EzqQZ2VlGY7751
YmNJKoKDgxERlYqUtAxExcUhMS4dyTnJCAmNRUpKOvIzs9DRPoLm/Hh8990PePjsPfIKy5CTmYi0
vFSEfIpCdGQ8ctKy8cdvD9A9ocNsbxVCIpNRU5qCqMxcmO07aCnJwh8v3uDtp1QM9ffhw7NHePw8
BDERkcjOq8FAUxH+9uMfyMnPQ3p2MmKj4/Dot+/xOq4Y2659bFqt0uVQ9PYollXx6kFcxrqxsQHr
pg17W3qEv32L5IJKVJYVIC0jHtEJcQiPSEJWehoqC4qRmpCGwuJS9It7fO8aEfkhFPFx4YiMy0VP
bT5++fmBdCvpiE8xaG7pRVpoEB6/jkJVRSbi0rMQ+eEN7j38He9CIvEm+D3ehyUgJyMVjx78hD+C
3iMiIh4J4SH4y8+voNl0YHtr63CeKaX0okr75c0v7xLo1wAgJuK+ccc+djYUCA+NRk9PL+KTCrG8
NId3L98gMTkTLe1dKImMwl9+eQ6Z2Qnd/Ciy0rOQllGAhopCdAwswGXTIz09E13N5finf/grSqob
8ebFK+QWVCEtLR7PX7xHUNB71Na2ore2AbEvQ/DLbw/wMToFqYmJiI5LQGlJFp6+ScKKfAlZ8Ul4
//QJCptGYVTPICM5FWWlWUjJLoDGvImO+ioUFtegpKwcUa8j8PFpEP7hX3/F8OwKmivyEPYiDA8f
PMOzj9HobGvA24cP8eL5S6QVN0o33ROfmd4+xTIrXj3Lr7isTfzvsqqRmVkq3SCqu64Q+UV5+Pje
vcyFfopGb1sfJnub8fvL59Dv7GPHtILc1Axkp6UgJSMXsUEReHD/N/wSlAy1egkxb0MR8fI9frj3
EPkVlaguycPvP9xDZEw0wiKTUFJah6rKGnx68RRBr98hIiIC1e3jGGkvw+PnkVizu++2Rymlvir2
y2L75o1fA4BIGmJibhwY6mpFfX09hiYXsbOzDfniDEZHxmHe3MLK+CjaekawtQfs2q1Y1evQ01KP
1u4R99i2Daytu5sI0qM+ILO8FeNDHYiOTcHMigpqpQpG4xr6O5owMSPHwtgoeobHIJsex9yyBtqV
CXQNjMBgXJeSj16lxnBPLzQmO/Z31rEwN4/5mX70TyxI0zCtrUp3OdMb1qBZUaCvvRNDk/OwbNpg
NhqxMD6Bjp4RTA+04T//0z8gv3cGsol+yDTualtyOzm6zIpuzw1g9p3b0Oncd95y2bRo72iXmpTk
cg3WtMuor2tGX2c9cqrqpN/fuWODftUsDW9cW3UvL129mFfoYLfboFNqMNLVhYkFJYoSP+L//jUI
S0ol+oeHoNQbYdCvQicetWs2YXpsAFNLSqxviBo1I6ZGR2A4WBcIIcRXxDZObN+8ucIA4D8Oizx4
ROi3xGG3QqHS3MhnOxPfOS0AXITNDSOs274vCataDfTmL1dGQgi5Cm51ACDkqviaAEAIIbeBOxEA
xH35d3Z23LeBpdRHxUNrvDkvAHi3pV234ra0nqdsStrtn7u/seLBX979zlIMLz4TIeR6EevdrQ4A
4uSsWdkCllcUWJErKfXZmZk5WK3Hz4Q9KwCInZZ42I04eUYorhDwaBFn1h75/7C/NKxXf3Hm/sH4
m9KO0HY47kllexTTFooH1IjgKx5xu2W3YVd6+t4edg/CsFg3xKWI7nC8g12HEy6nAw6nC3t7ntB8
hrvup/m5y/us0+WCw7HrLs/lPP6e04GtrS1pGHcZ7pMUxXS/KF/M0+6u9P16P0uAEHL1fLMAIG6M
4nkcqOfJepdBbEDERnx7ews2cUREqQ+KS+g0Wh3M5vVjy9VZAUDshK3Spa1iJ26Ffct9xOvegVuO
HY1vbdmlI1xph279fMQu+m1aLVjf2IDNZodWuYxZ2RI27dvSe1aLCBPux2h7H1GL+RHzIGouxHwt
j7YjLjIeNc1NaGjpg/uWRA50tnXBKlbHffe8W/VL6OybhM1iglJrPPw8HkR4OI4DcrkSW7tOKWR4
WDeuYcsJmNXz6Dm4N4dgb8+JrtoSREVForln3t3Pvoaa6kYYN3cOh3OzD8euu/ZF1GQwABBy/Xyz
ALBjmMXzF+GYXZxHc9uwdJQhEBshx5GNgXus/VNDgjjqEQFAbES8j5QoPU+x3KjUGqyvu2/85OGs
ACB25uLoeHqwHbWtw7DZrLBtO+DaNqMwKxON3ZPY3nFi17YBmWwRu7t2VBcXYXhWA6djB/ZNKyxW
G5SyYZTWdGPPsYGU6EiEfYxG+4D7ypiFiV6k51Ri3WaHybgKi80u9RfTslg+BwDX7i7yCzuwolhB
c2MVklPzUFeVh9zKIoSHhiI4IQMKvRplmcmIiUtFTfskxjuK8TY8Hd1NBYjLykdlWSliYjIwv6hA
SXoCckvqkJ+ZiYykBPx07wV0dgeWJ8bQ2tSM7vYelBVUoLunESHBzxCbWYzcjGgUt41JNz8qy0xB
hLi/Rm4xqkpSkF9VgrBPsWhp70RxVhrSU/MwMDqJiZFhWHf34GQAIOSb8c0CgH1tGe/ffEJ2fhna
2ruRFRWCt6HJiI+LwfuwKBSUN6Ag5SN+fxOGmUUtDIbjR2geGADo13jZACCqvxdGO/HiSRA+vg9F
Tm4pKgpi8OvDP/ApKhlVVbWoKilAVEIWygsT8ODxQ3xIqsC8bBqdrW1IDAnCg6fvUFTbh33nBiLf
v8On+DQU5OcgMeETYlMT8eFjHIoLcpEal4jY6BTU1NWjtaMX2w6nNO9SAHDsoqCwHSrFAoIfP8Av
9/9ASkY2SgoS8eujCFTXVyMqPBYRr17iP/7Dv6K0bQrKuWFkJqfg8Q9/wfNnT/HwRQxamhsQExqL
8Fcv8R/+0z8jq7QRhUlheBiUBLFrnuuvxC9/+Rse/PES78PC8DLoI5rb6vHrd9/h+x9+Rmh8oRTU
S1PjkFvZicHuehQVFSAh9hN+f/QKv91/gua2QUx2tiMo6AnSKzqkK2ZYA0DIt+ObBQCzchpV9Z0o
TAvHb7+/R+K7EPz9P3+P+LR8lJdVIC0uCt//1z/j/cdITMtNrAGgV+JlA4BoR18cacV33z1A78go
Qp8/RnJOLhIig/EyNBPZiR/wIjQKUSHvERGfgtzMWPz8+ydUVJTj3bN3CHn2Ev/x7/8FGZV9gMOI
6E8xmNeb0FSRh7yCXAS9fI6HD5/h0ZPX6Okex2BTFX59eA9d0yq4drelefc0ASjGO5GckIj4hDSU
VDaitjQVGYUlKEjLQlhSBtqbOpAaEoWQmGT0TSpgMcyhrKgUdeV5yKuoRkvXKOSKJVTklCDlUwxC
YlIwPifH1EgHkhLSoTDaYV+dQ015Nerb29HSO4D6iiJEhH9ARWU1CjKT0TK6KM3LYE8f1uzArlWD
7OQw5JXXoLSkAo2NjciMj0ZTay+i4t6hf0EH7ItzCRgACPlWfLMAsG01Ylm5CqNuGW2t3Wguq0BJ
bStm55ewvLSEpWU5Jgc7UNczDOOaGauG4xtoDwwA9Gu8bADY2tqGQbWI+oZ2yFUqzExOoL4iB+nZ
2egfX8Ti1BD6hiewOCdDa10x0vMK0NnSjPS0AnS39aE8Jw+5pdWYkCmwu7WO0dEp2B17WNfOIic7
DV2DI+jo6MXEcC8yUzLQ2lyLsIQEGLdcsB8s62LnKc6BEXMmXj3s7+3B5RLzvg+nw71jFSfnSe+5
nFITm/g8e4fNbZ+b2DzD7blc7nb//T3pZD0ReD5PwHPuzkHZLqekNC97olp/F06XmAdx98/Po7n2
9mA1KtDWMwDH3t6xcwDECYuEkOvlmwUAfyE2OuIKAOnEqRPudUzpWYrlRgSAi54EKPqJM/DFyXii
GUAgdmSeE1ol9sQOcU860fXkHdvnYfeks+a3pbPyxQmJO46D4aVp7x+efCfChrh7oDib3nNi4F1B
BIyr2j4QQo5z9GDm1gcA8WHmRK3BMi8DpJdwRSldRip26Ec5LQCIS9yMRiPm5uYwNjaGyclJTE1N
YXx8/Fi3eBVOTExIr+I9T3/Rz9Pfu9tTxtFuMd6sbA4Lc7LD6czMzEjzsLCwgPn5echkMqlb9PP0
P9ot3j/aLcY52n20DO/yrqps0e0pR3wm4fT09GG3+Iye70b09+4Wr57vyrtbjH+021O253s9qTzv
sk+bzknz6mvZZ823r2WfN68XLfuk7/usskX3SeV5l33Z7+Gk+fbM60nleZd92nTOmteLln3WfPta
9nnz6q+yRf/Z2Vn3ScyHJ93f8gDgQRxpiSpHSn31pGXztAAgVhydTofOzk4oFAqsrKxALpdDrlBh
1aCDUqmGXqd195PLsby8LL2K4US3ZxxPt3gV/5/WLR53fTgNr/KWlpYOyzqpW7x6yjmrW7xetLzT
uj3zdZmyj34/ns8o/j/2PRzp7/09nNctXr3LPq/7pO/7pO7Lln1aed5ln1aGd3mXKdt7Oid935ct
+7R59S77tDK8y7tM2ReZzmXLPq0877JPK8O7vMuUfZHpHC1brVZLz+BZXFw8bL67MwGAEH9yVgDQ
arVS4hZ4htm26DEytQDH1gbGJmePlOQ/PNMSrxfpPqmfv7pP6uev7pP6fW33Sf380X1SP391H+13
stIgx8Y7f5zj06CBo0DUvDEAEHIOZwUAUQMgAoDoJ/4Xzf+qyVZ8f+8N+tpK8Jdf30g39plfUEKj
WEJv/7h07f7M+BjWNuxQzI+gf2oJ1nUtZhaXoddrMDI+iomZRdjsVizMT0NrNEnDj/R3IS4hC+Yd
90lz3nfSo4GhONfpuA7sbtuwumqSTgIV6JQr0Ky6T2YVG3hp+T3Y+LucTrik5dm9TIv7rkjnqezv
HTsB9Mvp0LuiWA7EdkuEgDsVALa3d7C5acOmzU6pb26676PvvXyeFQBEDcDo6KjU32w2w769De3i
GELeBONj8GskpRejKiMGf/rXH/E8KBxxMcmorqhDyB+/4dfHb1FSmonE5GQ8+fVH/HT/Hp69CEbQ
m3d4HxaP8LdB+NtPf8P9B08RGZ2MiNfP8dvLWGy6IN05UEyPBo7ihNO1tTXppE+Hw/FZ5z62zQpk
55RBqdVK94EIe/kRI4sqqFQK2He2oFAqsKxUQqnWYsNqg8mgh161jJKiEgxNL8G4qoNCo8WW3YL5
+SVYt9xle+846O1X/K5ieybOA7hTAUB8kJnZeakNVqGk1FfVmJ6Zk06MOcpZAUDUAIgTAMVG2bMi
yWdHkJOWg9LifKSnZiLi+Uf8/Ot9vEuqxMryFEKffcD7x69w72kQSsvyERcViVePnyEuIREJKbmo
qGpAZUUVQl+8QMinMEREx6N3bA7N5el48zEJpi2H+z7+R3cC9M4rli+xbHrulSAu/zSZTFjf2MSu
VY/o98EI/hCBiOBX+OW396isKkRSWhzCoiLx4vFTPHn+EkFvP6C4phU1mTH4l3/5Kx48DUZ2XhEy
UuOQlJWIdx/C8DE4FJXNY9IzHET53kGE3l49v6fYnokTPW9cE8Dp75yPuA+A2PmLp6PZbOJe65Re
XPEMCV+eBeAJAOJs/KNHZTbrBswWcWnePtbNZsjnZqVzAfTGdWxuWmE0rGJqdAwavQHJIc/w19A0
rK3pMTkrw5p5AyajCWtrJmxaNzA7MwG5blV6QJFlw4jlhXmYrFvSdLyTPb3bit/8aAAQG3NxJcqu
Yw9Omx7BT56gvG0MbRWZCI3LR3VFAfLyM/Hs5UcUFVWgKL8I5WVlSIuPR/jzD/jhl3v4EJmIxJho
RMUlID8vBX+8TcT0xDAKS5sPl3F6txTLzY1qArCZtBjo60N+ejIioxIwtaI79v5F4Y2A6Nfo642A
xMokmgCGh4cPA4C0oRZtrNLNcBzHrv0X9wIQK5u46Y7EngtGUaW7La599/Ry3y9A3AtAXJVwMKI0
nminFYh75nvvHOjd1zsAiCM5cbAj7kHh2LFhfnYWGoMRerUc88taWNaW0dTSCrlGD5VSDZVSJZ39
rVZpMNbTg87+IUyMDmJ6QYkV2QDaegeh0a3CuLYKtcYgTcN7HujtVyw3Yht2Y5oA1tXzyM7IQnFV
JyxGJfIzirC8rIHDx+oABgD6NV4mABxtArjMUbl0ySo3tPQCnhoApPcP7u4onqwqLar78ORHz8l/
Rz0NcSKgWCalR0mfMA/09usJADemCeAwAFR3YdOsQmFWBbbFmavHhjofBgD6NX6LAOAPxQr8raZN
r0fPb3xSAPA0PXmPQ6lHzzkkotsTAG5UE0B/Ty/y0pIQFZWIeaUW2iUVdn1MAAwA9Gu8TAA4qQnA
s8I5HF+uiP5WHK3p9AbI5halO2DSu+fi0grmF5ako3yx/B0NAGI5WzOaIJMtSM9MoYHt8gn9hHPz
i9L5TWJ74QkA4q6AN6IG4DP7kJ5bIlVleeqvLo4IAGJlYQCgl1EsN+JqgK85CVDslMUKtbP9+V7+
3m324kE4/rrOWpwrsLKigOVgHunddHFJDrt964sAIF5FaNVq9VJ/UUNAA1OxbIjtkNiWHe9vgdFo
krYTYntx45oA/IX4UFIKWlFALldR6pOi9khcAy3OrD7KeQHgaBOAeM+omEJocAiS07MxPbeCXefx
5X28rxsypfnw/+Prg3joz5F/vRBtvEdrGsQKrVCosOn1/AJytxDL5mkBQBzZ6XQG6T3vUEsDR7Gz
F9shsVx4ut3LxLoUAMR24mgAuDFNAITcZM4KAN5NAGKoxbEuVDSPQD/Xh3dvo1FRWozMjCJUFpQg
NT8HGXlF6O3sQGpcPHJKm7CwMIvirBRERyWib2QBPdX5SMooRWlxAWKTUlBS14WR7hqExiZickEJ
5YpWutKAASBwYACg5+nZ6YtXcdOowcFB6PV66RLnkwLADWwCIOTmcVYA8G4C8ASAssYhrC304+Gv
fyD8Uyge37uHF2/S0dhYjt+eBCE3MR2//3gfT19/QHj0e/zx7APq65uQEh2LlJBP+Id//BNevY9C
SnI6EuLi8Kf/9A948OQp6ntn4HB8vmqAASAwYACg5yl2/KL2Uiwf3d3diIiIQF1dnXTrcZPJfDsC
wN7WBqZkS969JTQqLbadJ58bsOdyf4jTkK6vPnlUQs7krADguRXw0SYAk3IGn96FIjuvEN39g2gs
KUdSVBj+ePQE0anZaGjrQFlaAT69j0Z5XRWikiPROTCBpeUVtNbUIjsqESGRCahp6cLQ4BC6uvpQ
V5KP1LwSLCg0UIpLZFkDEFAwANDz9AQAsVy0t7ejtrYWDQ0NMBgM0nlN3gHgxjQBiP89/UyLY/j4
KRE64xpGR0awtmnFwvQ4FpUypCelYXxRjWXZOBYUelhWNVhcXEBeZiaa+6Zg0CsxKZNh076BseEx
rJptUC4tYs28hW2rERMTM5gaG4PSsIl9mwZJKXmw2DewrFDAumnBxMgoVte3YFQvQ65ew6pWifFJ
GQqzszE4pz82r/Tu6s15AWBkZMTrJEAXnOIKgIOwKo26t42ZqRls7nhuDCSmtQe5zP0wIIG4H4Bg
b0/cLEiMtC9NyzNth1NcyuOQputdA7C9s31QLrmLiDucMgDQs/Q0AYjqf5vNJnWLV4tl48QmgBtx
EqBnhsXMiw1ee1UmgoJe4E1wJHJyixAWEYrExHyk5ybh7fsIhIVHozCvEJ1tg2grzcB3//Idfnv6
AXkFxUiIj0N+SSZevHqHxLhkZCSm4fnv91FYNw2HXYugJ88RFRWLzNwG2CxqxEQnIj3mA364fw+P
/3iLuJgEFBfXoiotCt/99T7efohFVnIi/vzdbxheNkn3X/ecbUnvpmJFEivNacus6D6rCcCzY/7i
umyHeyWTgsHRs/gPVoVjw+46pKf9He+3e2I/TwBYWFyGWqOjd1CVWis9o0Isb2L5YwCgJ3k0ABzv
f3IAuBFNAJ6FWeCyryI/rwCzU8P46z/9F8RllCAqPBRx8ZnIzs1AcHAYPoZEoKigFO31TUh8HY5H
fzzH20+x0o2E4uLiUFCUJT0wZUWpRFluLiKDXiK5pANbFhWePn6DqcUV1Ne0wGbfQHl+PpIjQhEZ
F4+I2AwsyJUoTk1G1MtP+Pne74jKbYF6eRx/PH6FsQV3DQC524jrZL1XgrMCgHcTgPcO+qoV9xoQ
N4MxmdfpXdVklp4FIbaTYiPPAEBP0tcAcCOaAMTRlmcG9na3Yd10X4LVUp6D/OpOKJenkJWZh2XN
Kqwb61I12NLsGOZXdDCqFJiSLUCnUUCpNcK+oZUeqLJp35Y2ipsbFizPyrC6YQf2nDDoV7G1LVL0
plTboFersG42YmZOhrWNTezsbMO2aYNqYQ5TskWYrXbs7u5Ar1qBbvXzZVvk7iICgNjAHuW8AODd
BHDdivVH6L75EL2LiuVSvDIA0NP0NQDciCaAowGAkG+NrwHg1CaAa7o9r1ihxU1gZHMLX9xBjt4N
xU2AxJ3cxO8tlj8GAHqSvgaAG/EwIAYAcpPwNQCcVAMglmf7phX2HYf0xD/vnfZn3VcNuNv2Dx7m
Ip7850NwECu0uMOX1Wueyd1C3OCMJwHSs/Q1ANy4JgBCvjVfGwDE2ftr8gl8fPsR8UlpUK2dtWPe
kzbc7tJckC8tQa7UYuuLx2Dun1qbwMsAAwNeBkjP09cAcCObAMSRkOfo6LO72KH0qtwRD9U52A37
GAC8mwDEUIvjXahqm4B+bhiZSWmIS4xAWWMH0uLi0Nw6iOqCNOTllCErJQkhkfFIT85AdnE6Hj96
jIziBrQ3FCM5NxO1DbWIColEa+8k1EsKbO58eSUAA0BgwABAz9PXAHDjmgD0+lXML65Il76IBV4u
V0ozrdHqoVCqD1Vp9NDpjvfzqNboodXqvuivVOuwumaS3lN6ylFrpSepef4/rubwPfGwDakMlUZS
qzdifd0CrUYLw5oJarX7VaP2LkMNrX4VGo32i/6iHDF98er9Hr1exXMAxNP0xEoh9CUAeNcASAFg
rAvFdf3QLw7j/j/+F/z46wOEhEbi4+uX+OWnByiobMN0WwM+vo9EyOsgRCdXoTg/AU/fRCMzOR6v
3kWgoa4Q333/BM1NTcjKKse26+TnszMABAYMAPQ8fQ0AN64JQKtz37FI3MO4o6MDXV2daGlpwfKy
150BHTaYLDvH+x3g3NrA2sbxh7l4WJidw9r68Q3lqsF47P+jaLUG6dXl9XQWs2oeFdUNsDoB5cKc
1NY7PzMD2wl3GjTqddiw7Xr3PsS7spd8G8SNVsQtdi8TAI5eBiie9GdWyxDx4RMy88uxODeFnIxU
9IzNoCI1BcWVtSjPTUN6aj66+kfRXJmP3+49RH51LZqqS1FU3oi2hkIkZaSjrqUXK8vL6O8fxPI8
awACGQYAep6+BoAb1wRgMq1jaGhYCgBi4yYWdPGhmpqapLOqAQfGB/vQ0VSD2LhMzCzq4dw2YXpR
DtfeLkb6e9FQXYWmjnEY1zdg29BiVq6Fy2FBe3UOfvn1D+SWt2FlWY6poR6kJiYgKjYFjYPTcGEX
U+ODWNHppS/QpF5Adn41NndsmJ6cwdL8PJoqSpCVVYDi3BJ0tHch/MMbPHwSBbPNgvjQMAwvaDA+
PIhFnR7q5TmMzMyiqjgPFS1j0ClkGBydhW3DiNmZOVQW5kkPgtFo1BgfH4LBsoGZ0SHMyw3SZYcL
S7oj3xq5ai4bALybAMRy63S5pKf2eYLj3r77bn7iTyBO9PNkxZ1NE2TzKwf/uVdC96v7f9EkIYb3
PvJnAAgsGADoefoaAG5cE4AIAIODQ9KMeQKAuLdxW1ubtOmc6K5DYUElqrMyERYRj5y0dLx6eB8/
3H+AkLBoNNY3oSo1Dd9//zuGpicR+/IefvjtMaLiE1FSko0/nr9GeHQqokKD8ftPD/E+JBrJqTlI
L8hHREwUigrSkFNSgBdPHqGstgt1TX2iTgHF6al49ewp7v38HKFh0SivH5bmN/Tn7/AwrBjLs714
8fIVXgW9RXpGKdIyovEhJAP5pTl4+y4EIR8jkZ6Widb6Hgy31OK3H/6Gf/3hCTLzihEbFYXi8ly8
e/cWsdFJyE7Lxsegp3gdkgeb566x5Mq5bADwbgLw3kGfp8MpfuT9L/pfVAaAwIABgJ7nnQgAAwOD
UtWEQGzgxHutra3SEdHMQDPysopQlJaJrtF5jHTW4c2TZ4hLyUJudhYqS6tQlJKJ6LBE1NXXIzns
PRLS85CTnY2s9Di8fhWE0KhUFKak4sXTPxCfkILYiBSk5hQgOTUZ+XmpyMwvwIfg96huaEdGQjLK
K4oRH5eOtIgwPP7jBSpqWlBdVITMrBKkpOegtXsEbY1VGJctIPyPH/EoKBZ5uSl49y4GuUX5+BQa
gZCQaGSmZ6KpthXZnxLw4vErPH79EbnZeYiLi5XuXvgxNAqjM8voaa1H0qdPePU+Hhu7J7QpkCvh
sgFA1AB8yzsBMgAEBgwA9Dx9DQA3rglgbc2Eubl5aYc/Ozsr3at4bGxMqgHYk6pT9zA3NY5lpV66
OkCcvb1lNWJ2SY49uDA7MQaFTrTp72NjwwLLugFzcg2cu3ZMT47BYDTBYrXBqNFApdXBvKrD8sI8
JmXL0jiL8zPQrpmx7djFlsUC1cqC9Kx3/do6tCtyrBoNWFszY8tmxsjYFLZd+9i22bC56d74KqZ6
kJRRAr1Zh9KCfEwtKbG9vQWrbRtmvRxTsmXYNsxSE8DqmgEqlRaOXRvm52axbtvC7s4Odra3oVfI
oZI+B7kuviYAeDcBXKcMAIEBAwA9T18DwM07CVCrh82+BbVajYmJCamKQig+FCFXyWUDgGgCECGR
AYBcJQwA9Dx9DQA3rglABACLdJ9+Qq6XywYAUQMgaqkYAMhVwgBAz9PXAHDjmgAYAMi3ggGA3GQY
AOh5+hoAbmQTAAMA+RZcNgCwCYBcBwwA9Dx9DQDiHDvWABDyFQGANQDkOmAAoOfpawBgEwAhBzAA
kJsMAwA9T18DAJsACDngsgGATQDkOmAAoOfpawBgEwAhB1w2APA+AOQ6YACg5+lrAGATACEHXDYA
eD8MyHsHfdUyAAQGDAD0PH0NAGwCIOSArwkAX/MsgK+VASAwYACg5+lrAGANACEHXDYAsAmAXAcM
APQ8fQ0APAeAkAMuGwDYBECuAwYAep6+BgA2ARBywNcEADYBkKuGAYCep68BgE0AhBxw2QDAJgBy
HTAA0PP0NQCwCYCQAy4bAFgDQK4DBgB6nr4GADYBEHIAAwC5yTAA0PP0NQCwCYCQAy4bANgEQK4D
BgB6nr4GgKmpKdYAECK4bAC4CTUAKysKWMR87e/Tu+jePhaXVhgA6Jn6GgDYBEDIAV8TAL7lZYAu
lws6vQGyuUUsLyvoHVTs/BcWlrG762AAoKfqawBgEwAhB1w2AHzrJgChWH++1bTp9ej5jcVGngGA
nqSvAYBNAIQccNkA8K2bAGjgyABAz9LXAMAmAEIOuGwAEDUA37IJQOhZf44imgY873twOjzDu+By
Ob8ox+3ndXbPefzzSN/PQbniO3Acfc/pPKNM6g8ZAOhZ+hoARBPA0tISAwAhXxMAvmUTgFh3xPz2
9vaivb0dHR0daGtrw+rqqhQCHM5dzE8Mo2dgAnaH+zPYLRswmS1SEBCInbr47OJ/5+4WZsYG0dnZ
Cf26XXrf6XRAjLm7vQnz+iaw78Ta6hp2nXvA3p403u62HSbzxjf5DgJFBgB6lr4GANYAEHLAZQOA
aAIYHh7+ZgFAMDg4KM2D0WiUdvzixB4RAsQcO2w6JERFISoiAZ0DMuj0GkwOtiE5sxLrFiuWl5ag
N1vgcOxia3sHm6tL+PQhDC0dHVhRqrG8rIR9axtrBgNWZKNIzijF6oYOxYWV0JvXYdwQlx860Vlb
iILqXml+vOeR+kcGAHqWvgYAngNAyAGXDQCiBmBsbOybBoC+vj6srKxI/4v5ECt9a2sr9vYBp12P
sDevEZtVhNKiPCSnRCEyPhohobHISE1BUW4+kmISkV9YhI7+Gexa1XgXFIzqmmYkx8bh/btwNDV1
IenDC/z82wt8+BSDxOwkxMSm4P3z+/jxcRCyczMRFvoW6VV90vx4zyP1jwwA9Cx9DQC8CoCQA257
AJDL5dL0t7e3pZXeEwB2N5RITc7Dzt4+uuoKkZ2XhffBb/Hs2RsEv/uEjtZejHU34d7Th1gw7mLX
tIiQ9+Ho7e1CbEIupmWTCHv5DmHPg/Ff//Q9wmPzkZOTjBfP3+LJL/cRFZeMiMg4ZKTGI7eyU5of
73mk/pEBgJ6lrwGATQCEHHDZAHATmgDEVQgDAwPSvKjVaszOzrqbAEQA2LJCrlDD4XJhe0OFxqZ6
LCpUmJtbgkY+h9rKOnS31yKlsBQ7ojJ/ZxPdzXWoqqpE7/AsLJZ1rMwvobelFT0DY2ipr0fP6AT0
hjUsz46ia2wWq9plVFaUYkm9Jq3L3vNI/SMDAD1LXwMAmwAIOeCyAeBb1wCIaYppiwDQ1dWF7u5u
9PT0wGQyuXfGDrFu7buHdXnWO/er5z/zmhZr6zY4pfk/vs561k1v9g++A4GoaXD3/HzlAfW/DAD0
LH0NAGwCIOSA2xoAhGK63hy9DPA8Xa497PESvhsvAwA9S18DAJsACDngsgHgWzcB0MCRAYCepa8B
YHp6mjUAhAguGwC+9X0AaODIAEDP0tcAwCYAQg74mgDwre8ESANDBgB6lr4GADYBEHLAZQMAnwVA
r0sGAHqWvgYANgEQcsBlAwCbAOh1yQBAz5IBgJBLctkAIGoA2ARAr0MGAHqWvgQAsT0TTQDz8/MM
AIR8TQBgEwC9DhkA6Fn6EgB4EiAhR7hsAGATAL0uGQDoWfoaANgEQMgBlw0ArAGg1yUDAD1LXwMA
rwIg5AAGAHrTZQCgZ+lrAGATACEHXDYAsAmAXpcMAPQsfQ0AfBgQIQdcNgCwBoBelwwA9Cx9DQBs
AiDkgK8JALwMkF6HDAD0LH0NAGwCIOSAywYANgHQ65IBgJ6lrwGATQCEHHDZAMAmAHpdMgDQs/Q1
ALAJgJADviYAsAmAXocMAPQsfQ0AoglgaWmJAYCQywYANgHQ65IBgJ6lrwGANQCEHHDZACBqAIaH
hxkA6JXLAEDP0tcAwHMACDngsgFA1ACMjY0xANArlwGAnqWvAYBXARBywNcEADYB0OuQAYCepa8B
gE0AhBxw2QDAJgB6XTIA0LP0NQCwCYCQAy4bANgEQK9LBgB6lr4GgBvZBGDf2joyNCHXg0KpZgCg
N1oGAHqWvgaAG9cEoNHosLSsgNG0DvP6BnS6Vag1Omh1emg0emh0euj0q9CL/1VqKBVaWDbtMBmN
0OoM0BtWodVqoNaK4bVSeWK8VYP7fWlcMYxGA7VOD734X78qDatW62DQ66ER4x+UJd7T6d3d0rj0
Tio2njOz83A6XT4HADYB0OuSAYCepa8BYHp6+mbVAIhX05oWsR+e4+GjR3jzKR8jIwN48ugtegan
kRIfjqA3n/Ay6COmZlYw1tWPsuws3L//CMk5lchMiEVGQSVa6grx8Hk0ujs7EPcpAiEfPqF7RIax
gS6kpWWiubUFeRmxiMlqxMxoJ35/8AFd3T34+PIVmjrbkVdUCZXJJn15zXVl6OjvQ0lFKVbXN7BO
75xm8zo2bTZpGXS5XD4FAJ4ESK9LBgB6lr4GgBvXBCAwK6dR1dwLzVwX/v4//iMSsvLwKSQUYeGx
SMvKQEREPFJT05CXlYvawkpEPQ3Gg+dBiIpNQGZWLrIz45CYloSUvAYsLspQmJGDt48eo3tWDcXs
GJqaWlCcHYXUvHykJ+UgISYO78OyIFfKkZWchIzkTwhPzIBKa8KOC1DOjeJTUCgamrsP55HcXS4T
ANgEQK9DBgB6lr4GgBvXBCBw7u7AJW1f91FXXoxpuRaLU0Oob+2HbceJne0dYN8FxcoSLPZdrOs1
0JvMsJjXsLnthN2yCt3aOvb396Qq3V27HXqtDmIKLod7fsyraqzbHdjZFF+KDts7u3C6XNjf28Oq
ViEd6W9t2uFwuedTMbuCrW33Rp/cbXwNAGwCoNclAwA9S18DwI1rAiB3F/EbiwXzpilWhqPLpK8B
gE0A9LpkAKBnyQBwCpubNmi07hMI6dUrruYQ7eoexO+9trYmLZxip3mTFBtWTwgQ+BoA+DAgel0y
ANCz9DUA3MgmgKtgeVkhrSDrGxZ6DYorOGRzi8eOqk0mk9Qt+nk8yvF+n4f57LHB3UMd6XnY/cV4
XtM7oZ/YuIqVRnCZAMDHAdPrkAGAnqWvAeBGngSI/T3Mj/aivLYF9nNygbgU8CIt80qlRrrGm1wf
4sY6nt/ZEwDE/2LBE4pzNObH+lBSUoL2AdnheIrllVN/d41Sja2dLSwtLMG6/Xmg/b19ERmwcbAT
Pw3PTt8zD+752Jd25JcNAGwCoNclAwA9S18DwI1sAnBaNYj/+AH1LX0wm3QYHh/H5s4O5sdHsaTQ
QTY7h+nJMfT0DiArKQkF5e0wmG0wr5pODQMiAGyLkwfJtbEiV54RAER/FwpSElFeX4+k2GwsyRcx
LptBSVElxsTvOzqB3d1NjPYPwWjdxuJkI15/TIbFZkFabAI6h6YxMzGJ/JRElLVNAi4LyktL0T8y
jTnZOOZUemhW5jE1q4TVqML47BSSYuMwsrQmzZO/AgCbAOh1yQBAz/JoABCv29vb2NragtVqOTEA
3MwmgH0n5ke6kJNfgPA3z/HnH35AXnEN4oOD8Ke//oaQDxGIj0/GQEcPIt6HIyEuCSVVPbBbNnFC
LbEEA8D1c5EAUJQSi6iISMQnpODdk/v48dd7eB0cjiRxOWZBNmqqa/Hm93v49fEbVFZkISKlEJYt
O9KjIxERGY/Xz57gh78+RPPYCjQL48jLzUXE62D88uf/gt9ffsCn92/w+uUnvPztZ/z864/47sfn
mBMLp58DAJsA6HXIAEDPUiwbYocvlgtxafLg4CCGhoawtrYqnZPlHQBuZBPAttWI6vpSJGVlIfz9
R8QkJaEktxQRz97hx9+fobqtH82VBagsLEdKWhkWF+dQU9cBo8HMGoAbxPkBwInaylqYt3bRVpKL
t89fIjktA8kpmUhLS0BGQS5So9IQ/CgIz4JDkZ8dj4j4TGzubCMrLhpJKflI/Pgef7x4i5qaBvQM
jWJyYgwtjS1IDn2DtOJqVGZlIOjVG4QFByM5MxvxcUkYX9RL8+SvAMAmAHpdMgDQs/QEALEcNDQ0
IDw8HMXFxdJyclIAuHEPA/KgXpnHolpU1e5haWUF2449aJYXodKtweECdjeNmJUtwGrfgdPhwJbd
DuvG2TUAu7tfzgu5Os47B0BoF7/93r507wfrugGLCiW2dl2wreuwqNBg3+XAwqwMG7ZtaOXzkGsM
UhmbVgs2rZtQy5VY3zBDq1LBtuOAY3dHunfD+poaCoMZljUDtKvr2LWvY1GlhmXDCKPZcmwevjYA
sAaAXpcMAPQsPU0AYjkwGAyoq6uDXC6X+t2eJoArQFwFsLpqhNW6Sa9B8URH76sAjEaj989yYxAb
V7FSCBgA6E2VAYCe5dFzAMSyIJYT8XraSYA3sgngKrBYrFCqNNK9AOjVq1JrsbbmvuzPg1joRCoV
9wO4aer1eqnqTOBrAGATAL0uTwsAKrVG2r65n2shqntpQLq+Lu3rTCZPP/eNzszrZuj1Biwvy29H
EwC5m3iOUMRG7KYo5kecLevB1wDAGgB6XZ4UAER/saFfWFyWzruh9CTF8mEwrEnbN08AuDFNAGKm
CLkJiBXD1wDAywDpdXhSABDh1eV0Ss8xEUd3lJ7snrSfFcuRJwDciCaAo20WlH5rRY2ALwGATQD0
ujwaADxHcuLk2i+qgik9Q88J2TeiCUBw9KxsSr+13pwVANgEQK/LowHAs6yJZVDUAlB6UcVyc6MC
ACE3mbMCgKgBYBMAvQ5PCgCUXkaxDbsRTQB3HfFZb6On4T3cXfMkzgsAbAKg1yEDAPWXYnt2I04C
vKuInYRoaxHXv4vX26S4NM57QRAbHNHfe9i7pPitxDkA3svnWQFANAEMDw8zANArlwGA+kuxPWMT
wBUiPqdYWQUntS2Lp+Ed9vO6Q95RPV+Vd/9jHgzjPhP4uL5Pz30kLHb2YiPjQewgxbXyX/527rI8
eJd3nkfLOMmv/fwn6fkMJ/UTn1O0kx3lrAAgagDEfbcZAOhVywBA/aXYhrEJ4AoRK6pnhyntYEQ/
3QLyMrLQPjR5+NyCPadTuje+Z6fyJfuw2c9/jsHi/DIcJ3yvRo0c88vaw/93t+1wfjHY8R2wQFyZ
IXZwHsSOUSwo4vM4t82oLshGeX0b7I7DvS+cTjH+F4Wfyf6eCy7X5+mexKbt+A75JJbml7Djuvi0
j94a2hMcBGL5FDvzozAA0JsgAwD1l2J7xiaAK0SsqGKnIAWAfWB/14rKvBz0DY6go38Mq7ol9AwN
Ij4yAi0jcmmc2aEejE7LMTcxirHxRcyMDqO7cwAzMzIM9zehZWAMw72daOuZxOaGDp29fTDbLOir
z0BQRC4c2MdIVxvaRiZht6rR0t6MpoZyJGZUQ7E0i/q6RnT1jEC+PIfuwSFodRp0tnbDbHEcBpWz
AoC7RmAPXTWlaGrtQXt3P3QGDQaHelGcm4q0ohZpWPXcCOrqW7Ag18K2acXC7DSaW5rQ0jmAifF+
DM/MYX5mHM0tXUiMjERt75w03sJoP4YmlrE4PY7h0XnIxkfR3dmPqWkZxgZb0NQ3itH+HrR0jmLT
soqu3m6sWa0YacvDi5A02F37WBgbwOikHAblNLrHZbCYtWioqcP4xDQGBkYwNjGA7q5GfIpMxcz0
JPr6p6QAImpIjv5uRzkrALAJgF6XDADUX4rtGZsArpCjAUB8WtemBvmFdbBbdIgND8Xjn37Avd9+
wXd/e4IJlRUOuwXpH1/hr/deIfRdEN6+jUPo25d4+sdHvA3+gMr6MkR/DMbbkEQU5+bg0Q8/4qff
fsPzoPcoL89FbE4tNte1SInLRn5pDt6FRKCiKh9vgoPxLjgUYeFxGOnqQ3ZCIh788Df89PtvCAkN
w70ff0fPhFKa5/MDgFhQHCjNL8GqxYaynGQ8++0+fr7/K777808o65gFdg3ITE7FYHs3oqJysbwy
h2e/PcaboGCEv/uI+9//CfcfPMLj5+Eozc/GX767j8FFI1zbm8iLCMaff3mOT+9f4/XrGIS/C8KT
x+/x9u0HlNeUIiHiI14Gx6I4Pw+Pf/wJP967j2cvg6XPH51eBseeA+mfXuL50w94+ONf8OuDPxD8
PgKD3QPIiorBx6C3+OG7f8WPP/2MkIQilGRG4d6DMOgtu1ItyNHf7ShnBQDWANDrkgGA+ks2AVwx
x2oApCoAF4YaS5GbnYPw0GjEhIYiOSMbqckpGJjRwKpdQdTjILwIiUdOYiI+hMQgNyEBz56/RkJy
BgqyE/Hw8R+o6ZrC3EQ/IoPfIzYlHRWVFUiN/YC47EpsWQ0Ie/seqflFKCrMRFpGMpKSUxAVnYSs
tFSU5hYhKy0H8Z/CEJuaiab6JgQ/+gOtY8vSPJ8fANy/p3yiCzni8brRiQj78AnxCUnIzs1CRV0v
4NxAWVYSSopqkJWQidioRHz4EIf6pnYM9PUjL+4TkrJykF/eAZVchvcv36BnUoktowpxT9/g2YcY
5CQl4/3HKOQlJeHZs1eIT8pAYU4yHv/xFCVNo1icHUFU8HvEJKagoqoSGQkhiEopwO6+E02ZSXj9
5iPiwkKRkleGsqJ8FGXnIyM1H709vUgK+4Cc0mLk5JagvigPz1+EQLshngPAAEBvtgwA1F+yCeCK
EWeTex4w8xkXFCtLMIvvxbUNtd6AnR07LFab9K7ZoMWq2YrNdTMstm3YzCasW+3Aziai3r9ASEmL
9PjcPdcesLcLtVYr7bYMGoX0yFynzYjqyhoYzKI8FzRaLVzicbe7Tuw57JCLx+069gDXLtQ6HRxO
J1YNq4fnIxzFOwCIM+SP3rJZr5ZDveY+yVGn08K+sw3LwSN1xeN35Wo9nA47VAoN7NvujZeY1x2b
Gdo1E5wHYWPbZsGGxX3nvY1VHfTGDdg21rFhtcO+sQ6zeM+5jaRPr/EmtxY7zoPPv++EWquBmKM1
rRImi/s73DQbYbHvYm93E+pV8YS/PSjkcunR0QKr2QCj1YYtmxXrRhNM6+7P4EFsYMXtqY9yVgBg
EwC9LhkAqL8U27Dp6WnWAFwVYucvnn4nVlih9BAcqxVb29uw2zZh3bRhy27H5qYNts1N6X371ha2
7DbYbHbYbTZs2u2w222wWizSE562t7aweXDLWrERENMQ79m33GVKJx6K8u026alQ4n0xvBhWmp74
f9MKqzSu+7nRnjKOPqRH7PxXV1cPd3QC0V9cGSB9Fmma7nn1lCGmIXac0q10bXapfGket7dgs226
58Fqcb9ntx1+DvFZPZ/fdlDmps0mfQb3sPbDz384/2Jcz+e3ej7/52lL3530/drc3/nWljQNaedu
33K/b7PBZneXbzn47GJ88bk9NR0ezgoAvA8AvS4ZAKi/ZBPANSB2iGKH4v342ctoPLhO3bu/txcZ
5iJ67wQFnh2k97DX4UU//9d6tNbDw1kBgA8DotclAwD1l2wCIOSCnBcA+CwAeh0yAFB/yRoAQi7I
WQGATQD0umQAoP7yxpwDYDavQ29Yw+qakdLrcfVAr/6GVeHasZMdvZdZ7wDAJgB6XTIAUH95I5oA
xIZ2VrYAnc4ArU5P6dWr1UGvN0BvWJW6j74n+svmFmA2b5y6zJ4UANgEQK9DBgDqL29EE4DT6YJc
oXKf6X1wVjilV6nYgIqdtbgywGLZkDam4n/xnnjVaHVYX794AGATAL0uGQCov7wRTQAiAKzIldIC
Lc4wp/SqFZc4Hr1kUfwvduJiuRT9VWqNTwGANQD0umQAoP7yRjQBMADQ6/ZoABCvvb29yMzMhFKp
lGoFGADoTZUBgPrLG9MEwABAr1NPABCP/FWpVMjOzkZSUhIaGxulAKBWa30KAGwCoNclAwD1l2J7
9s0fBsQAQK9bTwAQO2xxYyG1Wg2NRiMdybMJgN5kGQCov2QTAA1Ivc8BEN1CsVxeNgDwMkB6HTIA
UH/JJgAakB4NAKL76HuXCQBsAqDXJQMA9ZdsAqABqb8DAJsA6HXJAED9JZsAaEB6FQGATQD0OmQA
oP7S0wSwtLTEAEADR38HADYB0OuSAYD6S9YA0IDU3wFA1AAMDw8zANArlwGA+kueA0ADUn8HAFED
MDY2xgBAr1wGAOoveRUADUivIgCwCYBehwwA1F+yCYAGpP4OAGwC8L9ig/StPOk3FP28h7tOPfPE
AED9JZsAaEDq7wDAJgD/K3Zy3r/NdSimKX7fo7+j6D5pWbkuPcurmA8GAOov2QRAA1IGgJur+P7E
7ZnNZrP0W4jv2vv1s5/v4HhRLzK8Z/qeHa4YZ3V19XMZNpv0W9tsn8uSlqcTy/aax4NbUHuP++V4
nxXvr62tSTt+l8vFAED9IpsAaEDq7wDAJgD/Kb5PsbP9lojfVsyDmB+xYRSBQPy2h+87d2AyGrHj
OjLSvgvbO7tHepzGPjbW17HjdC9LF0XMiwgBDADUX4rlfHp6mjUANLD0dwDgSYD+U3yfYkcnvuu9
PfF9O9FR3oRVywY6y1pg3nF/7wLN/Bhauibdv4N1DdMyxeF7Hvb3Pw+P3XWUF1dCaxY7830c3QWL
39Oj2MmKeRDzIzaMJpPpSABwobYgC1l5eUhOr8TWQfHtJcVoHVk8UqIbk3oOzR2jh/8vj3cjPCoG
WQXN2JbGdaGlphoTi+7Qc2RusX8wP+K7EN+LCCIMANRfsgmABqRXEQB4J0D/eFIAqEwuht5mR2VE
LN59iEJGeSWGh5rw9tUT5FS1oSglBo8f/oE3YWloqUzD0w8RWLNsYaa3FR9CI9Ey2IvqwgSkl+Qj
MiIelTX1KMpMRUpCBpo7ezHY2wurY18KC+cHACcKkuORU1CA9JRcVBal4VXIW/z8t0dISM1FWlIq
QkJfIa24FpnxcYiPSsbrF0FIzqjElhOQ9TXgQ1g0cvJLUFuZhcT8LCTEJyCnsAZVhVlIiUtDZUM7
Bnt7oDbZxRaZAYBeiWwCoAGpvwMAnwXgP78MAHtoyM/F9Moykj8GIzKxAlWVOXjyKhQNzVX49CES
0W/e4e//6w/IKyrDm99+xovX7yHTmNFeUYny6ma8fvEEJZUVSE+Nxe8Pg/Db/Seob+7D/OgkQj48
RVJph1QbcLEaACfy09LQ1NiC1Ogo/PqXH/Au+C0+hCcjN68MaZER+PWn+wiLiEN0yHv8+Nd7KK7v
Qk1JMeTrLsz1NSA+qwYGwyIK87JRVpqF335/jt9/e4ys/Gosjs8hLe4dXsdmY+sglDAA0KuQTQA0
IPV3AGATgP88HgDcOz+jbhalZUVo7W5C8LPnKG7swuL0ABISotFY346y9BzklZahpaUDg91NKKpt
hcPlQnNhMp6+icDk4hJaKjNR3tSBzvYuDA2NoCwnFQ3NfUhOi8Dgok76Lc8KAFtbW9Iw+/tOTI5N
QbT2yyfH0VpXgcrGZoyMT2NkdBpqpQL1ZXnonVpET2UFMnKKMC/XYn52But2F/SKRSyr16VgM9CS
j5zyGvT29qCnbwTNlXkoLGlGUWEiyjpHDueJAYBehQwANCD1dwDgw4D8p/g+DQbD4Xd9jP1d6Axm
776nYtDpjp+o543TirFpmXdfaWMo5kH8lp4AIJaL62Efk1OTB+cHfEYEEJ4ESP0pmwBoQHoVAYBN
AP5RfH/id1CpVNBoNMfV6rC2aviy/ykaVleh12m/6H+oTg+zyQStV3+1Wn24gxVub29Lv7Ho/0UZ
flcrXYKo13r310ghQGyoGQCoP+RJgDQg9XcAONoEIFYkz46DXk5xlCt2uuL7/BaKaYt58MyP+E3F
BtN7uOtUTF/Mh1AsfwwA9GtlEwANSP0dADxNAOLITLxH/aP4Lb6F3vPxredHeHQexLkA4pUBgH6N
bAKgAelVBABxJ0DR7b3ToNTfimVULGveG3RKfZFNADQg9XcAEE0AIkmL972rsym9Cr035pT6qthe
8WFANOD0dwDw1ACI971XMkopvYmyCYAGpFcRAMRJgAwAlNLbIpsAaEDq7wDgaQIQ/bxXMkopvYmy
CYAGpP4OAGwCoJTeNtkEQAPSqwgAbAKglN4mPU0AS0tLDAA0cPR3AGATAKX0tskaABqQ+jsAeG4E
xBoASultUWyveA4ADTj9HQBEDcDExARrACilt0Y2AdCA9CoCAJsAKKW3STYB0IDU3wGATQCU0tsm
mwBoQOrvAMAmAErpbdPTBMAbAdGAkgGAUhrosgmABqT+DgBsAqCU3jbFNmx6epo1ADSw9HcA4EmA
lNLbJpsAaEB6FQGATQCU0tskmwBoQOrvAMAmAErpbZNNADQg9XcAYBMApfS2ySYAGpD6OwDwYUCU
0tsmmwBoQHoVAYCPA6aU3iZZA0ADUn8HADYBUEpvmzwHgAak/g4AbAKglN422QRAA9KrCABsAqCU
3ibZBEADUn8HADYBUEpvm2wCoAGpvwMAawAopbdNNgHQgJQBgFIa6LIJgAak/g4AbAKglN42xfZs
amqKNQA0sPR3AGANAKX0tskmABqQXkUA4GWAlNLbJJsAaEDq7wAgmgBmZ2ePDU8IITcdcRXA/Pw8
AwANHP0ZAESSNhgMKCsrk9K0qAkQzQGiak28ntYthhPtb+IpguJRwqK/p1soukU/0e0Z72jZ3tPx
lOfpPlqer2V75vWk8rzL9pTn6T5anmc6J5V9dL69u73n2zOvJ5XnXfZJ5Ynu876Hk8r2nlfv6fj7
9/PuvmzZJ82rpwzvsj3lebqPlneR7+Qi8+2Z15PK8y77pPJE93nfw0XKPmk63vN6Utknledd9knz
fdmyz5pX77I95Xm6j5Z30ndytGzRv7u7GysrK3A43PtpBgB65/VnABBlWCwWaDQaqNVqqFQqSV+6
xetFur3Hu0i3dxmndXuPd5Fu7zK+tryrLNu7jNO6vce7SLd3Gad1e493kW7vMk7r9h7vIt3eZXxt
eVdZtncZp3V7j3eRbu8yTuv2Hu8i3d5lnNbtPd5Fur3L8LU8pVIp1V6urq5ie3tb2p4xANA7rz8D
gKg629ra+qJ9TTQN+NJ9nqeNd1q3L55WxmndvnhaGad1++JpZVyk+zxPG++0bl88rYyrLO8ulO3L
dE4bz5cyTvO08i5b9mllnNbti6eV4ekWr2Ln73K5pO0ZAwC98/ojABBCyF3kpO0bAwC9M35tABDD
iXHFkT+llN4V7Xa7tH3zhgGA3hm/NgB4qv1F1RmllN4VxXbNc0XAURgA6J3xawMAIYQEEgwA9M7I
AEAIIReHAYDeGf0ZAPYddiyvqPDlO8dxON1XDRBCyG2DAYDeGf0RAMRlM669PTgtKmTnVELs3nXL
Y+ifnodzZw0t7e3QGE2YHO1E58AwhofH0dfViQWVCUb1FJp7hmB3Avt7e+6yKKX0BnjSgQ4DAL0z
fm0AEN3SsDYbHOtKlFZ1A7CjLDcZmQWZCI+JRXllEd68fofquhJEhkXg8aNXSErJQmJkFLLyM5Ga
kY3xlXXs7GxL5YnpUkrpt1Tc1EzoDQMAvTP6IwB4uve2VhEdEoaSinJkpsUis6AQObm5SEuOx7uQ
CJQVZyHo9Ru8fBMFmVyDpvJ8ZGalIzQ0EqPy9WPTIISQb43YvnnDAEDvjP4IAJ47AQp0ikVMyRax
tqqG2rAOvWwQf773AK3j8wh78xghZe2wbdrgcDjhdLlQk52A74LCYbS7775FCCE3AbGNYwCgd1p/
BwBv9pxOOPfcw+7sfrn8O3d3vXsRQsg3hwGA3nn9GQBEv50dr3twOxzSzTR2dx1wOJ1w7DqOvS9q
AsTTt7zv200ppVflF9upI/33DrZtDAD0zuvPAKBQqjG/sCwtw5RSelOVK1Rf9BMuLLq3XwIGAHrn
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
AAAASUVORK5CYII=</Preview>
  <Form>t9x1LYZrbAEBACODCAAAAAAABADtvWuTosjWNvy9Iuo/dMxXdjycBZ64947gLIIiKCp8uQOQk3KWg/rrn0Sr
p3t6LMuqPuyZed+amOpCycwr17pyHTKX+D+6twv85vCf56dPn/7nevGpOZXBv39bnA5NkP2fdZJv
i/7wf6Sizq6///Xp1lv/+rQK6kNS5P8m/g8y/PevT3ybNm0d/DsP2qZ20399mrdemvhqcFoW+yD/
t0dRLumTI5TBiQChmd8+5W4GRg5Bf2IOmigCW5aghduAfqfub5/8OEm3NWj6G1+AG4r08NsFOcA+
r4syqJvTSx9s2xQL300DIcmCfMAFbh396xOK/w/8+da3mk6LbfDbfyQw0pttONff80Va1L/9Zx0n
TfBmAz5NgrxZJGcwAoox9L8+0QT6ZqtB0lxRb4N60ZzSAVxyDLaLJI/St4dU/CL/LC7wLpfkbn36
D8uyHMuKrMKDv4Z/Wb4QwV9SBH7xwy/28stgP7//8gNasdOpzrKCIETXl56f2B/48/y01DYwK55Q
+LidNiHsDtfY/vM1/c7efhgw+dA8P5E9V2uBz7knPJeyQ0OemVqFtqWz1+q9BZVwwMyrEO8u1+tD
TWIpuH/L/n5/Lw3tfzS2L73JwxgXjMIw5nQYkygrTQ8X7qLOGbmoSJgp9SCHLXdMwagcQy/XblLn
QNDg/VX1/HRpAXpIsGGWk997/A5sn3++YLzIZSxfMapQWLjJOYdxnyFhyLBbD66IcA9Tckx2jHfo
OnhNadTz0/UVqI6hJbxfaxloAYFZDbMEs+jy0bXHYQT/gvky4kPY/vDzGSN17eF8BNfheBgBzhsB
IKjidgOjU20HQ7st0cEDQ3QNBv/vYXKn0SFkn+Dx9RrC9+COAg80GPVBi1ElkyFDGZB3wQwPmqK3
w4j0Z8wD3x6T8JdZDpi3k0GOeNZ3QI4bFwIY/fkOyA067wCGw4BxBGkJDHUJuK6J9u715X5Knycw
sxGIlx6fnzweBnwpDiRDXsd8Q9K3dD+XL+3b56dpG8KVvUmH7gdJvhPjH66fnz6/QgXL5NojVMbB
BvZ22leYv0j6NczD+4Ahwx1HdNC+fJn1KJPIEOgSepHLOzA+P711x7XHXfg75oucB3Y4Xxj9Z/Z+
kSx/WbdZUX/WPrmtkxfdPyi390r+ivki58uIA6MB37Df1yH/re34XfLn2bDy8wCZZ1d+3db923J7
zzWY6Wd2XMb8sg7Ji72b/W6lv2UskOsByPWy8j/r/uNyu3U9rNM3JH21HVd7d8H0R4xXvjrD++bz
0/ZM5TCz5IFkb658KhhmgQ/saAjo8/VduenDK+evMP3x+lvbcbGQF6t+wWx+9oa/+9MLakMefM/i
YvdHM/ybWQ897mIwBwGFgPk9nHuYhGf0HJYxHSzI9iq3C4bDN5jWuO7BBCQAK00Ns/RxoDt8RgFb
g9/CfLHRz097GXiWiz80B4zwi2QPF8z6thz8KRh4DCzBt4wtiGB+xYiuCThk1OenZg7Di3oJw2gA
XoF25wCG8S3AwOAB6CEYMHWzTQ1jLg11kH6az+HTdlfAeMgxMIP24Q5GmC4bNPUt3wbPMnhDsO4G
TBjAOMQdus8u/A0syQ4/IqVi8PEHd5zD0DIh5190D+RGa9aoY1YHGIcXlAbDCIi2YGaIvsD1gFnG
4I7Zd/MadrzzCMbWACOzaef4dU7ICAXv28P189OlBVIhoIeuA44N2QJMX7Hj4g0HDw4zF0zX2CmX
4KOptTCI91yKoRAoA3GJ+/zUzjs4m8In0MMeaL8lB8lS3RFgMsEIRgEPGGswYjsC11rbfb4GioMZ
tR3mAAAM74OZ/vGOb1pkoAWUIQAEBW121xEh+wxr8LreUfAV06zu8G5BdWCm2D7cDMHTOYQ7iwYD
obUFd5BHhiHMhPMGhkOECqEIgb0XOdUiGHGMAS6YzA5chza4lofr5ydzO7yyGV6RLne8cW0MPYzC
nAlhgobw64hklzIXuaFzCr5gQqgZDDFjoFBXDzVYUo4kTMoLH7x1pOcoWBMYBcMYE1AwNN+0ML1r
aJiZYzAFRgSiQbztRW4yHg4YcPAKHgBtZ0R3Bl1qNIztEnjOFG9c58N1A+HI0NsOBQK8jEl1XgfT
ocCE0AXTDhB0v8xP8HHhOCDaz9aA1U4MpgorNZArNA+Bfrzf2z8/0TBAPRpXTMcYeEcBuQwYl1uA
eYGDWZRtjcFQfQazrGkIiAwGlIK6m9egtz++cmR0CvB483lMgoEo+KTiOEwOmCCAkSkHjOwkzeCe
d5yOYTN5CXi1MJ6foA5G6AD+ugd8QE3DSyDpuqM7KB6FHlwMGGm8p8H9w/vMMCc4/P3+4XqQ2x9f
+fP1F7lcR1wegVaRPVi3F0wDxjPA3NEgcsjW3hX10bWdEDaLfM7AkOcD0uDDLL/C/IUdcD5ck1+u
r+8/P30Z81sMD11fRiSb8xEeTc5gpiByHjANGKXys2QHNrxgJqrhffg4OgNlh9i9EQa5fQjTzWsw
08srlzHH9TwEkt3AMHnB9AXj5ecL5ikZA28T7ANgIckGP4L2+A+R2x+un59elywYc2QSL3LNr5gG
uX4Vkv3OYJof3n9+SkqAGobIFASgdAt3b0n6EbndaQF74FoDK/g64jdy5b/I9Q9x7xfU2+GOY1kO
LkEeNMPMtfYRzDflduf60iNCtxR8rAD/yGHEYVXB8lVuY+cbyX718zuDr5jpwXbgZVMB6V4wv8gZ
f4fc3lhVlx5p9zAs7ucnF8j3OuZgC07fMPYRzMzk2r4shpV11dULp7HPY74X46D7IX7ztiBnvmo/
2w3aB/HR6GXMzxjuIf3y85V9+13SgB3DOoRHl3V4sR1XewdsNHX1LBdvCHmjYV1DO/zFOxJACwPK
+bh9aTEefFE53jHwtcdB++NhhPmXEe9ge0zStD9cX1YhlFzsXbEBNppaGMCvXLzh4MGB3NDcBVGm
g3X41afTScO82P1LiwvGy8ovrj0OVv+27j+4K/UFs3CxLeXVRj8/gTEXKQZ8jxPvAYaLj7cOZxAr
adPP14NvAkkqeH89YFxcMA4r/6z+3uN3YHvl53NvX3kW5+INh2vAvyXs2kOsNJkhHdwttyBaJoZr
1XXmg8/3YGPy+/3cC99+MLZHfzgQndGs2eCwBOI1EJMO0Zr7+Row5MFV89YPDPfwsOrh4U/wS4Dh
iGXDoXsBJsANl/1ZARruDYdfwmXgy1LQL0Avm8b28Eu89PjnmX65Q760+NLD/NLjMAx3kfR1xOHP
+fDneIiiL5jo4RcMkkP63/8Dv2x5v2yPv7VfPnWPSZacA644/vYfyU0Pb2+xz8Dv3/7z2vnFm80X
jVs38+KQDPf/9h8+yJugXvh1EORvtl0Gx+a3/1yG/aQIn74a+NPUzd0oyEBvn+YFePX08kr9507F
brjr2qNWuNvXJ/O/w9v/A18afG799vnRPPGHIyEg0p9+ilReh/KK46IFHqpupsG9A6Qb5yUZkNGX
t78cmSQrTjd7RJWjYuDebGHFojVwNRmIzDv8hbMCKQYVdl2SW25pgfc0ec7Dx5gzWFYZryamKFnP
T4FENbmH1bPtFj2mDO+zyfGwPo998yQW5110LJB4s6hXrD1zW3SSp+tquuitjZeuSX4UT/ZIKfUq
osG9qIPw5aBrUzaKY34h+gLHL8e7tg1aCDqPznmHHLc0QfqYG7AUjBNkz0zxDjui9XyTd/M8C5cz
AaWmKU3nI2f+/ISTo0xAobAEKbA7qSGG3B+PcbxjDto5HXklvArykTvFSyg/b0dheQKJcWY6dq+f
NK9kOV6B8U2Z5iho8/y0E8YUWcw3ZZudtySxNzMnnIljiz2K83PRX3reRQEvGp10Aj2oMQRvjXri
s+506tu2j/WR2VEIdhKPz0/T7pCQPkjD0WJuE6B1veTacqzPFvpZw5yItavdmLZtmziXnC1q2oyJ
lktxbwAY/cnHLqPJGceyTvb8ZKWxt1X2Bn/kduAGea6sZXGSMr4RZPY8Fi93C/LOnsrVmp+eIGii
HzbRLAH3yvJ8zWaNuJahvXIwgdx6c7hbyjxPmJnoWlRYMXSUYYbJmasNiFQstnenSF7Yl1mftZyF
sO1CDNQGU5DhtbNXlNuVRfPPT5zarHVHvN45KyzE4Zf8dOz5QmYOcrHpnmxnzIxZmDzN9t3kLABM
+lQ3tkRHn7a8IrqECc2Ge5+fbJqSYI+I86K49qhvSKLOwmR3mclUCnf0JoAMd9BIGdX0XPIQau6k
F1n2RxLyBPSE8oOUnp/k8VTCc3ilHIzLuysa0Je7zH7TLzRxwDFdhdyX98WknI5yGJ5uEAiGRiO4
g3Tg/idd+fy0AtHAcSfAUOhtxgfqGDMM7Wzs2WVcoMVYOHl41203Z0LZTWAaErplR+EjAcT3OI6m
UFNuOpxZ+xzqPz8JTCgxDuBWebhIfk0QldEKCA7vymYEwo2Wo6a41C8dNiTZzhQRM9Zn8EUK3i5Z
8Iq0NJllLKYyWFkzi4UUKzqYg1za06IgIqOergkpHHPKDFLwOcvIazDbJSC1ZShoWvtVxJa9P1l3
u+3AqszZZTw/lcGq53YdMu4odIOOoPX5pBLQbJKiwFO1h/mSqpFIs7akMz0BPIvYZWyN1nBnGLnp
D+aRjf15fUC4TGGLSHx+4pWtVh/GLLPgDsrYiIJdHO44+DgDGj8cDwcjHbFbfQ2NW99SzhGIElM2
mix5JfbmfkPwpb49v2CfPD+Jlqmc3RyP+HiyVOc9I55mG/h8WBOQXp0RfaeZad5YllhTOXSeA3nN
2n2iK6JobILKHtV7jFybWaLAPfX8FE128R/uYtk4atAJ5qYdv6FG8YaeQ7MRWOGunUFGoSQLtqAD
61iquUUTM49pW7Se9HqmT8GqD+xMdwpF9cc8IiV4b1MQ0vGuqAidzuFRolws1Bn8dmIBMOYodoe9
jkw41zpEMcHXJ0Labpc7Bk+ATs9EQAix7hIXyfpSIu1svhJnp0VdGKYsUNGaPwrRBFsAfN6BLVrD
c/Rm40s4yZyFC9O1vRIc7RgkyaJqQbgdTXOpTs71asvxAaNlaHAeVtY0OFi+ydaSiR2jaa/lwt7S
/SM7KpfkfrS2W5vay8FBYNGEWACGEMKIMYdVQx9nhx1o2YazXV5M6FAZsYJkmKnJN8qZ1ShFINej
Kpyj5l5i5oh5wVQyicmL4qowDQp7flrOXbsecGgzZ3gHnTfrXbHcJNe7L69hvBiK1lYYVjbOHilx
IdlbWtTlNTeaNE4Pz6vNhmLOz09IHfbTXZttJi0PoUK9GHPdRvAuK2fSZBpYOTun8KcH/VCUPa5y
7oywIlfvwpV19jJ2rZRSlYjIXoNdkFAptaqO/PNgjWaHNDDFBBtHCz3f6jNLoLb9HsLo2bQBYVHQ
GUtenZKeeNw36Vzgg2XWDHbtcM4xZa+enp8qlhNZNfRErFD5VhURdKTN4XNWj2w87EqcYWaTED7s
kfUaWEi3FymwFuGanJE0Ugml1NYMyVABPp1FIK0NjmJMKTsOj7elGsundBNqOTdy4CosXRRmyD7s
Ybq3U0nOFbHJd7M9LmtJj/uA5o2O6irOBLioU6M1ArxMaEdGaZznVaFgViHyvG4gUSSehK08KRID
noPQ9byjcgMZI51K7pbAY2rLIswITZewGTJyVzQ+O6hWeQC+vskEfiphI+iksK5TMNWRPjjJmsJT
TYkWO+ls8wtCtHsjmdSYPMXMbWVPtdKtIm7P+oiMGXNwX6+cRhKwIbySzC3I8yYoUffndrI6CCJ2
TPW9O3MnLi+qmAS8HRV3DdPraaXOunM6t1Jyfz6Y9qKoFJZf1kc6qFb08xNwsSGEKlERz5aSHy2P
3Pyka1V3WnlWt1PEZS/x5MSVSkGSI0SUGXzfyw26atrAZRpEYZIJ4GillKjQgjhkI43adn5MoBOf
aIoYsIsN0huxpqgojm/O6DRYoISxiStEQkutb+z+2NDwZHeAKViNFCKYCssMxA8SOVjL6Q7jd3u3
8XFHixAP5BgJFzQypOIiCEcaNpgVw0wJaokj3gk4p+U4PDPamtDnwjnZYgZHiSDW2xsOWFlncRur
zLRnzZYtxgEsymsjkgJSpqYwqkwW4ZQppXWpcqhO5jPnEGnYBFgrc6YqiYswqMeNfQUaocdRGgLb
uzutjqIToZOIXWp4r/tcEcwAv3HUCo/QUcaa2ciJtMGWWNEkl/kxtFYYM6C0/erA8biKTHbHScqL
Noi4ZLm0bGKWnOekwSPluCzz1TiRMdlsUuqk7s3d+XTaQ7uNVBXHyXREBpMNLGEaKR8Z+DhNjdI9
LNvtGVNZEDkcEMjiuQxgKNVj37kzujJNP1JIX5uAGMxaSjxUqyPxTEKcjaZ0JDV9rwb0uUc5isI2
tJAeLM2Zmzy/eX5Cx/4s50KzmU0c2yVC/hhuusYOepHXtidP7pAgm5EU72qLNQTvF+1IEk9cjY91
mCc67bAJtmuidugzKQGdnpR2o+Torp0CtjH6KGkOluIXxm7iUuJOb0xvdySS2tpisKWyPXaKt3AD
T0bafktpIAh0Yd/iSi/EehnIDePrjtWz04RsRqd6Kp0PKGmTLm1jRlmN4T0fWMu9dWJnXWgFKCag
BSVVvA858QKRw8WZ7giu6UViVBKAIcfxfqpLyEyyUDKJYm7jhaqPGeeji6Gk25wkTuZ3vqCODJyW
GebYJghH0jbPzc68jssWDxprjslVZko+P22a89rGjsf5zlank5OvFSyhNvpcVjktwk8rhQoP5mpU
dfvSkPCjH+nMamNYINojx6kkUeAvZ72EekkdthSFiVmmXFgR0iQBfnEvuhzbovFiUyebVY7mKK/a
I0X35y2PzFYLKC09eDHOKglfrJupOT056qhdZvrV9m6s4NhO5kvP2KdGLEwIz/QiYsUO9qIaz0Fc
sXLTmVed9dId1WB1mjaKrMBiSNoWPzfJmJfOabsurBkKIgczcSIQbSHy2JLVuMr0ebDL1HkaW/Ek
8wJ0RPrOaQUb6ogzUWjDaKIkTUQK80oSaoTRuYtSGUORPqhp9PmpcDeHPaaWS29f7gbrIk6Wy9pP
l5UOBw45zs88yTVpUY59l1/oCTVPIuewXKni1OkS7ozqFZGl830joHsgt/xU9uuFZdvQyNJXqwhq
jqi4Ew6aalgLfluVB3ex66F0YenzTG+gbFV53kxGDyPH8iRHIZp905SVhh+BtUT4FlnsHYlF+US1
W4zJeZDsKs6Ac7knG6phSXybEhS5KqFOQN2wRqh1PuoYWIfCXVhCIE07EtuIiMbPT+Qx9I1qPjXF
pZZNebYpjrSLLYyNGVr5RDmFbUGkfmhuTIyb5pP6HIXn1pCnxEodc5aiACuNj8bSyJisgNwShjrv
GPbsbDeaHoK8lTMiZSfQ4ZZ1MbUvDVFYd+mGbNpe7ml/nKuUZEXidHqQz6Xn0qpNtGAZSl1cg8xo
cy4mOxDlh20NGRPBH48YLKQQSXQUp8eFxXRJ68Ux0bBd0ijxVJo4PVTN1udpTkQyJdY9Y5xIbl8l
NScOckssGhVw0YNXo2SdyN7qrCj4qFtYGetT82O/JibMoqzqFhW80K0xu6w3Lh1PaoVXA5uxOuOQ
ZGhT86C3ek6uNmuXN1dyPUEor0jd4BBwW2aBtGemHEmwieZiN2yqNcFm6pu26c/Uiq1YPxmnDNTH
6g5epGLCTfRhE3Duy83JRCsek6JFkYhORouVJU4T3WJ8dubKS2ujn5pFlluWm28ELknOtlyMRmLM
F7g4zzp5yxwaKQGRqlTNT1txtO4oa9bgCsbOtmPZnTXKFFYRJ/CLHqrnEyfdO9aqmqXcyqA5rGgq
nkqwJOL6EB03W9VoVyEMomgoV7SVM0pVSTNNnpyDVKBFHBs/MpJ0UouduD/l4ZxoT0R1XBK+kq1Q
PMK58TpqkHVLRdFSXdduwvtx7Tw/sbXuTgMZ0VYm1DulXuX2dhI1zO7Yz9ciX1rLRW6TxpLQ9RM9
YspWPuyIYqfQwlhVff+Yz0elqonjEnWBtZyEBEOANLRexxtUXK05RoLT2a6tLL+3yi0IwpZNW7hq
NebIKjcPBbmYjRaZsA9beGETibEfyY5OGTl8AusUkL3LKyXYnI+57o0PEWXFDBRmHavQa5B397Rj
jDezWTuf8rNArbbrSdqJItYBPvIOO0ljT52qeFNOTBDhO82O5Q7VxJEX/LLP8Em45udjzV2qxz21
npZVOTJS5MSywrriTvMlTyFFsUqwE1rBJJhT1ZLs2nec7hRtn5/8lTPezGFHDyN6kJ0JTOES3/Mo
8A8zftbo66Z2KS9dbhRL3Ewqbazn8D4R7Xkh7u2jPWErrg84ClZGCvAyjlamjZsr1kTWmSlqcejZ
AxbBse12gW4XMrTKkH7tT+IIlTTrtG6aCeqSq32RtYawVyb5XD3t5F48lSaIyf2JbrDZvtZH62Kq
NYXk5U2oVo0fpJXervYraiVkVbJCVtxaPmboCe6mcLvF8DyL5ntac1ykMfrVKdAAtmDhrHW+djHS
Xa2lrNbW0HrInz3xLAsxQmNJs+dJaI7XZ+00Srlzp1Oro8xDmGqxxok4wPOODQKQoq+ADTm0s0qh
U9MYydOxGpHNySoI1OMdP7fMzuZkZhUl65mBYtN8z+WEpyxISVrN6wH/CtXb3qF3Lj/1+JwDcgMZ
p8Uqh4SMU6XSD9Wonx14fIcTutlVG3fpYo3j7kYEvnTCzRS2BFfG8AlIcFuM9FHgvUUeU8fzfF6D
mVqncw4lgovELYktYsc5lVy2mM6oUp7J9hRZW/68z8SaWE090hBRKFMEfqmOJRx0m6DmVAACINZd
7y3AOt0Cx26YtsT6lYmORuWoPtFxWnW9SEaqX5YRWRr1bNWh1ShI6jJAO89ZbIMsnSzP52mBVyP6
tNk6UMufh4Mrgu9Wi7nGjWIJMuNVXh7DyXZib9SIPlgs7aBdMBP9jWLTI7Vy7LrDnYOxi8+7jJ8W
sRmiqS2psTlOBfn5icv5QlZ31Kk4MsIGGFKrtTVbHpC3VUAwNjBRIOjo6yW658p0HAcV7RJ7glyD
JNg7VnZtZZ1YytRenIC1MNtgeyOwxtsqBgaU5UPjMC1ldOSp0KFzlk2ZuhvIrNFVslu6u5MmY3yQ
VVPstItmUjaahRPmcDxO4sl5DbzztN9CiO6WZ8o5HOxxQHT+dlvTrkO5vNzXtBzVIxz4Zz2qC2IX
HrKWzxpp00erPen0zrrip6HlzTDWAd75zNX9zPLOdX887yerzYgpUJZuSmMZNakqnrBK5w+KU1kj
/GS1iIjqhJPyswSeIGQouiiB1p43khNDLkC2u2itWIk5Z6YCp4aVYQGvSUdC7AIiUrpozo6h7pec
XvjtsTydV3F3avWJONHTJYpTLFMe+B2ClTDV8RFYp9NGder9Zl1tPRA1pQVfcdMDcBwefgoUQZ82
wdyabXc9qsZbkehdfEURemKhrDm2imjCmoZTFfsDudbXxvMTwXIe6YQrmeZRfwJXWZxVXdrGYbCO
Ir7KI3VanEDaX42JI5IQzsrYVsFeWPnIGXd0NTKJxRSLEGhexSCjDDnAsUOsbWOaGxV1vWLwTbnt
TuUuW/DjfFcyUKCHq/EuRwWlWjhojy3lgDFtUo137Fw1uf3Y2ZwtkC5EgL08T2kMV1OTFadW2UqE
FT+OujIoUGOEUo4vu8Uhg9N24QS6jBsWQjiYabg2G5RjPhfInqlCj8cCLQUxkiUvTQmhhEqrS8/x
nSoiKxJdMgZi9YvzeEwkbdG4yHS+o6KtsLICz1OwwqqOR6duoNXMPxkmUvStrXQgRnJxEjukkjOL
J35BTYE1EurR+KQb3J4pJidpWqtoY6Cct6zKUnYQ3T+H8nldphbc6aslSPfKfTG2/bJHK+CdVxvr
lCBajfl6BEm7qCyLE2KKyKSW2e1Rdjt/VQla6zq+CiBX5NJxPVxsSWk6U4BNjkf7iSGO6pGO5c9P
O6XIdqU9qWa5WvM4LuxtLAGe5uATfIKoHQQilsV4zpwKL15GE3mnpLy8qFfI+qA3sa2ubBsW0e0x
tCgN2F6FMyq5rRNRnbMrLWXxujaX2WgVk5a+DSuzweoicxFj67TuXuG1sVSQm0rfSY7jMFtLgZTF
ahmAtCoFM2UYqRqNKmiKV34Y0IwzJUhrjKlGmOOkuhdJ1xB5iUuWjVSd0BxaZyhJX1b5aUpvT8f5
+Xj0M8Skmz3IFwQ8T+eKctnXPeCdqzTHiaHSR2tr+HtcPZ26uF9M5pNddXD2aAEkbh32KOrVvgF8
uM+u5jkyjiCrwIaCVF3yzALqoQglx1wBYrkWzRmGODEgD4hmU7kqTnxWT/lsxTe8d15vnRBrF33Y
hUE/m6iRO183flEuLODFn58MCxfVsRCsOtw61do+l8FM0EQM53DredZ85FIkFkpt5eG6Bsza9DDH
R2VRwSo23Zas40Gr6SosI1MZDkrrVndZNZVEpKy42sEl1ZrOg2BjbdLNsZ5m4lhsIj1mT8e9vDYX
+xLYqFlkEZrFQ6iHYxshoLyz1ZzUBNi3aqe2yLrq5o7sDIdSpotP97PtOjNAINkL+gbqPNYllpQB
MyCyhgzOc/hDheGcEvZbFevG2cVCjT0cxEi4CpOt6ccbr6W82EzFyRaTdrtJDeKfqbassnJPVGzm
RizW6DlkJIbkl5QNGZKMHR3XpBbocuJVp5BvLZC1+ZTaKstlQ5BLtJf9Zg+8xt5rM5uerbUExbLY
qEbA9KtnNZHGep2GIscjIK/R9GahJGtnH+eneX4+FMBaOo67al0lbXazyrO1ZXPYjWgx9vCdORYT
mR2HzTRWz6hSF+mYOm3KWD229noGgnQk2ZRqaXhqEbgiQR1VEKnKS7lEfDvVsRglYxnjYrLfrICq
bJlvwlZcCk63yK3WcuRTUsH1SvTLEZxumNUOEeYjkHvvqAKLWGHYJVDnejvewbMT11cnnfAoO5SW
Eb7CgeGQtyt5mpaosFPztTVPx5jF+iK+t9x1LYZraVZIEJY24cSd6h26Dp6fUozSMsgplMjsivUm
h9vdrJmF/ixcQQ2zWCoUMxNddXomYi4OQEBuJ4I/P1V7XLFX1WrXR2PkLPgd6yrA15OQ1xFUsB5x
+23qZqezsmCjAmigVRfIqKkZImHAIq/LmhuZsMypO98gNkuo27tYtx9vZ+R2zjMrnVgewVoIDYbR
vAYSHLM52/tKPgrj484QkcN4XXkg/AqB1VsiZmkCcIxTncguc3lt7wi7TOiI+Gw4YjKu1JIKAd82
8SyNZrxpj5PT3symokaNKQqR91Z4hAWg9hNUTVHaJfm9P4PhtUG3paMm5ga1N/I2HcW2sJy2INCW
F6vnJ/GEx/oBKtCN3iVsdho5p7xXZ6VkWc7OVtmsnQk5rXWtRIpC3o3klgzTxRoiYe0gL497Izr2
bbIuOmUE1imsNmUWUxTGNJnWYOsZgUonJRsvc3gGhNvSo1hcqPCy5W3m3C7KAzsVqnqazJFOAFnS
0jrhind0eY+QgH1zRSuYdhFtrBFkPdJOWKyblkWUu8OG2WkgxC7JWqjYvO7PlbvPqMjjDCGmcD7a
LlxyypwTUthsphbJdyewslh75awqy/MhVF+CPDtLx/18Y2qp6YEU1FqtS7XdunK6N2cujpIUyOVd
m8iMjt0LQoebPQmxJ0XkUZYEOu1ZbdWlUHNwloIoa8guOhW9HfVKLOr2dLoZw5O54/GunXNRKXf6
WpCskWLXmzmy0x13mfWWPk9OY4kH8Vttr9UFvfH23XFcitWsTDskVbNEivCytM8W8IKaVCFOaW44
AjYYUzHycy3vN6NJUyiU1s3WWYyy8DA/kDvbRHhYSNyq8XJv2nrkOkpKLk0hfaAOCCvXHEeNkWDl
LWQKW2uaIIraciL0i/7Yy6IdENDMmqtKogjAhqgFIo/1pLAW9E5V9UJlPTWdzdcGl61AOryR5uu2
xyTXjNEUabp1Hlcjqkb1kctbvtqZfmMwGmfBqjzsSq3sCVUtc1mqcGyNz0d8uxifmdRbnsBS2C5H
W8SEg648pnwDb87aIm2siFJtMosiUndOZETBozizKGyBgN7Wx03gJ5EqcyViCzYmW9HZj5HA8ky5
m+0tkevp3Zgsi+mMVbY0bVf5jF571licgpSUbYUgT/K8E00k656fIgPn5SUs0cZGPdmnRRMcWMg/
ZQBEUwHnwJrqlOfG+26x6dkNEdbAhzNVK/pRq8sFngknfo55SHc29RD4U7hW06Y+kbvE5YU9WteZ
gJOKQng9t2kW2CrgiAXie8WJowVkFkyPy6LiEq4f8zN9VxsyM4724xHbXE5jozEbQmM4s0XbkRas
z6SYmjVQe/ah7mzHnEbiIEKNVEPKuvm6FGXE9iJmqh9yx0KSqbIuZX6yAdFuPQE5YFe6lgCNYMkY
s2C1CtxIcE3ylKMZoxYu7c/DiX84dw7Lzq1Y9rU8q5112gUSZ8cTWFhj9QE5o0wSbHgH5AujbTeH
Fibdu+tdeupY+ziniMQp+tU8dv1ZK8yFw9xwj5Rliwvu0M1clhydzTSvKxCYuGw8Jk/kkauXBLBI
IMzCvIBjpwd/u1+Senf2ioSWXM+E0wTWJXk6Y4g5o51SbLJXYkSZMg5kjBHyHM3hoydSSGEUOXrM
0xrEvapkUNy+82jgTZoU+O29wupw4uwpWCbxEY6qjjLd44a7HhOn47jOIoeIJwV39qL0sNyro4iT
Z4HHsiEBMnECPdXyOcJmbjEnZkK8n9hEbx3MXd1sCo6WJBep82U6XiuzhTHnOmRBqe4oUxY8vohm
jJXyK3aMQahNDScCTd1XUiLm4z2Kh/P9ZEEszyHFRk0y4b1M3k13eu5seHtut0bZq7uzrizihtZh
z+HmGwVmuaNp6VkCdzmwlrUAxcJGdC3RsSQt0pUdsI4y5aeAnaqo9bO0xOiWjc9LC9O0LqzUE+nP
PF+QS9NlESw7eIfxwmoJXQBx71YsWRBNrsMRPLKOrnOeqQ6PS6K4UdSTj2xhS3dVojLIZC6SiWMQ
wYzVQv48XZrjAg3ESD2D0BSkRTmZAS9jEKiucwi5V3zLNpBZPxeURtJChqA6D5aVzAiBJmK7XazP
y5kXT5LddDHhD8U6GQmzyl8085HBr9JGB3y74NhOEGYW2rPQgrxTqfpkLC12DSsvU2Me11pHSAdS
9qZ5KiYT6RDuXWsrLaRqnQRUXu9ZIHdA5wj4084Szb7bRg3IfyIbLrPVTiyjY+zsFjNsqTsHlveX
1dBaZhFCPNCZ0vacJJ30zDxo2a5jKtnxV7KzYIaSZXLldMmR9yIfnfW4Ol+MLeBEULNfz7DF597W
Eq/IBAlBnOlHM18EuVXeT5miSOL5VOxEkIMddkBuNTvuViTrWBBvHIS9WyVMr5cWRvEzWDgrZlEp
Wd6pkLj3LcXdGsF049jkuJgsobDDGxwkqW4NLTWPo4C1NNlzt1OzzJvH9LHttxOjOp3E5dpDHCmZ
VUzK6FcdG5qN+JAPLyx4t0UXISyfPRo/eZQ7nlZuhM845fkptolmdkBMK8Rk04rr8WqDNVwGkyy5
NyoX23oHcnq0Y41mMydiSq1Ly4TjutXY9hxVSnoe0qzT9Dg/pkOtVBEtSPMsWXNEg40MdiCV38Cn
klPoMSuF+4pX95C5VCdL/wDBAtpibTBrZIckUgFau54jukMW0myFM/D1U8guHGAp/BhbiS0RoblS
7E2NqTo7mBxtmiwmdiycM2V9BHZrnOCrCW7YEGHx02NMzGf7lai1ieim4yH7KFd8ySxwZOmtAh6P
OYizyCracWssd7Alc4ImENOjWhxOGEq0VXRM9iEIPTzDzgx/hymLcj7bgNBPmhlgpqMTQkSpuJSj
EvIPqJ+purqXPYtwFC9t8Lwys+3UaWTePtsQos+YghvbrQfmMz3N/HoG9wo6WelCiXQzoIVlVvFy
1nbwrlg6tkrCnU8i2UScjoCPdFGG3lhmFgeSHE4DYSEWJ5YtquUaPcZBK1dtL0lSMi4WZCAdn58w
sWukjQqbfUScNwh0jhjM0td0hqFgYR43PSoaNjIcqVlpE6Ras3TFaLU7cpnl9SBindqQRYMMsGRG
wJ9yIH+RAMXpFun1qBCw9U7P+PlSTBSUNSeRIQl1Qu5Gh3AX8qK/Ak4Ktzo+2pUQPBPRMDwAN+zh
c2C3wMoixYA597bmgjDUqdtpPDGpnbo/mv1CMOeL+RoMBoKA8lxKElQLx0yixvqGo+f8WqBwYFS9
fWIerdjQkKGWoBzv4iPn6CeFt+0pOkFWQdhpO4o+n1jvWIw6ly3WfXPIp+JQ9SIkJJ/qs3ke0mGI
myM7cqKxEYgnIxn2e1vO9sRetle6D1GLtT0hxglv1ExzkCxHtM/Gxpa2mzMytW2fhkzTjk/wYaxs
2xSGpujGaSA0mnLGri+E56clbQ1VfM7M8teKIXQJNs43hBbS/nJ6ko57wenHPqkYslyMeCFS7aI/
Op3vb2wjig4iX4iWs2kh6cxIyfOTtpUuFX7exN0lR8HISpecaXNUnV4q6YKDEZGRHwvept6LrTDa
gUAZeDVyKCbSiEQqSoCCioK6PQAbogyt+pFkWjt9FI5Vb7T1KpeWxvFYRpVOis9jORNnibhVxkzu
sSs2A5mbsLdjg5bs+a6zIPFSw3ccsA24MrmJxbV6qYeqMNa0L3V4SW1zUnJ5X22iW+/TU6lGKJ1C
meVZoC+VfpdqveWuGTk5QgTdGaf7ax3jPs8pmpo7ByjcdFB0vlb+6WGeQKExDekjNJ1eqv1ICY1U
EA8AX5+38nzkoRsyyqbXqkOKMzF6rRzM5fQw3H0ih0PkwGTjDU6clhg/vVbmeF2HF7khjRRR5/Oh
DvL56VLhONRyIgtREZYnWF2RdqZfZjVbJImiMBI/3xF1uOeumKWa1sNwhRgKzY6qy2vS3uOEEvDN
p48SLy3UEltfxzx6OEQo/eEEt9D8vIWMF8yIx20yk+DLAI1jIya0GU4m/unSm74HFqVFnp+EypzH
UqJcahfXdikY4wXwj6x1ngUKdpX8pmZlckxuUK46a6gaOfOztbvUgs5cQkNA5gMCMbgFOuXjUeev
ltdKSKNfF5xLFaHdQyNl0iddQDTIpTKS1ZXh2MDRcGN4z4ulumdS1M+F2f6i9zF+fn7q1612tPwe
whQzUUh2z3M8UVu7axUpxVrRiWb6TT0PBXbRBu7u6MECeVRRSQj5dO1c6urFVFruF+3zk5Hx/Ddl
8TcK4/9cGq0V1zLw3/6DgsTwX5+wB9pM3TpKQAviX5/wf30afj/Q6FpQf6OU+4G214fr0CMAj3jw
9usTf5yiyB5osHQ9Jd8GRyAE5s+P7rl5/6Ipytc+S/BN9T2fJv7+5tT/9/LWN6X38LX2/vFKfK5t
miL/6VX43mWY/526ST50/b+sV7TNz67D5y4sN651+GxIw0z8Wh0+y6b9QkrPlw+f6N1Qt1/3XOod
T4vh3Yy8VOnrItRYDaMhqAhyQVKkF3lv2128QOgF0/JRP6YjX6Tjk18UJr8A9q3emPWcOVurnSSk
IymRklRm4kW64uPUkVyIn+dnHQozpsHpvQerfGcjKu1OWmiVsQw98nXh3IaBT1M5DuxbMYZ35QxP
+Sj0W9cPTuJqJNo7LizwvXM+90dNF3aNiVWokoaQRu/l5pDZyGaGUGeC3JxwY8ZBe5f3NBBxMYuq
hs6oten2xrFY41hqemM5CNy+mVGj+XqCtMi8x3t03zotBSXwfE+datd0ttXYqA2Ip+SeXk0t1GSW
wIbsK0oKM5Si1VVokmtm0+xCQYCyTUPo2nhS7f1T1bt8zfXKtKEREfGkQlAcS8gzbSzpFjMvy8qp
I6cAFklA4C2zEaY0ie/wmD60ELQrD9v50oLYLD+cFkzNxGNqnYVcvilPBjolyKpEFugCbaU6IILg
LI+VJsnlLdBCRW4r9Kit6khYNdi6woj5dDau9iSbVpNkRm5XM2t2OJqOExSHab/fJVAEcpjS75Ky
jUcRkojn89GOdnNSGR5MIyy27GK0thT4SPSjxMlRL/OKMla4tW1LTrrnz4KgxUKqrEVVdNarsJfX
eKwVUpGPzOk4mhQElOD9dAry+kyMarUR+2MZr0/bgwy3raWDkK6OxQ2LGJOdmJozMWf3R66vSW4m
E4vlthHpY8iRvJ4QtbggW6uv+Q7MlLcVGacIVl+PRk2s5/YpmGKdbG2wbN14fGMyMnFcnyn3oNIx
dMq2vnZcOolEFkKIaXxmhvONr1OzsVu6z08zNLdac72rpivXm6scudstfOnUGWnayfhimWD5DKNa
vjh4Zdd4dt7we4VDWa3gBJYlBJ3VIlXhEpYPoecnqzGTZdBPdltWXcJFGLNyry6nejtBLgt1Ya10
UyXBFJRvP6T1Xm+EEfhP90Y3TdrD/gh71B997V6QB+63DgFfgGAWBPZpMHwazAxA8zrJo9/+s6zb
Rzwm6GKVHFo3vTxd7qtn2r3W/obDuimdH+OyNNcL0p/usZoCeKOmTspD4zbtIR0GHWbzv3wduE2w
5U7vc19fsRMZAa7h1PvoiVzo+QgDrvR8G//jXEWYf31CyfeRlWYeuf/yacUXRJ+80//9dDweH2zH
pkkERLMsSjOJ4hvPZnw3seS6aMtf8ZnEaBgIxHLXj2F++VzmRxlFUNi/Po0eUdCVG6+N/3g0jQIu
ksgjbPyaEvQPCY9vcugPn2h9bS5vUwCM/iL4n29gXM+/DnXFvgSo7hPgHgVosEJvrbhXzcON0R9q
vghSIMNg+6LUWxR4jTXU8HxTgrrlYu/x5havH1XmHLDhV2iyBOOwZbkoAz8JE/8q07e0eXdJg/Dg
VgBzV6M3UTzYydzdbi9BAn4JhfDbodA95Q4eirjl1e6r9zaDXlvnoFHSJVsQnHx61/TeG9M8SDEt
OTS/wmOkYJzPBjsJDm8z6/ZDg90GpESRmLsgNtzenfuf24+LOjmDsYAIfTBe6rn3pXeP3XfY9Rq9
v5HAw62vYEF6754OgAFDVPxO2C/8pocleTME/zDD/xihPEy6/4qTQj/CuS8aH9Id5raDel3nX43+
uLYe8U+vq3lEo8CTEo+z84uab2Vz79Hpr/RV1zjpUTd1X7X3XNVd3X4L5B19PO6t7qiaAs1Q9DWP
dV/ZrxPyNc91nel9r3Wr9Uc814Ok+6Wbv2aQFV2wvc5fqosMrNTHqHePfBgKgFH3tHF//+YWqnd1
9pIio8OG0z0O3iPTO9td6PQC/POjfEIA/dPhxfZ9/difd3X9Ua7d2wO6JeFbG0Ff9XXLL/4VKb0s
oih9MV6Lxm3ezN/e5jMFguh7xvQ+m/8E6ANURvHvofL7VuKVylfUn5n8ftw/g7V/kuQ/hLICMBFN
8DlIek8A8AZrb3yjyqOsvYXplxP39UDxdeJegX8xu+X7of8M7t6S5z+EvuzhkET5y5ZVcZ3iD6Hv
d4QQtzB9hL4M9R30fZ/PuNL3Cvyz3W2Kv2b8cEu8H2Lzay//5ZKz63nIXyA5+xrI3yk5u2fL7x1B
/X83ObvOXwi6HxURkENe9vqOyOvUu4nnI+aU/B5zevO080ESAdS/29QgK9O/Qjj7jTx/XjTAx4G/
/xU74v4wkFccwY1aEgZNkgWf97W/f1OBAMDo90WEV/a+juoDFCaRV2pEHmLwOxteGLwI3he5fNj8
/Z0YNncPh76otz+HZuTrm+Jv0+wVaB/hGvU9XPvIBtb/z7VbXLuY5x/GMBwBURR5L4h6k2FfA/qI
G0aI7yHWR9KaF9/7Ecz/DY4NoH8FxRowztUzTd3jZ4Px/RS77LrQH4n0bgL6EMUGP/nO/ZsvFLt7
kvMdev01ZYqXur4fo9PLFx5fJPp2oHlvK4X+iL25MY+PUAFl3r0T+RUVPrIHyINXhmKbIfIH4D99
Rv9//xnm4nOE8eNtBnmrGvAtmryO6pcbjntx29/EbvxA5f4o4zH6yD7sa5P5ECfw77Ag76P05zjY
r4PmH2k7LoGYEBz8OikvGv4xlgP/yAHpa5g+cthPkd9hN+5uaf497MYPUOmPshf4+zbqvrIX38eB
0feYidGHzhp/h/vPMg/JoUzd00UxP8Y8vE+6t6zDF0i/3Drco/PfxTp8v0Z/lHX4yN7at3P4AAWo
7zEOH9m3fYF7ee1nWYf/wnnUjzqMwpgRSEs/Xlb14Dno61kp+ouLAx89zvyVh0/fcfJ0u1D+g9Xz
v7joNayDQ/w9n9v4qoaewT9SRX8TyTvL4hniLoM/Ug/4WlnrBeand+P8GHHvla3+QV6v8/YGD2+9
9JerMlkGuZs3QhC6oJ//4gfWbuB4sJv/2kfWXiP1bUrLaeG56afmMs9PfbJ9wzD/CGb/FT/t/J2f
ICLQu7H9bY79PvY77R1ODS6bfIf1emBf8Eab+x91vscqJQ8vH+i7l77+lXK+I1jijZukD/nAu17w
1U863245BYiTNMnfTiZeMVO/I39HUzNwt3qent495vXjipxbA5mshqMF3733eZRX2EsygzW+m0u+
yt87n5j7kWHYLzc/2PeZnw98ZPX3kd9pfIjhzBwfPd7skQ3oH2p87j5m4WEK/Erb8949ideJQGMf
K6n9A4j3L2l09Mau0kdqw7+jJPpX+o137jbf1x1x75DmpziPR/aZ72idurcj9JF9g49r/Vflzk1u
lduHP093Z+NniBlx/D3l5y8582cE71YZzbyx1/PBk6GbdviK8e3PHf2wOqdb6fJnUd3b2vk45X5h
Cd7+XXV3960Mir1Hm1fSfUHwbta9XWb3sdOo76yw+0GbNH8De/WyXfS91MER+sMG6wXCu7kz7IJ8
0GK9/ykIf9jf+y+arBccP8dm/aLDNu/9R20fPmi7m4+/K9N8OWXzHjxje2XrDnnjhO1j52t3T9fu
H679HdjyvYH0j2HLnV21e2z5jjD6zWKND57H32bLI4Uaj26l/Omlb59q+dd/yOVXnyV+Y+/vXl3H
h55v+fXQDzR+2X0hQfhGjd75bN6bRc/v3nO5zSgRCMr9pAhffyz7MHxeO7tsw9zq568TGl2GkYPm
+jHuRx85cYcKJAoiJOSVh0Lejo1uY3ioh5fwGqNfjZHueJrbGy+vnBIFzSf3Bd81oXvt9PP7I6PX
Tz3/JKTbAdKfzdJfj3B8WwN6/T6dxXc8XBUbvj3iUc499EjxN6n6J/TvYStJfoStt93y62z1rxC/
sPZwqWT+r5D2T+L6cbz9xVWRwxTyaJjCRZhs/v0WExlSyttZ/g8i7yPbpHcLL1+b9UM9PXDY9uFj
tldiBHyoHHhlO/7OluzNZ6J/gJO/PIjDv4N+wF9Tt/fcf6jp/B3qQ21+rx1551hf6R97v/4fE8MD
R3O3rfIf4sMkfyk5ud3BXyYvvX4xwRDIbpUtMNZJcwoOfNG+9Tj8W2J4KEG9s3EL0kTq0SKmh76b
4XW63pn3u4qYUGR0J7m9l7G8thHyALdCAHP7f1+Z8ceq3y77/MH2Vz1Q278O9/JU6WFUPXw8U70l
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</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	Load-DefaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

$btnUpdate_Click={
	
	try
	{
		$updateParams = @{
			Description = $txtDescription.Text
			isEnabled   = $chkEnabled.Checked
		}
		# Optionally append an updated timestamp to the description
		$updateParams.Description += " (Updated on $(Get-Date -Format 'yyyy-MM-dd'))"
		$result = Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $updateParams -ErrorAction Stop
		$txtDetails.Text = "Policy updated successfully.`r`nNew Description: $($updateParams.Description)"
	}
	catch
	{
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>