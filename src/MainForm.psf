<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAKVQSURBVHhe7P3Xb2TdnqaJ9aUwf0cDoytJ0Ohi
JGAE6VqAAAECNN0zU1Xd1XXqO+d857PpvWEaMpPee++99957TwaDLkiGozcRQQYZJB9h7WAwyUif
yfS/h3gRm9ubtdd697L/4T8IgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgvAf/sN/uPa//+//+8InT58VhoZFFQYFR4hEIpFIJPoGFREV
X/j7738W/nf/3f+u0Duxf4n/+B//Y21mQSWjC5uMGjYZmV8XiUQikUj0DWpMpeXza9y4dQ/v9P4l
njz1Lxxb3KJ5aI6mgRmaBmdFIpFIJBK9SgPu3+Z31Evbv6e89/c6edZvHJihfdxI5+DU2w1ARGRM
oc60Q8vQPK3DbrWMGmgaW6JxzKhNe+aLRCKRSPQjq23EoKWX9b16Gvqm3yi1TmP/DG2japs5GvrU
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
py8q73GhElKTVVxeoZSEZEWFBOvkz1f0vKlVNQVZir+bprvxaUq+m6Ca573S+pLibt5UZk624qJT
VFGSqbsPC1RbUaqk29E6deJnZeXlKSQ8TjU1lbqXmKRzJ07qSkSqGp/XKD09XmX1dUqPj1NOYY2K
H2Uo41GdVtelqse5KiuvVFJ8omrrnistPlHZeVXq6+1QVlqiYpKSlZaZr5KSYsUn3FXCvRy9fvNK
WQ8TdfNmsH65FKasjDTdSc5SbekjpaYXqKLgof73Px9R0Ys3aqzI0O3kNJXXN+tdV6viY+L0umdc
r2of6n/803+p9nm9UtMTdfnXiwoKvaP83FwlJCcqPjVTza9fKzv9tvKftKiyKFvNvaNa8Wx8FnNz
B1rbBzteCQC4mxIA0HXuZQDwN9ey6dm5Ra3Nj+jaTyd1LTJOoefO6JvvjunKtVBdCDqnvLpWjXa/
VGpmuTXkV1Zigq79cl7/78g3On36J8WmpCkrK1X/53/+L506e0bf/Ncp5T8u06WTpxQem6zE+ATF
XLumf/nLvyvoeqTOn/hBN+Mf21dgxd+6qdSkRN0MDtH3f/2rTv7yq4KvXdGPf/tel4OjlRAbp9Dg
UJ04dUkdr9sUHxap+MQUnT55VkWleTpx7KiS7+cpI+muLp49pdPnojS7sqbix/f1IC1Dx7/5Vqd+
CdL502cUHHxL18Iu6/yFq7oRFq2oyCid+PGsboZHKyo6Tj/97Rv957c/6Nixk4q4k6i4qGhduXRB
NyKT1fmqQ4+SYvXDD6eVkhin40f+TSd/uqSQ0GsKiY7TvbQMdQxOqvLhHZ26GKmooF/03bG/6+ix
n5WSfl8//f2MQsOinO2cP35UR478u65Gpqui/JEqXnZqZdk6YppxPrODrrUCsELbpgkAuBsSANB1
7nUAsL9WY9t+L1+eHXNGyBvoeqWIsBuKiYnTy/Y2XQ89r7dji5JnVvn3UhQeEq2k1Fy1vm5R8p1w
Fdc3KP9+jIJvRSg3474SUlOVVVCu7r53KsxKU3zcXWU+zFVCcISCQiOcwYRSboUpOadKq+teVVXU
OX3yPysuUHJstNLyS1X/+LFuBAcrIT5WD3NLVFP7RLkZ9xQbFauMtFQlJqarqChbsbG3lPTgkVo7
evTyeb0yYmIVFp2iJe+aXtYWKuTiLYVcCVNaRr5iQm4qpzBLIdE39KShWeUVtaqpqlBq6kNV1z1V
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
ysoqZZeUqr6+UvnFpSrIzNbbnj61tbYqNiZaA7NfSBFb6OvuUm1NneqfN6viySvl5BZrempccenl
OncjXQuLHt9yBADEHRIA0HXuXwBY0+rCmEIvX9Wd8JsKux6q7//vX3Ti5yBdC7qob//jmK7fvK2Y
iAgFBV3Wr1cj9Lr+uUKDghWfmKxz54OUV/BA3313XImJqYqNSZedTYVZWRqcXVZ9Tobiw6P07ZEj
OnIsSPfio/Rv//qvuhCWpA/zS1r+jWZvmwGgtV0rM6N6XvNK7a1NCj0fpqaXrRod/vzPAH2tTxUe
FqM7EbG6HRmvF2/71dZYraT0Yuc1fo6VqX6dPXZS9wurVFlUotibScpNidG5y2HOTwD3UhL1MKP2
i3cRttLT0a7HRWWqfPJKaRmFCrserPm5nQUYAQBxpwQAdJ37FwBWtTIzovyiWhtEVlnxsboVcl33
8ktVlJqsC+fPKyoySpn5JSoueqzEmDtKSbinlLhYxcan6V5qnO7ERioyNk1vOzpVXFQm7/q6yrNS
FBIcotyCfGVGJ+mXn4N0KThcORkPFBF6XXl1TRp+N6yZ33EHwPbl9evX2/Z1c8zhL9D+6qneDn4I
nP272dzE79jWl/AsLaq2qsp5/x49zNSrJt+ofoHYxd/qARAAED9KAEDXuV8BwH+SeZY8ToU/q9w3
OzOpiek5Lc7OaMbGhJ+b0ey8jUXv1fLSnIZGxrS0NK/p6TlnaNn378edIGGd2JhW6W9pfsa5oC2u
rMu7NOf0c7+wMOeMIT81Na7p+UXNz8xq0bb7iZN+68lvr9OGwrWmgD09Peru6VFvb68z3dPT7fSZ
/ynfDQ5pcODdxnI96unu3pwOXDbQzec42/o4vdXA53zO3r4+59t9R0e7urq6nOnAZWx+Y2Oj3r9/
73wGge/DQZAAgHshAQBd534EAOdibd31WpM5f7M0p3b/mtP3v9Xat2lrTud/3Oatr/v+77QCWF11
muVZxT/f41axz4KEr5ne6sY6bdpZl/O8dd/yG+t0XsMXtOfYPg8PD2tkZORAOjo66vTvb9p04OOm
jcXgf58D34ODoL12AgDutnYMEQDQVe51ALCC2gzc7teoveaZmRlnvw+z9pn59zfwPTgojo+POwU2
AQB3SwIAus69CgD2fAsAdmItLi4i7qp2V8mOLwIA7pYEAHSdexUAJiYmnHUi7qV2nBEAcDckAKDr
3IsAYCeTzbfb6Yh77UEe2RC/HgkA6Dr3KgDYyXRQK5nhwdH/MxPiH9WOJwIAusrdDgCbNf4REQ+Q
W5stGwQAPPTuZgCwddjzbB4i4kHSyjurU0IAQNe4mwHAErTdBQissY2IeBC0i7/1M2EQAPDQuxsB
AADgMPKp8o0AgIfGPxoAbDl7bmCSRkQ8yNrdTCvfAiEA4KHxjwYAu+1vJ4u//T8i4mHQyjUr3wIh
AOCh8Y8GAAAAN0EAwEMjAQAA4PdDAMBD424GgPWVBfX0DvzmsPYrXl+rAQCAgwYBAA+NuxEArNmM
DeXrnRlQckqO7PI+0tOkp2865PWMq6yyUkMTk2p5Wa3qZ41qbGxWfU21OgcmNTH4WqV1DVrwamO4
XxseGBHxz/dTX3QIAHho/KMBwKadZefntfLhnTJza61PQGWlxigxPVGh4RHKznmgixeClFf4UGEh
N3TyxDndiU3S7bCbSrqXqLiEZDX3fpDHs+Ssz7aLiPhn6h9rIhACAB4adyMA+KfXFt/r1rUQPXyU
rcT4CCWm31dKaqriY6IUdO2GsjKSdP7CRf1y8abe9g2pJPueEpPu6vr1ML3s+7BtGwAAfzZWvgVC
AMBD424EAH9PgMZIf5dev+3S+PtBDY590Ojb5zpy9EeVN3co5OJJXcuq1PzcvFZWvPKurio/OVp/
PR+qiQVf71sAAF8DVsYRAPBQu9sBIJA1r1feNd+ynuWdx793eTlwFgDAnw4BAA+9uxkAbJ7HEzDM
5uaQrStaseGBl1cChuD0DRkcODQnIuJeuaOc2jJ/baNsIwDgoXc3A0D/u0F1dPY4xzAi4tdqX//A
jnlmZ5ev/DIIAHjo3e0AMD094zwPEfFr1b7t+6et7Juf901beWbhwCAA4KF3NwPAu4EhTU5O7dgG
IuLXpPXzb3+tmZ//wm//tzLQvsgYBAA89BIAENFtWgCwi7+VeSUlJWpvb98sAwkA6BoJAIjoNi0A
WJlXW1urGzduKDk5WaOjo5qZmSUAoHskACCi2/TfAXj16pWePn3qODQ05MwjAKBrJAAgotv01wFY
WFjQ0tKS838ry/gJAF0lAQAR3aY/AARKAEBXSQBARLdJAEAkACCiCyUAIBIAENGFEgAQCQCI6EIJ
AIgEAER0oQQARAIAIrpQAgAiAQARXSgBAJEAgIgulACASABARBdKAEAkACCiCyUAIBIAENGFEgAQ
CQCI6EIJAIgEAER0oQQARAIAIrpQAgAiAQARXSgBAJEAgIgulACASABARBdKAEAkACCiCyUAIBIA
ENGFEgAQCQCI6EIJAIgEAER0oQQARAIAIrpQAgAiAQARXSgBAJEAgIgulACASABARBdKAEAkACCi
CyUAIBIAENGFEgAQCQCI6EIJAIgEAER0oQQARAIAIrpQAgAiAQARXSgBAJEAgIgulACASABARBdK
AEAkACCiCyUAIBIAENGFEgAQCQCI6EIJAIgEAER0oQQARAIAIrpQAgAiAQARXSgBAJEAgIgulACA
SABARBdKAEAkACCiCyUAIBIAENGFEgAQCQCI6EIJAIgEAER0oQQARAIAIrpQAgAiAQARXSgBAJEA
gIgulACASABARBdKAEAkACCiCyUAIBIAENGFEgAQCQCI6EIJAIgEAER0oQQARAIAIrpQAgAiAQAR
XSgBAJEAgIgulACASABARBdKAEAkACCiCyUAIBIAENGFEgAQCQCI6EIJAIgEAER0oQQARAIAIrpQ
AgAiAQARXSgBAJEAgIgulACASABARBdKAEAkACCiCyUAIBIAENGFEgAQCQCI6EIJAIgEAER0oQQA
RAIAIrpQAgAiAQARXSgBAJEAgIgulACASABARBdKAEAkACCiCyUAIAYEAPu/nRjmwsICAQARD6X+
AGDlnr/Mm5mZIQCgu/QHADsBRkZG1NTU5Nja2uqcHAQARDxs+i/4bW1tTnn38uVLp/yzeQQAdI3+
ALC0tOScAElJSQoLC1N5ebkzb2BwmACAiIdKCwD2Baeqqsop7xITEzU8POyUZwQAdI1bfwIw7Zt/
fn6+JiYmnJ8BuAOAiIdNCwBWdk1OTjrl3Zs3b5zyjp8A0FUGVgK049G0W2HUAUDEw6ivDsAHp5zz
l3k2/08PAJ1dPZuVERD32qmpKc3M+E4Am7aLvf9EsPkWSKemPnz2mN0aAGzZ8fGJHdtARPya9H/h
MX3lna/MszsC3b39Tnm27wHA/vb1DzgFaX//IOI+ObDh9vl2LHZ19Tp1AT53zG4NAGNj4+rq7tux
HkTEr0kr2wLnmd09fRoZHdu8Hu9LAAA4SAQGAP80AMBh4lPX510NAHbbwX6P8Hg8iF+9djfAjln/
Rd9un1nlmcDlEBEPsnZdtrIukF0NAMvLy04BinhQtJOD4xcRD7tWvgWyqwEAAAAADgYEAAAAABdC
AAAAAHAh/3AAmFkkAAAAABxU/qEA0Dowq+7ReefJiIiIePDsGJ5Tx5jn9wWA8IjozMkVqXPMo45R
j5McEBER8eBp1/LeqXW19o79dgC4dOny4/7RaSctICIi4sG2tWdMz5ve/nYAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADiE/H/w
XY3rq9YWvAAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-CustomAppManagementPolicyToApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Set-DefaultPolicyInputsFromConfig
{
	param (
		$policy # The policy object returned from the tenant
	)
	
	# Helper to extract a restriction by type
	function Get-Restriction ($restrictions, $type)
	{
		if ($restrictions)
		{
			return $restrictions | Where-Object { $_.restrictionType -eq $type }
		}
		return $null
	}
	
	$appRestrictions = $policy.applicationRestrictions
	$pwdCreds = $appRestrictions.passwordCredentials
	$keyCreds = $appRestrictions.keyCredentials
	
	<# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$txtPwdLifetime.Text = ($pwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpPwdDate.Value = [datetime]::Parse($pwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	#>
	
	# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$maxLifetime = $pwdLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtPwdLifetime.Text = $matches[1] # just the number of days
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtPwdLifetime.Text = $maxLifetime # keep as ISO 8601 if not just days
			}
			else
			{
				$txtPwdLifetime.Text = "" # fallback for invalid/unsupported formats
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtPwdLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtPwdLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $pwdLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpPwdDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpPwdDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					# fallback to today if parsing fails
					$dtpPwdDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpPwdDate.Value = [datetime]::Now
		}
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	
	<# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$txtSymmetricKeyLifetime.Text = ($symKeyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpSymmetricKeyDate.Value = [datetime]::Parse($symKeyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$maxLifetime = $symKeyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtSymmetricKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtSymmetricKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtSymmetricKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtSymmetricKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtSymmetricKeyLifetime.Text = ""
		}
		$dateValue = $symKeyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpSymmetricKeyDate.Value = $dateValue
			}
			else
			{
				try { $dtpSymmetricKeyDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpSymmetricKeyDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpSymmetricKeyDate.Value = [datetime]::Now
		}
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	
	<# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$txtCustomPasswordLifetime.Text = ($item.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpCustomPasswordDate.Value = [datetime]::Parse($item.restrictForAppsCreatedAfterDateTime)
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	#>
	
	# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$maxLifetime = $item.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtCustomPasswordLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtCustomPasswordLifetime.Text = $maxLifetime
			}
			else
			{
				$txtCustomPasswordLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtCustomPasswordLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtCustomPasswordLifetime.Text = ""
		}
		$dateValue = $item.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpCustomPasswordDate.Value = $dateValue
			}
			else
			{
				try { $dtpCustomPasswordDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpCustomPasswordDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpCustomPasswordDate.Value = [datetime]::Now
		}
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	
	<# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$txtKeyLifetime.Text = ($keyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpKeyDate.Value = [datetime]::Parse($keyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$maxLifetime = $keyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtKeyLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $keyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpKeyDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpKeyDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					$dtpKeyDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpKeyDate.Value = [datetime]::Now
		}
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
}

function Convert-TimeSpanToIsoDuration
{
	param ([string]$input)
	if ($input -match '^(\d+)\.(\d{2}):(\d{2}):(\d{2})$')
	{
		# e.g. 1.00:00:00 => P1D
		return "P$($matches[1])D"
	}
	return $input
}

<#
function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}
#>

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkPwdLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# customPasswordLifetime
		$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			# Optionally refresh the UI
			Load-CurrentDefaultApplicationPolicy
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
			
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		$defaultPolicy = Load-CurrentDefaultApplicationPolicy
		Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>