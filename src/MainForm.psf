<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAF/GSURBVHhe7d33byP5oiX2/c2G/4y19ycDaxg2
bMMPu/CvBgzbMGAbtnf3vb3v3rlz7+Tp6TDd0zknqZVzzjlnico55yxmijlTJCVKx/gWRbWarW71
TKu7JfJ8gANRDMWiVKw6LFb4F/+CiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIKGJc+1f/6r+oefT4WU1CYnrN
q7hkhmEYhmEuYJJTs2q+//HHmv/sP/1PasIX9m/5z//lv+woqmjAvMKGeaUNc3ILwzAMwzAXMAsq
sRw34cq1Gwhf3r9FfPIXD+id2UL31AZ6pjYZhmEYhnlXpn9nPuNjxHJ8aEmLoamV0wtAckp6zYrW
id4ZOfpng+mbk6NnQY3ueQ365hVH1zMMwzBMNGdgThFc0E5unBrZ5Ab6xGPmFeidFo9ZR4/0Qfvd
Effpnd7CwLwSfTNyaRjhwz0pYpzEuIlxHFzUYGR2/fQCkJCYUrOidWFgTolB8eBFFfqnFZjtHsZS
jwzDA+voW1JjcF6BQXGfeeb0KE647qQcu9/cOy4zDMMw5yLDi2q0Di6iqnUMNR0TH5Tazkl0ja2i
uXcSrQPTaOmfRtvgLGRjS+gaW5J+do4soLV/+ijNfcHH1HRMvjGcxp45NHTPSBGXxXXSbR0T0ji1
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
i53FLT1Gp5dOLwBERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
REREREREREREREREREREREREREREREREREREREREREREROfU/w9wBanuY9IGAQAAAABJRU5ErkJg
gg==</Preview>
  <Form>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
VzXybJW/RCEC6Ollkn/8Z/P7/wfcXTZo0s4AAA==</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | State: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		try
		{
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
			Show-MsgBox -Prompt "Policy '$policyId' assigned successfully to application '$objectId'." -Title "Assign Policy" -Icon Information -BoxType OKOnly
		}
		catch
		{
			Show-MsgBox -Prompt "Failed to assign policy. Error: $($_.Exception.Message)" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

function Show-PolicyManagementForm
{
	# Create a new form for policy management
	$formPolicyManagement = New-Object System.Windows.Forms.Form
	$formPolicyManagement.Text = "Policy Management"
	$formPolicyManagement.Size = New-Object System.Drawing.Size(500, 400)
	$formPolicyManagement.StartPosition = "CenterScreen"
	
	# Create a GroupBox to contain the policy management controls
	$groupboxPolicyManagement = New-Object System.Windows.Forms.GroupBox
	$groupboxPolicyManagement.Text = "Manage Application Policies"
	$groupboxPolicyManagement.Location = New-Object System.Drawing.Point(10, 10)
	$groupboxPolicyManagement.Size = New-Object System.Drawing.Size(460, 340)
	$formPolicyManagement.Controls.Add($groupboxPolicyManagement)
	
	# ListBox to display existing policies
	$listboxPolicies = New-Object System.Windows.Forms.ListBox
	$listboxPolicies.Location = New-Object System.Drawing.Point(10, 20)
	$listboxPolicies.Size = New-Object System.Drawing.Size(440, 120)
	$groupboxPolicyManagement.Controls.Add($listboxPolicies)
	
	# Button to refresh policy list
	$buttonRefreshPolicies = New-Object System.Windows.Forms.Button
	$buttonRefreshPolicies.Location = New-Object System.Drawing.Point(10, 150)
	$buttonRefreshPolicies.Size = New-Object System.Drawing.Size(130, 30)
	$buttonRefreshPolicies.Text = "Refresh Policies"
	$buttonRefreshPolicies.Add_Click({
			try
			{
				$policies = Get-PolicyList
				$listboxPolicies.Items.Clear()
				foreach ($policy in $policies)
				{
					# Format each item as: DisplayName (PolicyId)
					$listboxPolicies.Items.Add("$($policy.displayName) ($($policy.Id))")
				}
			}
			catch
			{
				Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonRefreshPolicies)
	
	# Button to launch the policy creation pop-up
	$buttonCreatePolicy = New-Object System.Windows.Forms.Button
	$buttonCreatePolicy.Location = New-Object System.Drawing.Point(150, 150)
	$buttonCreatePolicy.Size = New-Object System.Drawing.Size(130, 30)
	$buttonCreatePolicy.Text = "Create New Policy"
	$buttonCreatePolicy.Add_Click({
			# Use input boxes for new policy details
			$displayName = Show-InputBox -message "Enter Policy Display Name:" -title "New Policy"
			if ([string]::IsNullOrEmpty($displayName))
			{
				Show-MsgBox -Prompt "Display Name is required." -Title "Policy Creation" -Icon Exclamation -BoxType OKOnly
				return
			}
			$description = Show-InputBox -message "Enter Policy Description:" -title "New Policy" -default ""
			$passwordMaxLifetime = Show-InputBox -message "Enter Password Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			$keyMaxLifetime = Show-InputBox -message "Enter Key Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			
			# Create the new policy via Set-AppManagementPolicy
			Set-AppManagementPolicy -DisplayName $displayName -Description $description -PasswordMaxLifetime $passwordMaxLifetime -KeyMaxLifetime $keyMaxLifetime
			Show-MsgBox -Prompt "Policy '$displayName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
			
			# Refresh the policies list
			$buttonRefreshPolicies.PerformClick()
		})
	$groupboxPolicyManagement.Controls.Add($buttonCreatePolicy)
	
	# Button to assign the selected policy to an application/managed identity
	$buttonAssignPolicyToSelect = New-Object System.Windows.Forms.Button
	$buttonAssignPolicyToSelect.Location = New-Object System.Drawing.Point(290, 150)
	$buttonAssignPolicyToSelect.Size = New-Object System.Drawing.Size(130, 30)
	$buttonAssignPolicyToSelect.Text = "Assign Policy"
	$buttonAssignPolicyToSelect.Add_Click({
			if ($listboxPolicies.SelectedItem -eq $null)
			{
				Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
				return
			}
			# Expecting the format: "DisplayName (PolicyId)"
			$selected = $listboxPolicies.SelectedItem.ToString()
			if ($selected -match "\((?<id>.+)\)$")
			{
				$policyId = $matches['id'].Trim()
				# Prompt for the target Application/Managed Identity ID (from the main form textbox e.g. $textboxSelectedIdentityID)
				$objectId = Show-InputBox -message "Enter Application/Managed Identity ID to assign the policy:" -title "Assign Policy"
				if ([string]::IsNullOrEmpty($objectId))
				{
					Show-MsgBox -Prompt "Application/Managed Identity ID is required." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
					return
				}
				Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
				Show-MsgBox -Prompt "Policy assigned successfully." -Title "Assign Policy" -Icon Information -BoxType OKOnly
			}
			else
			{
				Show-MsgBox -Prompt "Failed to extract policy ID from the selected item." -Title "Assign Policy" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonAssignPolicyToSelect)
	
	# Refresh policies on form show
	$formPolicyManagement.Add_Shown({ $buttonRefreshPolicies.PerformClick() })
	
	# Show form modally
	$formPolicyManagement.ShowDialog()
}

$buttonCreatePolicy_Click={
	
	# Retrieve values from textboxes
	$dispName = $textboxPolicyDisplayName.Text.Trim()
	$desc = $textboxPolicyDescription.Text.Trim()
	$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
	$keyMax = $textboxKeyMaxLifetime.Text.Trim()
	
	# Get the overall policy enabled state from the existing checkbox
	$globalEnabled = $checkboxPolicyEnabled.Checked
	
	# Get state for individual restrictions from the new checkboxes
	$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	
	if ([string]::IsNullOrEmpty($dispName))
	{
		Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Call your function and pass the additional state parameters.
	# (Update your policy creation function to accept -PasswordState and -KeyState parameters.)
	New-AppManagementPolicy -DisplayName $dispName `
							-Description $desc `
							-PasswordMaxLifetime $pwdMax `
							-KeyMaxLifetime $keyMax `
							-PasswordState $pwdState `
							-KeyState $keyState `
							-Enabled $globalEnabled
	
	Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to delete policy ID: '$policyId'?" -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# TODO
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		# Retrieve the assigned policy/policies for the application.
		# This function must be implemented to query your system/MS Graph for assignments.
		$assignments = Get-AppManagementPolicyAssignments -ObjectId $appId
		
		if ($assignments)
		{
			# Format the output (you could also loop through them and format your list as needed)
			$result = $assignments | ConvertTo-Json -Depth 5
		}
		else
		{
			$result = "No policies are assigned to Application ID '$appId'."
		}
		
		# Display the result in the textbox (it can also be a multiline textbox)
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt "Error retrieving assigned policies: $($_.Exception.Message)" -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>