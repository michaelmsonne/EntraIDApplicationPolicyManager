<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>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
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhFxB/n/rlAGVrCjWIQAAAABJRU5ErkJg
gg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $global:ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formEntraIDApplicationMa.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-CustomAppManagementPolicyToApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Set-DefaultPolicyInputsFromConfig
{
	param (
		$policy # The policy object returned from the tenant
	)
	
	# Helper to extract a restriction by type
	function Get-Restriction ($restrictions, $type)
	{
		if ($restrictions)
		{
			return $restrictions | Where-Object { $_.restrictionType -eq $type }
		}
		return $null
	}
	
	$appRestrictions = $policy.applicationRestrictions
	$pwdCreds = $appRestrictions.passwordCredentials
	$keyCreds = $appRestrictions.keyCredentials
	
	<# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$txtPwdLifetime.Text = ($pwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpPwdDate.Value = [datetime]::Parse($pwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	#>
	
	# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$maxLifetime = $pwdLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtPwdLifetime.Text = $matches[1] # just the number of days
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtPwdLifetime.Text = $maxLifetime # keep as ISO 8601 if not just days
			}
			else
			{
				$txtPwdLifetime.Text = "" # fallback for invalid/unsupported formats
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtPwdLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtPwdLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $pwdLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpPwdDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpPwdDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					# fallback to today if parsing fails
					$dtpPwdDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpPwdDate.Value = [datetime]::Now
		}
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	
	<# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$txtSymmetricKeyLifetime.Text = ($symKeyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpSymmetricKeyDate.Value = [datetime]::Parse($symKeyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$maxLifetime = $symKeyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtSymmetricKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtSymmetricKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtSymmetricKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtSymmetricKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtSymmetricKeyLifetime.Text = ""
		}
		$dateValue = $symKeyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpSymmetricKeyDate.Value = $dateValue
			}
			else
			{
				try { $dtpSymmetricKeyDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpSymmetricKeyDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpSymmetricKeyDate.Value = [datetime]::Now
		}
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	
	<# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$txtCustomPasswordLifetime.Text = ($item.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpCustomPasswordDate.Value = [datetime]::Parse($item.restrictForAppsCreatedAfterDateTime)
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	#>
	
	# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$maxLifetime = $item.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtCustomPasswordLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtCustomPasswordLifetime.Text = $maxLifetime
			}
			else
			{
				$txtCustomPasswordLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtCustomPasswordLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtCustomPasswordLifetime.Text = ""
		}
		$dateValue = $item.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpCustomPasswordDate.Value = $dateValue
			}
			else
			{
				try { $dtpCustomPasswordDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpCustomPasswordDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpCustomPasswordDate.Value = [datetime]::Now
		}
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	
	<# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$txtKeyLifetime.Text = ($keyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpKeyDate.Value = [datetime]::Parse($keyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$maxLifetime = $keyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtKeyLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $keyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpKeyDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpKeyDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					$dtpKeyDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpKeyDate.Value = [datetime]::Now
		}
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
}

function Convert-TimeSpanToIsoDuration
{
	param ([string]$input)
	if ($input -match '^(\d+)\.(\d{2}):(\d{2}):(\d{2})$')
	{
		# e.g. 1.00:00:00 => P1D
		return "P$($matches[1])D"
	}
	return $input
}

<#
function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}
#>

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkPwdLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# customPasswordLifetime
		$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			# Optionally refresh the UI
			Load-CurrentDefaultApplicationPolicy
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
			
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		$defaultPolicy = Load-CurrentDefaultApplicationPolicy
		Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:GitHubRepoURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website $global:GitHubRepoURL"
	
}

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>