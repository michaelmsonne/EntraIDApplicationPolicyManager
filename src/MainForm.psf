<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>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
SqWG0i+k+sDjw8VvcWNjW2oL8L7f7NEAYDSasbGpODUfSimNJsWx7eQw4eaWAnqD8bA8/iIBgJDz
xMkAEHlNCCEXiXeVz580AIhqB3E9wufzURr1itoA8ZuNFPqi+kw0njk5HqWUnmdFuSyOdSf5pAHA
7/dLB1BKz4ti5+Dvl1J60RXHt5N80gBACCGEkPMBAwAhhBByCWEAIIQQQi4h/3AAsHsYAAghhJDz
yj8UAGRqBzYNLmliSimllJ4/13ROrBl9ZwsAqWmZddYAsG70Yc3gk5IDpZRSSs+foizftu1Dtm38
eAB48uR5h9KwK6UFSimllJ5vZVtGTM7JPx4ACCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCLmA/P8B8a6cf4ig1rMAAAAASUVORK5CYII=</Preview>
  <Form>IkUh1Xpy+iwBACODCAAAAAAABADtfVmT4kiy7nua5X8o66d7TXOPdiQdO9Nm2hEChARi0cuYJLSBdrQAv/6G
IGttIEkqq6aqz2RbZ6WQIsLD4wv3zyNcwf9ozsZzq92fz08fPvzP+eJDdci9f/4xPewqL/mvRZSu
s3b3X1JWJuff//hw6dY/Psy9chdl6T+J/0K6//7xga/jqi69f6ZeXZV2/I8Pk9qJI1f1DrNs66X/
dCjKJl2yhzI44SE088eH1E5Ayz6oT0xBEUVg8xyUsCtQ78j+44MbRvG6BEX/4DPwQBbv/jhJDmSf
lFnuldXhpQ62rrKpa8eeECVe2skFHu394wOK/w/88dHXio6ytffHnxJo6dUynO1u+SzOyj/+XIRR
5b1agI8jL62m0RG0gGIM/Y8PNIG+WqrTNJeVa6+cVoe4Ey7ae+tplAbx600qbpZ+VBe4y0WpXR7+
ZFmWY1mRVXjwV/cvy2ci+EsKwC+++8Wefunsx/svP6AUOxppLCsIQnD+6PmJfcef56fZcAmz4gGF
9+tR5cN2d41tP17Tb6zt3QSTd9XzE9ly5dBzOfuAp1Kyq8gjU6rQOre2w3JrQjnsMZPCx5vT9WJX
klgMnl+zn55vpa78e8v2uTa5a+Mko9C1OeraJPJiqPlTe1qmjJwVJMzkmpfCpt2nYFQOoZdrOypT
oGhwf148P51KgBoirOvl4FON3yHbx5/PMp700pfPMqqQn9nRMYVxlyFhSF/VDlwQ/ham5JBsGGfX
NPCCGlLPT+dPoDKEZvB2MUxACQj0qusl6EWT9s41di24J5lPLd4l21c/H2WkzjUc9+Da73ctwGkl
AAmKsF7C6Gi4gaHNmmjgDiHaEAb/b2FyM6R9aHWA++drCN+CJzLcG8KoC0r0Cpn0GUqHnJPMcDdS
9Lprkf4oc4e3+zT8uZedzOtBp0c8aRugx6UNARndyQboDTpugAy7TsYeNIxgqInAdUnUN69Pz1Pa
JIKZpUC81Pj85PAwwEu2Ixny3OYrmr409hP5VL5+fhrVPlyslnFXfafJN8r41fXz08dPKG8WnWuE
8tBbws5m+IXMnzV9TebuPkBI98Qe7UZfPvW6l0ikD8YSetHLG2R8fnrtiXONG/+TzCc9d+iwPiP6
r+j9rFn+NG+TrPw4+uS6jF7G/k69vVXzZ5lPej612CEa4A37NA/5b23HJ80fx93MTz1kkpzxdXns
X9fbW65BTz+i49Tm53lInuzd+JOV/haxQK87oNfTzP849o/r7dJ1N09f0fTZdpzt3Ummr2U849Xq
7hvPT+sjlcLMjAeavTjzKa/rBd6hoyKgj9c39aZ1nxy/kOnr629tx8lCnqz6SWbjozf85E9PUuty
53umJ7vfG+Pf9LqrcROCPggoBMzv7tjCJDymJ7CMaWBC1me9nWTYfSPTAtccmIAEYKWprpcuDsYO
H1PA1uCXZD7Z6OenrQw8y8kfGp2M8ItmdyeZtXXe+VPQcB9Ygm8RmxHe5CwjuiBgn1Gfn6oJDE/L
GQyjHvgE2hw9GMbXQAYG90ANXidTM16WMGbTUANph8kEPqw3GYz7HAMzaOtvYIRpkm6kvsVb51k6
bwjmXScTBmTseIfmslN3CUuyxfdIKet8/M7upzA0i8jJ57EHeqOHZq9h5jsYh6fUEIYRwLZgpmNf
4LqTWcbghtk2kxK2nGMPxhZARmZZT/Bzn5AeCu6vuuvnp1MJpEBADU0DHBuyBjJ9gY6TN+w8OMyc
ZDpzp1SC98awhgHfsymGQqAE8BL7+ameNHAygg+ghi0Y/ZrsNEs1eyCTAVrQM7iTsQQt1j1wPayb
j9dg4GBGrbs+AAG6+6CnXz/xTYkElIASBAhBQcvNuUVodYSH8KLcUPBZpnHZ4M2UakBPsa2/7MjT
0YcbkwYNoaUJN5BD+j7M+JMKhn2E8qEAgZ0XPZUiaLGPASwYzAZc+ytwLXfXz0/Guvtk2X0inZ54
5Vrvauj5KePDBA3h5xbJJmZOekMnFHySCaHGMMT0wYDamj+EJWVPwqQ8dcGtPT1BwZzAKBjGGI+C
ocmyhulNRcPMBIMp0CJQDeKsT3qTcb+TAQef4B4Y7YRojqDKIQ1jmwieMNkr12l3XUE40tW2QYEC
T21SjdPAtC8wPnSSaQMAup2lB3g/tSzA9pMFQLUVgq7CSgn0Ck18MD7Op/LPTzQMpO71C6ZhdLyh
gF46GWdrIPMUB73I6xKDofIIelnSEFAZDCAFNRevQW1ff7JnNArgePmxTYKBKPig4jhMdjJBQEYm
72RkB3ECt7xlNQybyDOAq6n+/AQ1MEJ78Jc14J3UNDwDmi4buoHCnu/AWScjjbc0eL67z3R9gv1P
z3fXnd6+/uSv15/1cm5xtgejimzBvD3J1Ml4BDI3NGAOycI5S723V5YPG1k6YWDIcQFo8K6XX8j8
GR1w2l2Tn6/P95+fPrf5rQx3XZ9aJKvjHu4NjqCngDl3MnUySvlHzXZoeJGZKLr78L53BIPtY7da
6PT2kEwXr0FPT5+c2uyXEx9odgnD5EmmzzKefj7LPCJD4G28rQcsJFnhe1Aefxe9fXX9/HRds6DN
nkG86DU9y9Tp9QtK9gnBNN/df36KciA1DJExIKB0DTevafoevd0oATvgeghm8LnFb/TKf9brV7z3
s9Tr7ol9nncuQe5GhpkM63tkvqi3G9enGhG6puB9AfBHdi12swqWz3rrW99o9oufTwg+y0x3tgPP
qwJo9yTzi57xN+jtlVl1qpG2d93kfn6ygX7PbXa24PANYu+RmRmcy+dZN7POY/WCaexjm2+VsRv7
jr85axAzn0c/2XSjD/hR76XNjzLckvTzzxf27ZOmATq6eQj3TvPwZDvO9g7YaOrsWU7eEHJ63byG
NviLdyTAKHRSTvr1S4l+54vy/oaBzzV2o9/vWph8bvGGbPdpmna769MshKKTvcuWwEZTUx34lZM3
7Dw40Bua2oBlWliDn306HVXMi90/lTjJeJr52bnGzupfHvsHV6U+yyycbEt+ttHPT6DNaYwB32OF
WyDDycebuyPgSsPRx+vON4EgFdxfdDJOTzJ2M/+ofqrxO2S78vOxti88i3Xyht01wN8MtlcdVxqM
kQZuZmvAlonuWrWtSefzHVgffHqee8HbO8t27w8H2BnNGhUOS4CvAU7asTX74zVAyJ2z5rUfGG7h
btbD3Z/glwDDAcv6XfUCTIAHTuuzAtQ963e/hFPDp6mgnQQ9LRqvul/iqca/9vTzE/KpxOcaJqca
u2a4k6bPLXZ/Tro/+x2LPslEd79gEBzS//wf+GXJ+2V5/LX18pG9j5Lo6HHZ/o8/JTvevb7EPga/
//jz2v7Fq8WnlV1Wk2wXdc//8SfvpZVXTt3S89JXy868ffXHn6dmPyjChy8a/jCyUzvwElDbh0kG
Pj28fFL+tVKx6Z461zjM7PX1zvyru/0/8KnAx9Kv7x9NIrfbEgIq/eG7SPm5KSfbT2vgocpq5N3a
QLqwX5IAHX2+/XnLJJpzmtEiqhxkHfbGUzMUzQ6rUQdk3uJPmBVI0Suw85RcczMT3BvKEx7eh5zO
skp/PjBEyXx+8iSqSh2sHK/X6D5meJeN9rvFse8aBzE7boJ9hoTLaTlnV2O7RgdpvChG09ZcOvGC
5HvhYIvkUqsiQ7gVNUBfdtpwxAZhyE9FV+D4WX9T114NQcfeMW2Q/ZomSBezPZaCcYJsmRHeYHu0
nCzTZpIm/mwsoNQopum0Z02en3Cylwgo5OcgBLYHJcSQ2/0+DDfMbniMe04Oz720Z4/wHEqP656f
H0BgnBjWqtUOQydnOV6B8WUepygo8/y0EfoUmU2WeZ0c1ySxNRLLH4t9k92Lk2PWnmreBB4v6o10
ADWoIQSv9XLgsvZo5K5WLtYGRkMh2EHcPz+Nml1EuiAMR7PJigClyxlX531tPNWOQ8wK2FWx6dOr
1Yo45txKHA7HTDCbiVsdiNEeXOzUmpxwLGslz09mHDprZavze24DHpAnykIWBzHj6l6ymoTi6WlB
3qxGcrHgRwcIGmi7ZTCOwLOyPFmwSSUuZGir7Aygt9bonpYSxxHGBroQFVb0LaXrYXTkSh0iFZNt
7RGSZqtTr4/DlIWw9VT01ApTkO6zo5Pl67lJ889PnFotNEs8PznOTMTiZ/yo77hCYnR6WdEtWY+Z
MTM1eJptm8FRADJpI01fEw19WPOKaBMGNO6efX5a0ZQEO0SYZtm5Rm1JEmXiR5tTT0aSv6GXHqTb
3YjkQUlPJAehJlZ80mW7JyFHQA8o32np+UnujyQ8hefKTj/dndMAvtyp98t2OhQ7OUZzn/t8X4zy
US+F4dESgWCo14MbSAPuf9Dkz09zwAb2GwGGfGfZ31H7kGFoa7kan9oFoxgKBwdvmvXySCibAUxD
QjNrKLwnAH6P42gMVfmywZmFy6Hu85PA+BJjAWzlu5PmFwRR6LWA4PAmr3qAbtQcNcKldmaxPsk2
hogYoTaGT1pwNtGUV6SZwcxCMZbBzBqbLKSYwc7o9FIfphkR6OVoQUh+n1PGkIJPWEZegN7OAKhN
XUHj0i0CNm/dwaLZrDtUJdYm4fmRDGY9t2mQfkOhS7QHLY4HlYDGgxgFnqreTWZUiQRDc01aowOQ
ZxrazGpID3Gra7lqd8aeDd1JuUO4RGGzQHx+4pX1sNz1WWbK7ZS+Hnib0N9w8H4MRny33+30uMeu
tQXUr11TOQaAJcZsMJjxSuhM3Irgc219fJF98PwkmoZytFM84MPBTJ20jHgYL+HjbkFAWnFEtM3Q
iNPKNMWSSqHjBOhrXG8jTRFFfekVq165xciFkUQK3FLPT8FgE371FMuGQYUOMDtu+CXVC5f0BBr3
wAy3VwmkZ0o0ZTPaM/e5mpo0MXaYukbLQasl2gjMem+VaFamqG6fR6QIb1cUhDS8LSpCo3F4ECkn
C3UEv61QAIjZi81uqyEDzjZ3QUjw5YGQ1uvZhsEjMKZHwiOEULOJk2ZdKZI2K74Qx4dpmemGLFDB
gt8LwQCbAvmcHZvVumNp1dKVcJI5CiekD7eKt1+FIEgWVRPCV8EolcroWM7XHO8xwwT1jt3MGnk7
0zXYUjKwfTBqh6mwNTV3z/byGbntLVb1itrK3k5g0YiYAoQQQo8xullD78e7DShZ++NNmg1oX+mx
gqQbscFXypEdUopALnqFP0GNrcRMEOMkU85EBi+K88zQKez5aTaxV2Unx3BsdXfQSbXYZLNldH76
9BnGi75oroVuZuPsnhKn0mpNi5q84HqDymrhSbFcUszx+Qkp/Xa0qZPloOYhVCinfa5ZCs5p5gyq
ZAhmzsbK3NFO22V5i6ucPSbMwNYaf24enYRdKLlURCKyHcI2CKiUUlV77rGzRuNd7BlihPWDqZau
tbEpUOt2C2H0eFQBWuQ1+oxXR6Qj7rdVPBF4b5ZUnV3bHVNM2aqH56eC5URW9R0Ry1S+VkUE7Q0n
8DEpeyvcb3KcYcYDH95tkcUCWEi7FSkwF+GSHJM0Ugi5VJcMyVAePhoHIKz19mJIKRsOD9e5GsqH
eOkPU65nwYWf2yjMkK3fwnS7iiU5VcQq3Yy3uDyMWtwFMK80VFNxxsNFjeotEOBl/FWg5/pxUmQK
ZmYiz2s6EgTiQVjLgyzS4QmgrscNlepIH2lUcjMDHnM4y/yEGGoSNkZ69pzGxzvVzHfA11eJwI8k
rAcdFNa2MqbY0zsrWlB4PFSC6UY6rvgpIa5aPRqUmDzCjHWxGg1zuwi4LesiMqZPwHOtcuhJwIbw
SjQxIccZoETZHuvBfCeI2D7WtvbYHti8qGIS8HZU2FRMq8WFOm6O8cSMye1xZ6ymWaGw/Kzc014x
p5+fgIv1IVQJsnA8k9xgtucmB21YNIe5YzYbRZy1Ek8ObCkXJDlARJnBt61cofOq9mymQhQmGgCM
FkqOCjXgIUupV9eTfQQd+GioiB47XSKtHg4VFcXx5REdeVOU0JdhgUhoPmyrVbuvaHiw2cEUrAYK
4Y2EWQL4g0R21nK0wfjN1q5c3BoGiANijIjzKhlScRHQkYr1xlnXU4Ka4YhzAM5p1vePzHBBaBPh
GK0xnaNEwPW2ugVm1lFchyozalmjZrO+B4vyQg8kj5SpEYwqg6k/YnJpkascqpHp2NoFQ2wArJUx
VpXIRhjU4fquAvXQfS/2ge3dHOZ70QrQQcDOhniruVzmjQG+cdT099BexqpxzwqGnS0xg0Eq831o
oTCGRw238x3H4yoy2OwHMS+uAOOS5dxcEePoOCF1Hsn7eZ7O+5GMyUYVUwd1a2yOh8MW2iylItsP
Rj3SGyxhCRuS8p6B96NYz+3drF4fMZUFzGGHQCbPJUCGXN23jT2mC8NwA4V0hwPAwcyZxEOl2hOP
JMSt0JgOpKptVY8+tihHUdiSFuKdObQmBs8vn5/QvjtOOd+oxgNrZRM+v/eXTbXyWpEfrg+O3CBe
MiYp3h5OFxC8ndY9STxwJd7XYJ5ohrult14QpUUfSQmM6UGpl0qKbuoRQBuj9aJqZypupm8GNiVu
tMpwNnsiKs01Bpsq22KHcA1X8KA33K6pISCBNuyaXO74WCsDvWF82bBachiQVe9QjqTjDiVXpE2v
MD0v+vCW98zZ1jyw48Y3PRQT0IySCt6FrHCKyP70SDcEV7Ui0csJgJB9fzvSJGQsmSgZBSG3dHzV
xfTj3sZQ0q4OEifzG1dQezpOywyzryOEI+kVz42PvIbLJg8KDy2DK4yYfH5aVsfFCtvvJ5uVOhoc
3GHGEmqlTWSVGwb4Ya5Q/s6Y94pmm+sSvncDjZkvdROwPbIfSxIF/rIWM6iV1G5JURgYecz5BSEN
IuAXt6LNsTUaTpdltJynaIry6qqnaO6k5pHxfArFuQNP+0kh4dNFNTJGB0vt1bNEO9vepent68Fk
5ujbWA+FAeEYTkDM2c5eFP0J4BVzOx47xVHL7V4JZqexQpE5mAxRXePHKurz0jGuF5k5RgFzMCIr
AGwLkfumrIZFok28TaJO4tAMB4njoT3StQ5zWFd7nIFCS2YoStJApDAnJ6FK6B2bIJYxFGm9kkaf
nzJ7udtiaj5ztvmmsy7iYDYr3XhWaLBnkf30yJNcFWd537X5qRZRkyiwdrO5Ko6sJuKOqFYQSTzZ
VgK6BXpLD3m7mJqrFdQztfk8gKo9Km6E3VDVzSm/LvKdPd20UDw1tUmiVVAyLxxnLKO7nmU6kqUQ
1baq8mKI74G1RPgamW4tiUX5SF3VGJPyINhVrE7O2ZasqIol8XVMUOQ8hxoBtf0SoRZpr2FgDfI3
fg6BMG1PrAMi6D8/kXvf1YvJyBBnw2TEs1W2p21sqi8N30wHysGvMyJ2fWNpYNwoHZTHwD/Wujwi
5mqfMxUFWGm815d6+mAO9BYx1HHDsEdrvRxqPohbOT1QNgLtr1kbU9tcF4VFEy/Jqm7llnb7qUpJ
ZiCORjv5mDs2ra6IGkxDqQlLEBktj9lgA1i+X5eQPhDcfo/BfAqRREuxWlyYjma0lu2jIbaJKiUc
SQOrhYrx4jhKiUCmxLJl9APJbYuo5MROb5FJowIuOvC8Fy0i2ZkfFQXvNVMzYV1qsm8XxICZ5kVZ
o4Lj2yW2ysulTYeDUuFVb8WYjb6LErQqeVBbOSHny4XNG3O5HCCUk8W2t/O4NTNF6iOT9yTYQFOx
6RbVKm85co2V4Y7Vgi1YN+rHDNSG6gaexmLEDbRuEXDiytXBQAsek4JpFolWQouFKY4izWRcdmzL
M3OpHappkpqmnS4FLoqOKznr9cSQz3BxkjTymtlVUgSYqlRMDmuxt2goc1zhCsaO133ZHlfKCFYR
y3OzFionAyveWua8GMfcXKc5LKsKnoqwKOBaH+1Xa1Wv5z4MWDSUKsO51YtVaWgYPDkBoUCNWCt8
z0jSQc024vaQ+hOiPhDFfka4SjJH8QDn+ougQhY1FQQzdVHaEe+GpfX8xJaaPfJkZDg3oNbKtSJd
rQdBxWz27WQh8rk5m6YrUp8Rmnage0xey7sNkW0UWuirquvu00kvV4diP0dtYC0HPsEQIAwtF+ES
FecLjpHgeLypC9NtzXwNSNisqjNbLfocWaTGLiOn4940EbZ+DU9XRKRve7KlUXoKH8A8BWBv0kLx
lsd9qjn9XUCZIQP5ScMq9ALE3S1t6f3leFxPRvzYU4v1YhA3oog1AI+8xQ7i0FFHKl7lAwMwfKva
sNyuGFjylJ+1CT7wF/ykP7Rn6n5LLUZ5kff0GDmwrLAouMNkxlNIls0j7IAWMAn6VNQku3AtqzkE
6+cnd271lxPY0vyA7nRnAFM4w7c8CvzDmB9X2qIqbcqJZ0vFFJeDYtjXUngbiatJJm5X+9WALbjW
4yhY6SnAy1jDPK7sVDEHssaMUJNDjw6wCNZqVU/R9VSG5gnSLtxBGKDS0DwsqmqA2uR8myW1LmyV
QTpRDxu5FQ+5ATi5O9B0NtmWWm+RjYZVJjlp5atF5XpxodXz7ZyaC0kRzZE5t5D3CXqAmxFcrzE8
TYLJlh5aNlLp7fzgDYFs3tRaaHxpY6Q9X0hJOVxAiy5+dsSjLIQIjUXVliehCV4eh4dezB0bjZrv
ZR7CVJPVD8QOnjSs54EQfQ5syK4eFwodG3pPHvXVgKwOZkagDm+5qWk0K05m5kG0GOsoNkq3XEo4
ypSUpPmk7OSfo1rdWvTG5kcOn3JAbyDiNFllF5FhrBTarui14x2Pb3BCM5piac9srLLsTY/AZ5a/
HMGmYMsYPgABbo2RLgq8t8hjan+STkrQU/NwTKFIsJGwJrFpaFmHnEumozGVy2N5NUIWpjtpE7Ek
5iOH1EUUShSBn6l9CQfVRqgxEoACiEXTOlMwT9fAsevGSmLdwkB7vbxXHugwLppWJAPVzfOAzPVy
PG/QoudFZe6hjWNN114SD2bH4yjDix59WK4tqOaP3cYVwTfz6WTI9UIJMsJ5mu/9wXqwWqoBvTNZ
2kIbbyy6S2VF99TCWpUNbu30TXjcJPwoCw0fjVeSGhr9WJCfn7iUz2R1Qx2yPSMsgSE169VwJXeS
14VHMCtgogDpaMsZuuXyuB96BW0TW4JcgCDY2Rer0kwaMZeprTgAc2G8xLa6Z/bXRQgMKMv7+m6U
y2jPUaFdY82qPLaXkFGi82gzszeHoYzxXlKMsMMmGEtJb+wPmN1+PwgHxwXwzqN2DSGanR8pa7db
9T2icdfrkrYtyubltqTloOzhwD9rQZkRG3+X1HxSScs2mG9Jq7UWBT/yTWeMsRbwzkeubMemcyzb
/XE7mC97TIaydJXrs6CKVfGAFRq/U6zC7OEHs0ZEVCOsmB9H8AAhfdFGCbR0nJ4c6XIGot1pbYZK
yFljFTg1LPczeEFaErLKICKms+po6ep2xmmZW+/zw3EeNodaG4gDLZ6hOMUy+Y7fIFgOUw0fgHk6
qlSr3C4XxdoBrCnO+IIb7YDjcPCDpwjaqPIm5ni9aVE1XItEa+NzitAiE2WNvpkFA9bQrSLb7siF
ttCfnwiWc0jLn8s0j7oDuEjCpGjiOvS9RRDwRRqoo+wAwv6iT+yRiLDm+rrwtsLcRY64pamBQUxH
WIBAkyIEEaXPAYztwuE6pLleVpZzBl/m6+aQb5Ip3083OQN5mj/vb1JUUIqphbbYTPYYY0Wq4Yad
qAa37VvLownChQCgl+epIcOV1GDOqUUyF2HFDYMm9zJU76GU5cp2tkvguJ5anibjuokQFmbo9or1
8j6fCmTLFL7DY94wBhzJlGeGhFBCMSxzx3KtIiALEp0xOmK202O/T0R1VtnIaLKhgrUwNz3HUbDM
LPZ7q6yg+dg96AaStfVKaQBHsnES28WSNQ4HbkaNgDUSyl7/oOnclskGB2lUqmilo5wzK/JcthDN
PfrycZHHJtxo8xkI9/Jt1l+5eYsWwDvPl+YhQoYl5moBJG2CPM8OiCEig1Jm13vZbtx5IQxr23JV
IHJBzizbwcWalEZjBdjksLcd6GKv7GlY+vy0UbJkk68GxThVSx7Hhe0Ki4Cn2bkEHyFqAwHGMu1P
mEPmhLNgIG+UmJen5RxZ7LQqXKnz1QoW0fXeN6khsL0KpxdyXUaiOmHnw5jFy9KYJb15SJra2i+M
CiuzxEb0tVXbW4Uf9qWMXBbaRrIsi1mbCqRM5zMPhFUx6CnDSEWvV0AjvHB9j2asEUGafUzV/RQn
1a1I2rrIS1w0q6TigKbQIkFJ+jTLDyN6fdhPjvu9myAGXW1BvCDgaTxRlNO67g5vbKXaD3SV3ptr
3d3i6uHQhO10MBlsip21RTOgcXO3RVGndHXgw112PkmRfgCZGdYlpGqSY2RQCwUo2ecywOVqNGUY
4sCAOCAYj+QiO/BJOeKTOV/xznGxtnysnrZ+43vteKAG9mRRuVk+NYEXf37STVxU+4I3b3DzUA63
qQx6gkaiP4FrxzEnPZsiMV+qCwfXhsCsjXYTvJdnBaxio3XOWg40H839PDCUbqO0rDWbVWNJRPKC
Ky1cUs3RxPOW5jJe7stRIvbFKtBC9rDfygtjus2BjRoHJjE0eQh1cGwpeJRzNKuDGgH7VmzUGlkU
zcSSrW5TyrDx0Xa8XiQ6IJKtoC2hxmFtYkbpMAOYNaRzjsXvCgznFL9dq1jTT04Wqu/ggCPhKkzW
hhsunZpyQiMWB2tM2mwGJeA/o+GsSPItUbCJHbBYpaWQHumSm1MrSJdkbG/ZBjVFZwOnOPh8bYKo
zaXUWpnNKoKcoa3sVlvgNbZOnazo8WIYoVgS6kUPmH71qEZSXytjX+R4BMQ1Q62aKtHC2obpYZIe
dxmwlpZlz2tbiavNuHBWw1m12/RoMXTwjdEXI5nt+9UoVI+oUmZxnzos81Dd16vFGJB0JFrmaq47
aubZIkHtVcBU5ZmcI+4q1rAQJUMZ40KyXc7BUK1kvvJrcSZYzTQ1a9OSD1EBl3PRzXtwvGTmG0SY
9EDsvaEyLGCFbpVAnWh1fwOPD1xbHDTCoVa+NAvwOQ4Mh7yey6M4R4WNmi7MSdzHTNYV8a1pL0rR
X0jjTIKwuPIH9khr0IX3/BRj1DCBrEwJjCZbLFO43oyrse+O/TlUMdOZQjFj0VZHRyLkQg8Q8lUk
uJNDscWV1byYb9qgjxwFt2FtBfh6EnIagvIWPW67ju3kcFSmbJCBEajVKdKrSoaIGDDJy7zkegYs
c+rG1YnlDGq2NtZs++sxuZ7wzFwjZnswF3ydYYZOBQmWUR1X20LeC/39RheRXX9ROIB++cDqzRAj
N4BwjFUcyCax+eHWEjaJ0BDhUbfEqF+oOeUDvC3DcRyMeWPVjw5bIxmJQ6pPUYi8Nf09LIBhP0DF
CKVtkt+6Yxhe6HSdW2pkLNHVUl7HvXAlzEY1INrydP78JB7wUNtBGbrUmohNDj3rkLbqOJdM09qs
VDapx0JKD5taIkUhbXpyTfrxdAGR8HAnz/ZbPdi3dbTIGqUH5imsVnkSUhTGVMmwwhZjApUOStKf
pfAYKLeme6E4VeFZza+YYz3Nd+xIKMpRNEEaAURJM/OAK87e5h1CAvbNFk1v1AS0vkCQRW94wELN
ME0i3+yWzGYIKHZOlkLBpmV7LOxtQgUOpwshhfPBemqTI+YYkcJyOTJJvjmAmcWu5ta8MB0XQrUZ
iLOTuN9OlsYwNhwQgprzRa7Wa1uOt8bYxlGSArG8vSISvWG3gtDgRktC7EEReZQlwZi27HDexFC1
s2aCKA+RTXDI2lXQKqGorUajZR8eTCyHt1cpF+Ryoy0Eyewpq3I5QTaaZc+S1tQm0aEv8YC/lauF
OqWXzrbZ93OxGOdxg8RqEkkBnuerowm84FAqECs3lhwB64yh6OmxlLfL3qDKFGrYjBdJiLJw1z8Q
O68IfzeVuHnlpM6odshFEOVcHENaBx1AKxccR/URb+5MZQpbDIeCKA5nA6GdtvtWFlceAY3NiapE
igBsiJohcl+LMnNKb1RVy1TWUePxZKFzyRyEw0tpsqhbTLKNEI2RqlmkYdGjSlTr2bzpqo3hVjoz
5ExYlbtVqflqQBWzVJYKHFvgkx5fT/tHJnZmBzAV1rPeGjFgr8n3MV/By+NwGldmQKkrMgkCUrMO
ZEDBvTAxKWyKgNoW+6XnRoEqczmyElaYbAZHN0Q80zHkZrw1Ra6lN30yz0ZjVlnT9KpIx/TCMfvi
CISkbC14aZSmjWggSfP8FOg4L89gidaX6mF1mFbejoXcQwKEqArgHFhDHfFcf9tMly27JPwS+HCm
qEU3qDU5wxPhwE8wB2mOhuYDfwqXalyVB3IT2bywRcsyEXBSUQin5ZbVFJt7HDFFXCc7cLSAjL3R
fpYVXMS1fX6sbUpdZvrBtt9jq9NubNBnfagPJytxZUlT1mViTE0qqD66UHNchdyQxAFDDVRdSprJ
IhdlZOUEzEjbpZaJRCNlkcv8YAnYbjkAMWCT26YA9WBJ77NgtgpcT7AN8pCiCaNmNu1O/IG7OzYW
y07MUHaHaVJai7jxJG4VDmBhgZU75IgykbfkLRAv9NbNBJoadGsvNvGhYVf7CUVEVtbOJ6Htjmth
Iuwmur2nzJU45XbN2GbJ3tGI07IAxMRmwz55IPdcOSOARQI0C3M8jh3t3PV2RmrN0ckiWrIdA44j
WJPk0ZghJszwEGODrRIiyoixIL2PkMdgAu8dkUIyPUvRfRqXgPeqkk5x28ahgTepYuC3twqrwZG1
pWCZxHs4qlrKaIvr9qJPHPb9MgksIhxk3NEJ4t1sq/YCTh57Dsv6BIjECfRQyscAG9vZhBgL4Xaw
IlpzZ2zKaplxtCTZSJnO4v5CGU/1CdcgU0q1e4ky5fFpMGbMmJ+zfQxCV1S3I1CVbSFFYtrforg/
2Q6mxOzoU2xQRQPeSeTNaKOl1pJfTVa1nrfq5qgp07CiNdixuMlSgVlub5haEsFNCqxlKUChsBRt
U7RMaRhoygZYR5lyY4BOVRy24zjH6JoNjzMTGw4bv1APpDt2XEHODZtFsGTn7PpTsyY0AfDetZiz
gE0u/B7cM/e2dRyrFo9LorhU1IOLrGFTs1Wi0MloIpKRpRPemB36/HE0M/oZ6omBegTUFIRFKZkA
L6MTqKZxCLlVXHOlI+N2IiiVNPQZgmocWFYS3QcjEa7q6eI4GzvhINqMpgN+ly2injAu3Gk16en8
PK40gLeTHOsBwoz91dg3IeeQqy4ZStNNxcqzWJ+E5bAhpB0pO6M0FqOBtPO3trmWplKxiDwqLbcs
0DuAcwD8aWOKRtusgwrEP8EKzpP5RsyDfWhtpmNsplk7lndnRVdaZhFC3NGJUrecJB20xNgNk03D
FLLlzmVrynQpy+TcaqI97wQuOm5xdTLtm8CJoEa7GGPTj7UtJF6RCRKCOMMNxq4IYqu0HTFZFoWT
kdiIIAbbbYDeSrbfzEnWMiFe3wlbu4iYVstNjOLHsHBUjKxQkrRRIXHrmoq91r3R0lqR/Wwwg/wG
r3AQpNolNBs6HAWspcEem42aJM4kpPd1ux7oxeEgzhYOYknRuGBiRjuPsT5cIS7kwlMT3qzRqQ/L
R4fGDw5l90eFHeBjTnl+CldENd4hhuljsmGGZX++xCougUmW3OqFja2dHTnar8IhzSZWwOTDJs4j
jmvm/ZVjqVLU8tDQPIz2k33c5UplwZQ0jpI5QYawnsAWpPJL+JBzCt1nJX9b8OoWMmbqYObuIFhA
a6z2xpVskUQsQAvbsUS7i0KqtXAEvn4ErTILWAo3xOZiTQRoqmRbY8gUzcob7Fc0mQ1WoXBMlMUe
2K1+hM8HuL6CCJMf7UNiMt7OxWEdiXbc76KPfM7nzBRHZs7c4/GQgziTLIINt8BSC5sxB2gAMS06
DP0BQ4krFe2TrQ+oh6OvEt3dYMo0n4yXgPpJYx30tHdAiCAWZ3KQQ+4OdRNVU7eyYxKW4sQVnhZG
sh5ZlcyvjisI0cZMxvVXtQP6MzqM3XIMtwo6mGtCjjRjMAqzpODlpG7gTTazVioJNy6JJANx1AM+
0kYZemkaSehJsj/yhKmYHVg2K2YLdB96tVzUrSRJUT+bkp60f37CxKaSlipstAFxXCLQMWAwU1vQ
CYaCiblftqior5BuS82MKy8eVjNbDOabPZeYTgsY62gFmTSIAHOmB/wpB+IXCUCcrpFWCzIBW2y0
hJ/MxEhBWWMQ6JJQRuSmt/M3Pi+6c+CkcLPhg00OwWMR9f0dcMMOPgF2C8wsUvSYY7sa2oCGWmU9
CgcGtVG3e6OdCsZkOlmAxgAJyI+5JEGlsE8kqq8tOXrCLwQKB0bV2UbG3gz1IdLlEuT9TbjnLO2g
8KvVCB0gc89vhhuKPh5YZ5/1GpvNFm21S0dil/UiRCQfa+NJ6tO+jxu9VWAFfd0TD3rUrffW3MoR
W3k111yImi5WA6If8XrJVDvJtMTVUV+upPXyiIxWK5eGDGMVHuBdX1nXMQyN0KVVQWgw4vRNmwnP
TzPa7LL4rLHpLhRdaCKsny6JoU+7s9FB2m8Fq+27pKLLctbjhUBdZe3ealx3udKDYCfymWhayxqS
jowUPT8N19Ipw88Z2JtoL+hJbpPj4QRVR6dMOm+nB2TghoKzLLdiLfQ2gCgDr0Z2yURDIpKyHEhB
BV5Z74ANUbpSbU8yzI3W8/uq01s7hU1L/bAvo0ojhce+nIjjSFwrfSZ12DmbgMhN2K5CnZZWk01j
QuIph2/fydbJlchVKC7UUz5UgbHG6pSHF5UrTopO99UquHSfHkklQmkUysyOAn3K9Dtl6802Vc9K
EcJrjjjdnvMYt2lK0dTE2kH+soGC4znzT/PTCPL1kU/vodHolO1HSmigAj4AfH1ay5Oegy7JIBmd
sw4pzsDohbIzZqNd9/SB7DaRPYMNlzhxmGH86JyZ4zQNnqW61FNEjU+7PMjnp1OGY5fLiUxFRZgd
YHVOrhLt1KvxNIoUhZH4yYYo/S13llkqac3354iu0GyvOH0mbR1OyAHeXHov8dJUzbHFuc29g0OE
0u4OcA1NjmtIf5EZcbhlYhB87qFhqIfEcIyTkXs41aZtgUWpkecnoTAmoRQpp9zFxSoX9P4U+EfW
PI49BTtrflmyMtknlyhXHIeoGliTo7k55YKObWKIgMgHEDG4BmPKh73Gnc/OmZB6u8g4m8r8VQv1
lEEbNR5RIafMSFZTum0Da4jr3T0nlMqWiVE3Fcbb07j38ePzU7uoh3vTbSFMMSKFZLc8xxOluTln
kVKsGRxopl2WE19gp7Vnb/YOLJB7FZUEn48X1imvXoyl2XZaPz/pCc9/kxZ/ITH+r6nRw+ycBv7H
nygIDP/xAbujzMgugwiUIP7xAf/Hh+73HYXOCfUXUrnvKHs+XIfuAfGIOx8/n/hjZVlyR4GZ7Sjp
2tsDJTB/Pbrn4vPTKsuvvUvwTfY9H0fu9mLX/3W69U3qPXzOvb8/E5+rqypLf3gWvnNq5l8jO0q7
qv/FOlld/eg8fO6Ecv2ch8/6NMyE1/LwWTZup1J8PL18ojVd3n7ZcrGzP0y7uwl5ytLXRKgyK2aI
oCKIBUmRnqbtatWEU4SeMjUftH06cEU6PLhZZvBTYN/KpVFOmKM530hC3JMiKYplJpzGcz6MLcmG
+El61CA/YSqc3jqwyjcrRKXtQQ3NE5ahe64mHGvfc2kqxYF9y/rwJh/jMR/4bm273kGc98TVhvMz
fGsdj+1+qAmbysAKVIl9aEhv5WqXrJDlGKGOBLk84PqYg7Y27wwB42KmRQkdUXPZbPV9tsCx2HD6
sufZbTWmepPFAKmRSYu36La2agqK4MmWOpS2Ya2Lvl7qEE/JLT0fmajBzIAN2RaU5CcoRatz3yAX
zLLa+IIAJcuK0Ib9QbF1D0Vr8yXXKqOKRkTEkTJBsUwhTYZ9STOZSZ4XVhlYGbBIAgKvmaUwokl8
g4f0roagTb5bT2YmxCbp7jBlSibsU4vE59JlftDREUEWOTJFp2gtlR7heUe5r1RRKq/BKBTkukD3
w3kZCPMKWxQYMRmN+8WWZONiEI3J9Xxsjnd7w7K8bDdqt5sICkAMk7tNlNdhL0Ai8Xjcr4LNhFS6
g2mE6Zqd9hamAu+JthdZKeokTpaHCrdYrSQr3vJHQRiGQqwsRFW0FnO/lRd4OMykLO0Zo34wyAgo
wtvRCMT1iRiUaiW2+zxcHNY7Ga5rUwOUrgzFJYvog40YG2MxZbd7ri1JbiwT09m6Eum9z5G8FhGl
OCVrsy35BvSUXykyThGstuj1qlBLVwdvhDWyucSSReXwlcHIxH5xpOydSofQIVm7w/3MiiQyE3xs
yCeGP1m6GjXu27n9/DRGU7M2FptiNLedicqRm83UlQ6NHseNjE9nEZaOMarms52TN5WzSit+q3Ao
O8w4gWUJQWOHgapwEcv70POTWRnRzGsHmzWrzuDMD1m5VWcjrR4gp4k6NeeaoZKgC8q3L2m91Rth
BP7DvdFFk3a3P8Lu9UdfuhfkjufNncdngMwCYh973dtghgeKl1Ea/PHnrKzv8Ziginm0q+34dLrc
F2faXSt/wWFd1M77uKyh7XjxD/dYVQa8UVVG+a6yq3oXd412vfkXX3p25a25w9vc1xfoRHoAazj1
NngiJ3jeg4AzPF+X/36sIsw/PqDk28BKM/c8f3pb8UWiD87hvz/s9/s7y7FxFADVzLLciILwwtmM
bwaWXGZ1/jPeSQy6hgCXO7+G+fm9zEcRRVDYPz707hmgMzautX8/m0YBFknkHjR+CQn6XejxRQx9
9Ubrtb68DgHQ+ovif7yBsR333NRZ9hmQ6jYAbkGABjP00oy7ah4utH5X8akXAx1665dBvQSBa6ih
uvNNCeqSi72Fm0u4vncwJwANP2Mkc9AOm+fT3HMjP3LPOn1tNG9OaUAPLhGYmyN6UYo7K5nY6/WJ
JOAnKoRfpkK3BrfzUMQlr3Z7eC8j6No8B4WiJloDcvLhTd17K6e5E2LDaFf9DI8Rg3Y+GuzI272O
rMuHBtsVCIkCMbUBN1zf7Ptfy/ezMjqCtoAKXdBe7Ni3tXcL3TfQdQ3e32jg7tJnYUF4bx92AAEd
K36j2C/4prspeZGCP4zwrxnK3aD7tzgp9BHMfR7xLtxhLjuo62P+Rev3j9Y9/un6MPdoFHhS4n50
fh7mS9HcW8b0Z/qqM0+6103dHtpbrurm2H4ryBvquN9b3RhqChRD0Wse6/ZgXwfkNc917ultr3Wp
9COe607Q/dTFX8NLssZbn/svlVkCZup90LsFPgwFglG3RuP2+s0lqd5U2UuIjHYLTrcweAtMbyx3
gtOL4B+P8vGB6B92L7bvy2N/3lT1o1i7tQZ0ScOXFoK+qOuSX/wVIT3LgiB+MV7Tyq5ejd9exzMF
SPQtY3obzX8R6AEoo/j3QPltM/EM5bPUH5H8drl/BGr/osm/CWQFYCIq7yNJegsBeAW1F75R5V7U
XpLppwP3OlG8Dtyz4J/Nbv520X8Edi/p828CX3a3i4L0ZckqO3fxXeD7HRTikkyPwJehvgO+b/MZ
Z/ieBf9od6vs1+QPl9T7EJqvffzLBWfn/ZBfIDj7UpDfKTi7ZctvbUH97w3Ozv0XvOa9GAHZxWXX
V0SuQ++iPI+YU/J7zOnF3c47QQSk/mRTvSSPfwU6+40+fxwb4EPP3f6MFXG3a8jJ9uDBYeR7VZR4
H9e1v39RgQCC0W9jhGf0XpfqAQiTyJUckbsQ/MaCJwRPvbcxl4fN3++EsIm927VZuf4xMCOvL4q/
DrMroj2CNep7sPbIAtZ/sHYJayfz/G4IwxHAoshbJOpVhH0p0CNuGCG+B1iPhDUvvvcRmf8dGOuE
/hkQq0A7Z880svcfDcb3Q+y06kI/wvQuCvQQxDo/+cb1m88Qu7mT8x3j+nPSFE95fe8zpqcvPD5p
9HWieWsphX7E3lzoxyNQQJk3r0R+AYVH1gB58EmXbNMxfyD8h4/S//ffw1x8ZBjvbzPIS9mAr8Hk
ulQ/3XDc4m2/id14x8F9L+PRe2Qd9lpnHsIE/h0W5G2Q/siD3dKr/pa240TEBG/nllF+GuH3sRz4
Ixuk12R6ZLOfIr/Dbtxc0vw97MY7DOl72Qv8bQt1X9iL78NA73vMRO+hvcZP4v69zEO0y2P7cBqY
9zEPb9PuJevwWaSfbh1uwfl3sQ7fP6LvZR0eWVv7tg8PQID6HuPwyLrti7inz36Udfg37Ee912YU
xvRAWPp4WtWd+6DXo1L0JycH3rud+TM3n75j5+lyovyD2fM/OenVL71d+D3vbXyRQ8/gj2TRX5Tk
jWnxDHETwY/kA15Laz2J+eHNcj4G3Ftpq1/p6zpuL+Dw0ke/XJbJzEvttBI83wb1/BtfWLsgx53V
/NteWbsG6suQluPMseMP1amfH9po/Yphfg9kX8L1dX3fAPcv+Nb0d76JRKA3Y4TLWP3U9hvtJk51
rp98gxW8Y33xQpnbr0zfQqeS+qcXA2+Fwb9S7LgH0K3sKL7Ll970plffmL5ccgQkjuIofT0ouWLu
Pkn+hqKGZ6+1ND68uc3za4+cXQKdzLstCte+9V7LFfSSTGfVb8akV/F7482796RzP938YN9nfh54
9fVTy280PkS3907g1xelH1nIflfjc/O4hl8RAjl45nsND4p165a9t2flnpt/8yzGOh9EvSkn9r4t
0QehcA0MoG8fQKi4BmiIQAUfDK87v8btlLb78H/s3SFJvO6DL3Lr/u/3pdgKICydgWomgP145Q+H
z7rqxk/4jvfE+HpXZcn5Tf4//jyAn/83Gv2/9XrW7/93kvz3bmc9uFaGdge6EI9kcXzu1ENJuuh3
rJXezCr/9ddKnfg70fAuq6S97iCfR5ZJP4n/wLh3p3E+vED6SE7YF7bkQyfzb7+Fsq++MIPvsHHS
zX/0oYyMryT56TbgN8/eOk2iXyL3ojug46Hci6+68LM3Sx7J2Poo64f/o0y1//uAJXj8RbKfyVQ7
rjBp70wifoWtYvRbYsBPbPVFhAcZ65uO2LgvLet9CeuZjX3MO2LX6+jkX77krb8bP/26S78wVX3k
bfOL/fsPa32rx3qZ1b8CcyUe2uD/qgv/Ya//Fvb69UR8byL7SAb6VaH+w2kftBC/DK99ML79phv/
4ba/DLedHpL3WojFkLecMfCJ2p4leJDZvmXp977k8ndmttMv1lr/Frz2yw79wqz2kWTmC737D6d9
q8c6T+dfgdLeyBW4joGvevAfRvtvYbTTC/tT78VnHwlzroj0Hzb7mG34ZcjsI2nMf+nFf7jsL8Nl
32uNFsXeQhA/EdnH12ffcqjXna+/vS+L/RjI38gqyL+J9X+7hILvXIj7NRMKHl+a+19OY3+VZdlH
NpI/i/8fAvtvIbDvsGL3TgkF37fo9r+crv5KC68PxrL/WXS9F1U/Ne3+izdG3vyO73Wc0NhjR9Re
l+jtee7oa7sEjziP33BU33quw+1RvUkDfsjrFZf78uBrE1xWhY9BibrFex+hn49D6SeeYLh907GF
N6hDxxxuvLVwDQGfJXjzqL1+SuH1Ubt13MSVuPTeAwq/Lf7gO64Pg+encZbvdid3M5bbfOXtWW5f
C/9m4FHIK1zlOu7ehNYvT4noPrpOUn4HtHyvm3oftNzcqbmOlsf80n2HDl1Hy5ve4bv/wKHf8mSG
KjXz9Z3LJNcRQJ5OY+jd+Na/ixD41Prd5V5WOJgHT2C4vuB6edzP0r32XTbv5JouHb/wUUFvOnLh
FwPYy+kR33neB00/iLCX5t8Ise44hJ9/yMe/CWMvMnzfuR7ffsf8r/+V8198s88rb9DfIOj4Q982
/2XTdxR+eYeZBIEkdXEO3MDjxSOI37y7dBm8IlCU/UERvvySpF337UnJ6WXmS/X8Opbp1IzsVecv
Vbr3C+BuQKFba8WRK1/Rftk8XZbhrhpeojWMvmqobvDlyys1lwcZiPfBfpHv7AqvnUX0/Ubq+hlE
f1HSZWv1V7P06wGOr0sAr0/dmb5Kvq5jDus2e+7F3Mgug+h8PBGwWsS1wxdegepfpH8LWknyEbRe
9qnX0eqeRfyM2t3pXOF/C2j/oq73w+1PPqO060IadF04KZNNv99iAqFw/PKi0TuB956l1CuLqLd7
fVdNdxxZc2vV9eZhNVc4At6d43Vl/f7GcuulrLpHMPnTSRz+HfDrMncur62+q+n8JOpdZT6d5PbG
tr4Yf+zt43+fGu5IQrpslb/ih1H6cgDc5Qp+mdW1rpXzqTxr5ZQzVR28HZ/V6R1fs/rQMtuNLaTu
Ra57jxT8AqzICUDXdvOuLMxd7/ed9XzcSLiViHIrYrkW5d+BLR+Iuf7vKz1+7CzK07aRtx5Gu5/i
bd1zczFoDtiMrlXNvz9SvaSmc0pbBYzKx12ph0F4dV/oQYN5ff/qthLeBEQCBawTJe9G1ef97Gu5
5l8xPgWg4YSR18X+16dn/7rK8hg4f6IpnHp26d6xjPcDTB9zL3rew/Sd+/k2hBEPWTr8bYenngW7
vAHxGHp+8vnPcWavv5wO3QSRyiw5LSMpwvccuXvKNUDpaxvQ72ye7uzQG91l9wbm2w/gvZrqfm29
uRP6Q2ei4NLbXf3iyfdYcL51ovQrqru2Fv3gcdI/N1I+T9Tvc9pfbH103ou515B9J7Kv9uBNWMYI
/EYS2Q2DeLXIl0jqRpMP7S4qvyHwv7547A4c/QYLMDsvBgJ9JuWnEXs4+u1hV5NS3zX6vSH8D1tD
eTlvmr4KwhsQvLhd8gA4fiIze911PsDJbq+bkG9etbvFx26wsSte9IrdQa/ysBsjfl9XXo4IFy7x
r18cH48Yiu9GyJVQ8f0RcrcleTEL9CMYuW+H5YyRTqD3Qsm/2cW83bJ87WDI+zYaf4SDudNw/Gz3
cnH3/ntTJ35qHDfMsm2dn7864zV83EAHhXU7l3ekGtwFjltx2tcC351ugRLolYDs1trlJWdy2Uyc
xfpwluvDXYK9NQi7HoB9rZNL0dbbUfiTbdVZ+FkGUJcCyWaZXNr5K+tT1/FIdKn2l2fn++HxpuR3
AxMjr31X8y1g/tWDvX2EfyJn+UZHbxvWV8nLjYwKhgEjes+sv4u53OAt3/Tw7uFnrhGYt26pXDZL
L/aoyj64Z8H+SmV+aeC8qBNUOK3sqn5jZt+bkQP64L0YYePiCyw3WDJD/SSofauTu7FGPYK1u54/
M+Ws+oiyC7r7xXnQi1JHkVtmu8yvvsv9dHmkP4cNXRT7flJEXVulvoWIS1HAZUS8SNeZn08SfrhX
xPejRxeV9D4s6adnyAyz4GFS1JF08uLp4++Iyy8EvaPMffkxl9FLdyQPIy/tmNyA78XcqL8+/kgC
Negy0NrFbv9yfPtVHL26i/tLJ/pdRt/7LBh8X04fxZxyvO/Mgv2M24uh6PcuNYy8tJ5WZZT/cNgl
oKXuYJl8FnqvrV9+q4UvbP8ijC6+YPZtESWxA28KRgbMx5c4694wq8vq+HoedJ/cnLpZFp+02Kmz
e/jHafPrfTTD8z2gQ9f7OLc73f5Fmj8+wF/tlXWf/Zbd6zD0tt69icEjb2HiX+P5LZ6uS5o/Mf97
eNQ0zNquR123Z1G+uzuS+fhCycnavNFF3h9eftLCX83ZV8bo64s7nOHPg9ztqfOxM98GlnEUpN23
O4I4MQrCv4b73xYQwKWQtek3xuUXnXt/mXlru9zenHnfzrvfpF9xN3j3d+zVYT65nS+Gl4tSuzz8
Gc05zWgRVQ4yFvyMp2YomgH4i+suWZ1nV92/Pg0zYfcHJ6+5mSmy7FCe8PA+5PTu07idSvHx+Qn8
qTXgl1C2XOzsD9PuLhcixjxETIxJ1v116CYm68pS7qR67SRzRBH0ejQlUEtcr04tq/OBIUrm85Mm
QtV2u9OCDavrw2Tp2vaANklkO0Qc/RgMq8ggBqTPl4UTKjRhOpKSeos90agGMqrXbrwbEitlvLXp
yAGy+UN55hz02chkRJ2rjkU9qTIuYIc6yXn6mApcSxwr0LKV0N6CdCF2MW2mBDcYV0dlNUy1Hecb
TX+pjzPj+Wk+STJ2p9SL4dRPyZDeLHutrY2WU6Mmp2PRcFa947AdHouhWm69Y+BgXsTQjdxMF3ob
1tF6NtOJybpfgB53euMGhkmK5XYQBME///k/8Mvw3Dm4LwTzoqF4tfDLNhN2cSv1L8b1bO1flvAu
OJhf355ethg3NXuxyJ2KRRH04mFbl92WAFr666MX1g8uivTXlYNffziuGLqb43G5zA8ZkOFlJ3ph
RC4L9TsOyWU2+/fkDwGwxbcDk9+VQGTB7u/YL9BS2iX1Du3K21WGF3v2zusyeuWo6tfO37HLWRpH
Xmp4u11W1q73txxW95RBC0D7d+yc7WT1G8j879Mxbx+9Z5DyeQHjUed+Slm4g8aefHtX929HX684
rJsavVzmTpViPfoNfEnumvrtlHrZWf49GQ/oSzrMAimL1175dzRKHzsYxR5ob5at7cO726iLgPkh
Ewr05Ns8il9/Pr2ZpN0Ov99Y2w8ZB+FFiA/xSYoP5VmMDz6Q48NZkPsC9zd25ncMIG+QuZsDfb3c
DxlS/mNzdw3cdeF+xyG6QklvDs/lMj9kaNiuqbuG5bJQv+OQXCbTN0fkYpEfMiAiaOm3c0OvUJ2b
qr1d9t61xtOBtffqWANNfgAG5oN/avQu+N8W83ecBnfRt7uG7lYNP3gAQdNgFMsPVdf4mwbyltC/
5XC+unj19wyzkgP3N13NSg4Lz8nt4A3L5ndGVa9i5Ye4Ni3t8vkAod9lden+5czRX3+KXYPa7VW2
y4XutYvE5a8QurLQdvjg3Euzr8j1O5q+GxPllaG5Vu5HjU57bu/OAbom3c0x+vjn7s//D+yilXX6
LAEA</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	Load-DefaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}

$btnUpdate_Click = {
	try
	{
		# Null checks for all controls
		if (-not $txtDefaultPolicyDisplayName) { Show-MsgBox -Prompt "Display Name control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $txtDefaultPolicyDescription) { Show-MsgBox -Prompt "Description control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $chkEnabled) { Show-MsgBox -Prompt "Enabled checkbox not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $txtPwdLifetime) { Show-MsgBox -Prompt "Password Lifetime control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $dtpPwdDate) { Show-MsgBox -Prompt "Password Restriction Date control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $dtpCustomPasswordDate) { Show-MsgBox -Prompt "Custom Password Restriction Date control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $dtpSymmetricKeyDate) { Show-MsgBox -Prompt "Symmetric Key Restriction Date control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $txtKeyLifetime) { Show-MsgBox -Prompt "Key Lifetime control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $dtpKeyDate) { Show-MsgBox -Prompt "Key Restriction Date control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		# Convert to ISO 8601 if needed
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		Write-Log -Level INFO -Message "pwdLifetimeInput after trim: '$pwdLifetimeInput'"
		Write-Log -Level INFO -Message "pwdLifetime = $pwdLifetime"
		
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			[System.Windows.Forms.MessageBox]::Show("Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D).", "Input Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# passwordAddition
		$passwordCredentials += @{
			restrictionType					    = "passwordAddition"
			maxLifetime						    = $null
			restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
			state							    = "enabled"
		}
		
		# customPasswordAddition
		$passwordCredentials += @{
			restrictionType					    = "customPasswordAddition"
			maxLifetime						    = $null
			restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
			state							    = "enabled"
		}
		
		# symmetricKeyAddition
		$passwordCredentials += @{
			restrictionType					    = "symmetricKeyAddition"
			maxLifetime						    = $null
			restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
			state							    = "enabled"
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		# Convert to ISO 8601 if needed
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			[System.Windows.Forms.MessageBox]::Show("Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D).", "Input Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		try
		{
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop
			[System.Windows.Forms.MessageBox]::Show("Policy updated successfully.", "Policy Update",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Error updating policy: $($_.Exception.Message)", "Policy Update Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
	}
	catch
	{
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>