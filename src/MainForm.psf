<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGfdSURBVHhe7f33b1v7ojb4zW8J5s+YZH4KMEGQ
IAnyYgbza4AgCQIkA0y57/vee885+5x9dt/b9ra3e7dVrN5777333ntv7L1XkRQpPcF30ZRlWra8
XSXx+QAPJJGLi4sUudbDxVX+i/+CiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI6NK49l//1//bhkePnzWkpGY3
vEhKZxiGYRjmAiY9M6/h+x9/bPgv/9f/q4bohf0b/jf/1X/VU1bTghWFHStKO5blVoZhGIZhLmBW
VWI5bsaVazcQvbx/g/jkL24wtCjDwPwuBuf3GIZhGIZ5Wxb+ZL7gbcRyfHxdi/H5zbMLQHpGdsOm
1oWhRTlGlsIZXpZjcFWNgRUNhlcUx5czDMMwTCxndFkRXtDO7Z6Z/rldDIvbrCgwtCBus4NB6YP2
2yOGGVqQYXRFieFFuTSO6PGeFjFNYtrENI6taTC5tHN2AUhJzWjY1LoxuqzEmLjxmgojCwosDUxg
fbAfE6M7GF5XY2xFgTExzApzdhSnXHZaTgy3/JbfGYZhmHORiTU1OsfWUNc5jYae2fdKY+8c+qa3
0D40h87RBXSMLKBrbAn90+vom16XfvZOrqJzZOE47cPh2zT0zL02ntbBZbQMLEoRv4vLpOt6ZqVp
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
Umt0UiIb/rEAMDGRT1UAfD4/Nrd2YLVaYTJbGIZhzldMZthsdlgsb86jxHxrc3sXXm943sYCwMRE
PmUBEMOKXfnEOBmGYc5TxDxNzLvErn7id/FTzL+cToc031KqNCwATGxFvDE+VQGQK1TweMJvLoZh
mPMUMT8TC/bIsUb0evGVgOZlEXC//ADDAsDEUFgAGIaJhUQKgFjg22w2NDU1oaKiAgaDQZqnsQAw
MRcWAIZhYiGRAuDz+bC6uori4mIUFRVhcnJSmpexADAxFxYAhmFiISfXAFgsFhiNRilms1maj7EA
MDEXFgCGYWIhJ7cBEPM98TPyO7cBYGIyLAAMw8RCThaA6OtYAJiYDAsAwzCxEBYAhokKCwDDMLEQ
FgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYA
hokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJ
CgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoL
AMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDD
MLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCx
EBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAW
AIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCG
iQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokK
CwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsA
wzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMw
sRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQ
FgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYA
hokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJ
CgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAholKdAEQf4uI31kAGIa5
LGEBYJionCwA4nfx2oy8QVgAGIa5LGEBYJioRAqA+DkwMICGhgY0NTVBpVJJr1MWAIZhLkNOFgAR
MR8TcbvdLABMbCZSAMSbYHFxEWlpaWhtbZXeLOJ6FgCGYS5DIgVAzL+2trbQ09MjZWlpCT6fjwWA
ib1EfwUg3gw6nU4qBPwKgGGYy5KTBUCpVKKgoACZmZnY2NiQ5mtfrQAoVRq4X66WYJgvGbGgDwT8
L393we/3SQt16XqnU3ptnsQCwDDMRczJrwDEfGt1dRWzs7MvvwLwfL0CsL29B41GB53OwDBfNnoD
jEbzm5frDFCrNdjZkb322n1XAQi/gTzHexIwDMOcl4gSEPm60+kUG/55pAW9uE7Mt8SHna9SAJxO
FwwGE0wmC8N88RhN5jcuExGvSZfL/dpr910FYHNrB1arFSazhWEY5nzFZIbNZofFEp5HmV9G/C7m
W5vbu1+nABBdFG8rAIeHR9Bo9VCrddJPhmGYcxfN6fMntUYn5fDwUJqfffYCcHR0FH0x0bknFvon
C4B4oxARXSZiHvfZCoD4zkF8DxHZD5FhLkoi36MJBwcHsNlsbwzDMAxzkSM2GBQfcCI+aQEQq//F
foeiYTDMRcvJtVfiTcLXMsMwlyWR+dnJ+dwnLQBERER0MbAAEBERxSAWACIiohj0wQXAzgJARER0
YX1QAVjXuLCr90g3ZhiGYRjm4mVL68aO8T0LQHpGdoP1ANg1+bFt9EvNgWEYhmGYixex8FfYj7Am
M55dAB49ftat0NultsAwDMMwzMXOmsyAqYX1swsAERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
EREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREdE59f8H
nyRh2ox335kAAAAASUVORK5CYII=</Preview>
  <Form>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
/f8DCG0dnK/RAAA=</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	# Retrieve values from textboxes
	$dispName = $textboxPolicyDisplayName.Text.Trim()
	$desc = $textboxPolicyDescription.Text.Trim()
	$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
	$keyMax = $textboxKeyMaxLifetime.Text.Trim()
	
	# Get the overall policy enabled state from the existing checkbox
	$globalEnabled = $checkboxPolicyEnabled.Checked
	
	# Get state for individual restrictions from the new checkboxes
	$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	
	if ([string]::IsNullOrEmpty($dispName))
	{
		Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Call your function and pass the additional state parameters.
	# (Update your policy creation function to accept -PasswordState and -KeyState parameters.)
	New-AppManagementPolicy -DisplayName $dispName `
							-Description $desc `
							-PasswordMaxLifetime $pwdMax `
							-KeyMaxLifetime $keyMax `
							-PasswordState $pwdState `
							-KeyState $keyState `
							-Enabled $globalEnabled
	
	Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}


$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>