<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAKYSSURBVHhe7P3Xb2TdnqaJ9aUwf0cDoytJ0Ohi
JGAE6VqAAAECNN0zU1Xd1XXqO+d857PpvWE6Jr333nvvvffeBIMuSIajNxHBCDJIPsLawWCSTJ/J
9L+HeBGb25u113r3sv/hPwiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiC8B/+w3+49r//7//7widPnxeGhkUVBgVHiEQikUgk+gYVERVf
+Pvvfxb+d//d/67wfGL/Ev/xP/7H2syCSkYXNhk1bDIyvy4SiUQikegb1JhKy+fXuHHrHufT+5d4
8tS/cGxxi+ahOZoGZmganBWJRCKRSPQqDXh+m99RL23/njq/v9fJu37jwAzt40Y6B6febgAiImMK
daYdWobmaR32qGXUQNPYEo1jRm3aO18kEolEoh9ZbSMGLb2s79XT0Df9Rql1GvtnaBtV28zR0Kf+
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</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $global:ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formEntraIDApplicationMa.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-CustomAppManagementPolicyToApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Set-DefaultPolicyInputsFromConfig
{
	param (
		$policy # The policy object returned from the tenant
	)
	
	# Helper to extract a restriction by type
	function Get-Restriction ($restrictions, $type)
	{
		if ($restrictions)
		{
			return $restrictions | Where-Object { $_.restrictionType -eq $type }
		}
		return $null
	}
	
	$appRestrictions = $policy.applicationRestrictions
	$pwdCreds = $appRestrictions.passwordCredentials
	$keyCreds = $appRestrictions.keyCredentials
	
	<# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$txtPwdLifetime.Text = ($pwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpPwdDate.Value = [datetime]::Parse($pwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	#>
	
	# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$maxLifetime = $pwdLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtPwdLifetime.Text = $matches[1] # just the number of days
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtPwdLifetime.Text = $maxLifetime # keep as ISO 8601 if not just days
			}
			else
			{
				$txtPwdLifetime.Text = "" # fallback for invalid/unsupported formats
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtPwdLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtPwdLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $pwdLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpPwdDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpPwdDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					# fallback to today if parsing fails
					$dtpPwdDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpPwdDate.Value = [datetime]::Now
		}
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	
	<# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$txtSymmetricKeyLifetime.Text = ($symKeyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpSymmetricKeyDate.Value = [datetime]::Parse($symKeyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$maxLifetime = $symKeyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtSymmetricKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtSymmetricKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtSymmetricKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtSymmetricKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtSymmetricKeyLifetime.Text = ""
		}
		$dateValue = $symKeyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpSymmetricKeyDate.Value = $dateValue
			}
			else
			{
				try { $dtpSymmetricKeyDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpSymmetricKeyDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpSymmetricKeyDate.Value = [datetime]::Now
		}
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	
	<# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$txtCustomPasswordLifetime.Text = ($item.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpCustomPasswordDate.Value = [datetime]::Parse($item.restrictForAppsCreatedAfterDateTime)
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	#>
	
	# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$maxLifetime = $item.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtCustomPasswordLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtCustomPasswordLifetime.Text = $maxLifetime
			}
			else
			{
				$txtCustomPasswordLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtCustomPasswordLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtCustomPasswordLifetime.Text = ""
		}
		$dateValue = $item.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpCustomPasswordDate.Value = $dateValue
			}
			else
			{
				try { $dtpCustomPasswordDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpCustomPasswordDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpCustomPasswordDate.Value = [datetime]::Now
		}
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	
	<# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$txtKeyLifetime.Text = ($keyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpKeyDate.Value = [datetime]::Parse($keyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$maxLifetime = $keyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtKeyLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $keyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpKeyDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpKeyDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					$dtpKeyDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpKeyDate.Value = [datetime]::Now
		}
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
}

function Convert-TimeSpanToIsoDuration
{
	param ([string]$input)
	if ($input -match '^(\d+)\.(\d{2}):(\d{2}):(\d{2})$')
	{
		# e.g. 1.00:00:00 => P1D
		return "P$($matches[1])D"
	}
	return $input
}

<#
function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}
#>

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkPwdLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# customPasswordLifetime
		$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			# Optionally refresh the UI
			Load-CurrentDefaultApplicationPolicy
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
			
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		$defaultPolicy = Load-CurrentDefaultApplicationPolicy
		Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process "https://github.com/michaelmsonne/"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website https://github.com/michaelmsonne/"
	
}

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>