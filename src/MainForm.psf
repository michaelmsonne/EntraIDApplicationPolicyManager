<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAK6CSURBVHhe7P3nb1zbvq6J3Y9G/x0XaH+yDbc/
tA20YX82YMCAAfe93X3Ouffcs8/ae6+9orK0lCMl5pxzzjnnnDNZLIYqkpWYUxVZZJF8jDGLRZEl
UhIlai1K6/cQL2pyxjHTGO8c8T/8B0EQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ/sN/+A+3/vf//X+f/+Ll6/zgkIj8gMAwkUgkEolE
X6HCImLzf/751/z/7r/73+V7J/bv8B//43+sTs8rZ3h2jWHjGkOGFZFIJBKJRF+hRlRabljmzr2H
eKf37/DipW/+yNw6jQMzNPRN0dA/LRKJRCKR6Cz1uX8bP1LvbH9Bee/vPHnWr++bonXURHv/xIcN
QFh4VL7OvEnTgIHmQbeaho00jMxTP2LSpj3zRSKRSCT6M6tlyKill7Xdeup6Jt8rtU597xQtw2qb
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
05Stuqznbfnn367TWof3aJ5jXrN5DSbIHEU9Ho81vr/RlJ2PG829GOz32fkeHAXNuhMAMJDSBICu
9FMHALOjNjqX+zlqXv/8/Lz1uo+z5jOzX6/zPTgqTk1NWQd9AgAGQpoA0JUGOgCYX5i7mwDMxrW8
vIwYUM13zXy/CAAYCM3+zPT/4QwAuspABwD7DICZbupE/JROT08TAPAPSxMAutJPEQDMGQDToc6c
Tkf81JrvnXOHjvgx0gSArjTQAcA0AZgb0gAAHCXMVQDmPhkEAHSNgQwAJkmb3uc5OTlWmjZnAuw7
65m/B5XNfKb9zQwg1NbWZk23y0ZTNtNM2X7e7rqdy7Hrs8u76/vYuu113a8+Z912fXZ5d332cvar
e/d6O8vO9bbXdb/6nHXvV58pf+h92K9u57o6lxPoz89Z/r1177eudh3Ouu367PLu+g7znhxmve11
3a8+Z9371WfKH3ofDlP3fstxrut+de9Xn7Pu/db799b9vnV11m3XZ5d317ffe7K7bjO9vr7euuzX
NCcZCAB47A1kADB1mFOyo6OjGjF3pRsetvyYsvl7mLLzeYcpO+s4qOx83mHKzjr+aH2fsm5nHQeV
nc87TNlZx0Fl5/MOU3bWcVDZ+bzDlJ11/NH6PmXdzjoOKjufd5iys46Dys7nHabsrOOgsvN5hyk7
6/jY+szdMc3ZSzM+hmm+NBAA8NgbyABgTp2ZHtrO9rXdbbSHKX/Ig553UPljPKiOg8of40F1HFT+
GA+q4zDlD3nQ8w4qf4wH1fEp6zsOdX/Mcg563sfUcZAH1fd76z6ojoPKH+NBddhl89cc/M04EwYC
AB57AxEAAACOI/vt3wgAeGz8owHAzGee67xOGxHxKGvGMjH7NycEADw2/tEAYJ/2N6fOEBGPi2a/
Zl8RsBsCAB4b/2gAAABwEwQAPDYSAAAADg8BAI+NgQwAW+tL6h8Y/uBt7dd9/qsGAACOGgQAPDYG
IgCYy2bMrXx988NKSc2TObyP97fo8ctu+VanVFFdrdHpGbU/r1Xtk2Y1N7eqsa5WPcMzmh55ofKG
Ji35tH27X3N7YETEf777/dAhAOCx8Y8GAFO25vV6tf7mtbLz6yUtKSctVkkZSQqNiFRu3n1duhik
guIshYXc0KmT53U7LlkxYeFKvpuk+MQUtQ680erqilWfWS4i4j9T+14TTggAeGwMRACwy5vLk7p5
LURZD3KVlBCppIx7Sk1LU0JslIKu3VBOZrIuXLykc5fC9WpwVGW5d5WUfEfXr4fp+eCbPcsAAPhn
Y/ZvTggAeGwMRACwRwI0jA/16sWrXk1Njmhk4o08r57qi+9+VGVrt0IundK1nGp5F71aX/fJt7Gh
wpRo/e1CqKaX/KNvAQB8Dph9HAEAj7WBDgBONn0++Tb9866uvfv9962tOScBAPzTIQDgsTeQAcBM
W111jMG9vm4NprG2tq51n0/ra+t7HjdnAszdt5zjdiMifirf2U/tmr65vW8jAOCxN5ABYOj1iLp7
+q3vMCLi5+rg0PA704w9vf79l4EAgMfeQAeAubl563mIiJ+r5te+XTb7Pq/XXzb7MxMODAQAPPYG
MgC8Hh7VzMzsO8tARPycNOP8m7/mMj/7wG/+b/aB5oeMgQCAx14CACK6TRMAzMHf7PPKysrU1dW1
sw8kAKBrJAAgots0AcDs8+rr63Xjxg2lpKTI4/Fofn6BAIDukQCAiG7TPgPQ1tamx48fW46OjlrT
CADoGgkAiOg27T4AS0tLWllZsf5v9mU0AaCrJAAgotu0A4BTAgC6SgIAIrpNAgAiAQARXSgBAJEA
gIgulACASABARBdKAEAkACCiCyUAIBIAENGFEgAQCQCI6EIJAIgEAER0oQQARAIAIrpQAgAiAQAR
XSgBAJEAgIgulACASABARBdKAEAkACCiCyUAIBIAENGFEgAQCQCI6EIJAIgEAER0oQQARAIAIrpQ
AgAiAQARXSgBAJEAgIgulACASABARBdKAEAkACCiCyUAIBIAENGFEgAQCQCI6EIJAIgEAER0oQQA
RAIAIrpQAgAiAQARXSgBAJEAgIgulACASABARBdKAEAkACCiCyUAIBIAENGFEgAQCQCI6EIJAIgE
AER0oQQARAIAIrpQAgAiAQARXSgBAJEAgIgulACASABARBdKAEAkACCiCyUAIBIAENGFEgAQCQCI
6EIJAIgEAER0oQQARAIAIrpQAgAiAQARXSgBAJEAgIgulACASABARBdKAEAkACCiCyUAIBIAENGF
EgAQCQCI6EIJAIgEAER0oQQARAIAIrpQAgAiAQARXSgBAJEAgIgulACASABARBdKAEAkACCiCyUA
IBIAENGFEgAQCQCI6EIJAIgEAER0oQQARAIAIrpQAgAiAQARXSgBAJEAgIgulACASABARBdKAEAk
ACCiCyUAIBIAENGFEgAQCQCI6EIJAIgEAER0oQQARAIAIrpQAgAiAQARXSgBAJEAgIgulACASABA
RBdKAEAkACCiCyUAIBIAENGFEgAQCQCI6EIJAIgEAER0oQQARAIAIrpQAgAiAQARXSgBANERAMz/
zYZhXFpaIgAg4rHUDgBmv2fv8+bn5wkA6C7tAGA2gPHxcbW0tFh2dHRYGwcBABGPm/YBv7Oz09rf
PX/+3Nr/mWkEAHSNdgBYWVmxNoDk5GSFhYWpsrLSmjY8MkYAQMRjpQkA5gdOTU2Ntb9LSkrS2NiY
tT8jAKBr3N0EYDS//AsLCzU9PW01A3AGABGPmyYAmH3XzMyMtb97+fKltb+jCQBdpbMToPk+Gs2p
MPoAIOJx1N8H4I21n7P3eWb6Pz0A9PT273RGQPzUzs7Oan7evwGYsjnY2xuCmW4C6ezsmwO/s7sD
gJl3amr6nWUgIn5O2j94jP79nX+fZ84I9A0MWfuzPz0AmL+DQ8PWjnRoaATxT3J4273TzXext3fA
6gtw0Hd2dwCYmJhSb9/gO/UgIn5Omn2bc5qxr39Q456JnePxnxIAAI4SzgBglwEAjhP7HZ8DGgDM
aQfTHrG6uor42WvOBpjvrH3QN6fPTOcZ53yIiEdZc1w2+zonAQ0Aa2tr1g4U8ahoNg6+v4h43DX7
NycBDQAAAABwNCAAAAAAuBACAAAAgAv53QFgfpkAAAAAcFT5XQGgY3hBfR6v9WREREQ8enaPLap7
YvVwASAiMjp7Zl3qmVhVt2fVSg6IiIh49DTH8oHZLXUMTHw4AFy+fOXhkGfOSguIiIh4tO3on9DT
llcfDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAx5D/AXuxJDsNNIyaAAAAAElFTkSuQmCC</Preview>
  <Form>oeRE1TY4PjkBACODCAAAAAAABADtfVmT4ri27ntG5H/I6Kd7w32PZ4xPnN0RnjEGjA1m8MsO23gCz3gAfv2V
IWsGEqis2lV9Ojs6Kw2W9Gnp0xqkZfl/VHvtOuX2r+enl5f/OV28lPvM/dcfk/22dOP/mofJKm22
/yWmRXz6/efLua/+fJm5xTZMk38R/4W0//35wlVRWRXuvxK3Kgsr+vNlXNlR6Cjufppu3ORfNkVZ
pEN2UBonXKRL//GSWDFo2QP1CQkoIvNMloESVgnqHVp/vDhBGK0KUPQPLgU3pNH2jyNygH1cpJlb
lPvXOpiqTCeOFbl8GLtJiwvc2vnzBcX/B/5w61tFh+nK/eMvEbT0ZhnWcjZcGqXFH3/Ng7B03yzA
RaGblJPwAFpAMbr750uXQN8s1UqaTYuVW0zKfdSCC3fuahImfvR2k7KTJh/EBb5lw8Qq9n8xDMMy
jMDIHPir/ZfhUgH8JfrgF9f+Yo6/NObD968/oBQzHKoMw/O8f/ro+Yl5x5/np+lgATPCHoV3q2Hp
wVZ7jW0+XHfvrO3dgEnb8vmJbNhi4DqstccTMd6W5IEuFGiVmZtBsTGgDHbpce7h9fF6vi1ILAL3
r5iP9zdiW/69sX2qTWrbOGLk2zaHbZtElg9Ub2JNioSW0pyE6Ux1E9iwehSMSgH0em2FRQIEDb6f
5c9PxxKghhBre9n/WON3YPvw8wnjUS496YRRgbzUCg8JjDs0CUPasrLhnPA2MCUFZE3b27qG59SA
en46fQIVATSFN/NBDEpAoFdtL0Ev6qRzqrFtwTliPrZ4E7Yvfj5gpE41HHbg2uu1LcBJyQMEeVAt
YHQ4WMPQekXUcMsQdQCD/zcwuR50PWi5h3unawjfgDtS3B3AqANKdHKJ9GhKg+wjZrgdqe6qbbH7
AXPLt9sk/KmXLeZVv5UjHjc1kOPCggBGZ7wGcoMOa4Bh22LsQIMQhuoQXBdEdfX6eD+ljkOYXvDE
a43PTzYHA76kW5ImT22+IelzYz+WjuWr56dh5cH5chG11beSvBPjF9fPTx8+odxpeKoRygJ3Advr
wWeYP0n6Eub2e8CQ9o4d2o6+dOx1JxZJD4wl9CqXOzA+P711x6nGtfcR81HOLTvMT4z+lr2fJMsd
522cFh9Gn1wV4evY3yi3eyV/wnyU87HFltGAb9jHech9rTs+Sv4wamd+4iLj+MSv82P/ttzuuQY9
/cCOY5uf5iF51Hejj1r6a8YCuW6BXI8z/8PYPy63c9ftPH1D0ifdcdJ3R0xfYjzx1Wy/15+fVgcq
gekpByR7duZTbtsLvGVHSUAfrq/KTW0/OXyG6cvrr3XHUUMetfoRs/7BGn60p0fUmtTanslR73dG
+Fe9bmtcB6APPAoB9bs9NDAJj7pjWMJUMCGrk9yOGLZfYZrjqg0TEA+0NNX20sHB2OEjCuga/Bzm
o45+ftpIwLIc7aHeYoRfJbs9YlZXWWtPQcM9oAm+ZmxKuOMTRnROwB6tPD+VYxieFFMYRl3wCbQ+
uDCMrwAGGndBDW6LqR4tChizulANqfvxGN6v1imMeywN02jjrWGEruN2pL7mW2tZWmsI5l2LCQMY
W79DdZiJs4BFyeQ6pJi2Nn5r9RIYmobk+NPYA7l1B0anpmdbGIcn1ACGEeBtwXTrfYHrFrOEwTW9
qccFbNqHDozNAUZ6UY3xU5+QDgq+X7bXz0/HEkiOgBrqGhg2ZAUwfcaOozVsLThMHzGdfKdEhHf6
oIKBv2dRNIVAMfBLrOenalzD8RDegxo2YPQrspUsVe8AJh20oKVwi7EALVYdcD2o6g/XYOBgWqna
PgAA7fegp1/e8VWJGJSAYgSAoKDF+tQitDzAA3herCn4hGlU1Hg9oWrQU2zjLVrn6eDBtdEFDaGF
AdeQTXoeTHvjEoY9hPIgH4HtVzkVAmixhwEu6PQaXHtLcC21189P+qr9ZNF+Ih7veONaa2voeAnt
wUQXwk8tknVEH+WGjin4iAmhRjBE98CAWqo3gEV5R8KkNHHAV7vuGAVzAqNgGKNdCobGiwrurssu
TI8xmAItAtEg9uooNwn3Wgw4+AR3wWjHRH0AVQ66MLYO4TGdvnGdtNclhCNtbWsUCPDYJlXbNdz1
eNqDjpjWgKCbabKHdxPTBN5+PAesNgPQVVgugFyhsQfGx/5Y/vmpCwPUnV5O17SG1xSQS4txugKY
JzjoRVYVGAwVB9DLogsBkcGAUlB99hrU9uUnO1qlAI8XH9okaIiC9wqOw2SLCQIY6azFyPSjGG44
06xpJpamgFcT7fkJqmGk68Kf14C3qLvwFEi6qLs1FHQ8G05bjF286YL72+/ptk+w9/H+9rqV25ef
fHv9SS6nFqc7MKrIBszbI6YW4wFgrrvAc4jn9gn1zlqaHqynyZiGIdsBpMHbXn6G+RM74KS9Jj9d
n75/fvrU5tcYbro+tkiWhx3c6R9AT4Hn3GJqMYrZB8m2bHjFTOTt9/CucwCD7WHXWmjl9hCms9eg
p8dPjm32irEHJLuAYfKI6RPG488nzEMyANbG3bhAQ5IlvgPl8XeR2xfXz0+XJQva7OjEq1yTE6ZW
rp+5ZB8Z3OXa75+fwgyghiEyAg5ot4LrtyR9i9yulIBtcD0AM/jU4ldy5T7J9Qu/9xPqVXvHLsta
kyC1I0OPB9UtmM/K7cr1sUakW1HwLgf8I9sW21kFSye59cyvJPvZz0cGnzB3W92BZ2UOpHvE/Cpn
/A65vTGrjjV2rW07uZ+fLCDfU5utLth/xdhbMNP9U/ksbWfWaaxeOY19aPNejO3Yt/6bvQIx82n0
43U7+sA/6ry2+QHDNaSffj7Tbx8lDdjRzkO4c5yHR91x0ndAR1Mny3K0hpDdaec1tMZfrSMBRqFF
Oe5VryV6rS3KemsaPtXYjn6vbWH8qcUr2G6TdNdpr4+zEAqP+i5dAB1NTTRgV47WsLXgQG5oYgEv
08Rq/GTTu2FJv+r9Y4kjxuPMT081tlr//Ng/uCr1CTN/1C3ZSUc/P4E2JxEGbI8ZbACGo403tgfg
Kw2GH65b2wSCVPD9vMU4OWJsZ/5B+Vjjd2C78POhts8si3m0hu014N8Utpatr9QfITVcT1fAWyba
a8Uyx63Nt2Gt//F+9pVv74zt1h8WeGddRi9xWAT+GvBJW2/N+nANGHLjrHnrB4YbuJ31cPsn+MXD
sM8wXls9DxPghuP6LA+193rtL/7Y8HEqqEegx0XjZftLONb4bU8/3SEdS3yqYXyssW2GPUr61GL7
57j9s9d60UdM3fYXDILD7r/+B35d8n5dHn9rvXxo7cI4PLhsuvvjL9GKtm8vsY/A7z/+urR/8Wbx
SWkV5Tjdhu39f/zFuUnpFhOncN3kzbJTd1f+8dex2ReZf/ms4ZehlVi+G4PaXsYp+HT/+knxbaVC
3d51qnGQWqvLnfl3+/X/wMcCH0q/vX80Dp12SwiI9IfvImWnpux0N6mAhSrKoXttA+nMfkkMZPTp
609bJuGMVfUGUSQ/bbk3mhiBYLRcDVsicyZ35CxPCm6Onabkip0a4LuBNObgXcBqDCP3Zn1dEI3n
J1ekysTGitFqhe4imnOYcLedH3qOvhfSw9rfpUiwmBQzZjmyKrSfRPN8OGmMhR3NSa4T9DdIJjYK
MoAbQQXuy1YdDBk/CLiJ4PAsN+2tq8qtIOjQOSQ1slt1CdLBLJehYJwgG3qI19gOLcaLpB4nsTcd
8Sg1jLrdpGOOn59wshPzKORlIAS2+gVEk5vdLgjW9HZwiDp2Bs/cpGMN8QxKDquOl+1BYBzr5rJR
9wM7Y1hOhvFFFiUoKPP8tOZ7FJmOF1kVH1YksdFj0xsJPYPZCeND2hxrXvsuJ2i1uAc1KAEEr7Si
7zDWcOgslw7W+HpNIdhe2D0/DettSDogDEfT8ZIApYspW2U9dTRRDwPM9Jllvu51l8slccjYpTAY
jGh/OhU2GoDR7B3s2JoUswxjxs9PRhTYK3mjcTt2DW6QxvJcEvoR7WhuvBwHwvFuXlovh1I+54Z7
COqr24U/CsG9kjSeM3EpzCVoI291ILdGb+8WY9vmRzo6F2RG8Ey57WF4YAsNImWDaawhkqTLY68P
g4SBsNVEcJUSk5H2s4OdZquZ0eWen1ilnKumcLpzlBqIyU25Yc92+Fhv5bLsNmQ1okf0ROe6TFP3
DzzApA5VbUXU3f2KkwWL0KFRe+/z07JLibBNBEmanmpUFyRRxF64PvZkKHrr7sKFNKsdkcwvumPR
RqixGR1l2exIyObRPcq1Unp+knpDEU/gmbzVjt/OuoC+7LH3i2YyEFocw5nHfvpeCLNhJ4Hh4QKB
YKjTgWtIBea/X2fPTzPgDezWPAx59qK3pXYBTXfNxXJ0bBeMYsDvbbyuV4sDIa/7cBfi62lN4R0e
+Pc4jkZQmS1qnJ47LOo8P/G0J9Im4Fa2PUp+ThC5VvEIDq+zsgPcjYqlhrjYTE3GI5laFxA9UEfw
UQr2OpxwsjjV6WkgRBKYWSODgWTD3+qtXKr9JCV8rRjOCdHrsfIIkvExQ0tz0NspILWhyWhUOLnP
ZI3Tn9frVcuq2FzHHDeUwKxn1zXSqyl0gXag+WGvENCoH6HAUlXb8ZQqEH9grEhzuAd4JoFFLwfd
AW62LZfNVt8xgTMutggby0zqC89PnLwaFNseQ0/YrdzTfHcdeGsW3o3AiG93260WdZiVOod6lWPI
Bx94iRHj96ecHNhjpyS4TF0dXrH3n58EQ5cPVoL7XNCfKuOGFvajBXzYzglIzQ+Iuh7oUVIahlBQ
CXQYA3mNqk2oyoKgLdx82Sk2GDnX41CGG+r5ye+vgy/uYpjAL9E+ZkU1t6A6waI7hkYdMMOtZQxp
qRxOmLTrGrtMSYwuMbLpqkKLfqPG6hDMencZq2YqK06PQ8QQb5YUhNScJch8rbK4H8pHDXUAv82A
B4zZCfV2oyJ91jK2fkBwxZ4QV6vpmsZDMKYHwiX4QLWIo2QdMRTXSy4XRvtJkWq6xFP+nNvxfh+b
AHz2lkkrzTbVcuGIOEkf+CPTBxvZ3S0DECQLigHhS3+YiEV4KGYrlnPpQYy6h3ZmDd2t4ehMIerY
zh82g4TfGKqzYzrZlNx05stqSW0kd8szaEhMAEMIvkPr7azp7kbbNShZeaN1kva7ntxheFHTI50r
5QMzoGSenHdyb4zqG5EeI/oRU0aHOicIs1TXKOz5aTq2lkWLYzAy22/QcTlfp9NFeLr7+BnGCZ5g
rPh2ZuPMjhIm4nLVFVRpznb6pdnA43yxoOjD8xNSeM1wXcWLfsVBKF9Memy94O3jzOmX8QDMnLWZ
OsOtuk2zBldYa0QYvqXW3sw42DEzlzMxDwVkM4AtEFDJhaJ0nEOrjUbbyNWFEOv5EzVZqSODp1bN
BsK6o2EJ3CK31qacMiRtYbcpozHPudO4bPXa9pBg8kbZPz/lDCswimcLWKpwlSIgaGcwhg9x0Vni
Xp3hND3qe/B2g8znQENajUCBuQgX5IjsIjmfiVVBkzTl4sORD8JadycElLxm8WCVKYG0jxbeIGE7
Jpx7mYXCNNl4DdxtlpEoJbJQJuvRBpcGYYM7gOaliqoKTru4oFKdOQKsjLf0tUw7jPNUxoxU4DhV
Q3xf2PMrqZ+GGjwGruthTSUa0kNqhVxPgcUcTFMvJgaqiI2QjjXr4qOtYmRbYOvLmOeGItaB9jJj
mSmd77pbM5xTeDSQ/claPCy5CSEsGy3sF5g0xPRVvhwOMiv32Q3jIBKmjcF9jbzviECHcHI4NiDb
7qNE0Ryq/mzLC9guUjfWyOpbnKBgIrB2VFCXdKNGuTKqD9HYiMjNYasvJ2kuM9y02HXdfNZ9fgIm
1oNQ2U+D0VR0/OmOHe/VQV7vZ7ZRr2Vh2ogc2bfEjBclHxEkGt80UonOysq16BKR6bAPOJrLGcpX
wA9ZiJ2qGu9CaM+FA1lwmckCabRgICsoji8O6NCdoIS2CHJERLNBUy6bXdmF++stTMGKLxPukJ/G
wH8QyVZbDtcYt95YpYObAx+xQYwRsm4pQQouAHekZNxR2vaUoKY4Yu+BcZr2vAM9mBPqmD+EK0xj
KQH4ehvNBDPrIKwChR42jF4xac+FBWmu+aJLStQQRuX+xBvSmTjPFBZVyWRkbv0B1gfaSh8pcmgh
NGqzPUeGOuiuE3lA9673s51g+mjfZ6YDvFEdNnVHgN84ang7aCdh5ahj+oNWlxh+P5G4HjSXad2l
BpvZluVwBemvd/2IE5bA45KkzFgSo/AwJjUOyXpZlsx6oYRJehlRe2Wjrw/7/QZaL8Q83fWHHdLt
L2ARG5DSjoZ3w0jLrO20Wh0whQGewxaBDI6NAYZM2TW1Nermuu74MukM+sAHM6YiBxVKRziQELtE
o64vlk2juN1Dg7IUhS26fLQ1BuZY57jF8xPac0YJ6+nlqG8uLcLjdt6iLpduI3CD1d6WasSNRyTF
WYPJHII3k6ojCnu2wHsqzBH1YLtwV3OiMLsHUgRjuperhZyg62oI2EarnbDcGrKTauu+RQlrtdTt
9Y4IC2OFwYbCNNg+WMEl3O8MNitqAJxAC3YMNrM9rJGA3DCuqBk13vfJsrMvhuJhi5JL0uouMS3L
e/CGc43pxtgzo9ozXBTj0ZQSc86BzGCCSN7k0K0JtmwEopMRgCG73maoishINFAy9AN2YXuKg2mH
nYWhpFXuRVbi1g6vdDS8K9H0rgoRluwuOXZ04FRcMjhQeGDqbK5H5PPTojzMl9huN14vlWF/7wxS
hlBKdSwp7MDH9zOZ8rb6rJPXm0wT8Z3jq/RsoRnA2yN7kShS4C9zPoUaUWmXFPm+nkWslxNiPwR2
cSNYLFOhwWRRhItZgiYopyw7suqMKw4ZzSZQlNnwpBfnIj6Zl0N9uDeVTjWN1ZPuXRjuruqPp7a2
ibSA7xO2bvvEjGn1Rd4bA79iZkUjOz+omdUpwOzUlygyA5MhrCr8UIY9TjxE1Tw1RijwHPTQ9IG3
hUg9Q1KCPFbH7jpWxlFgBP3YdtEO6Zj7GawpHVZHoQU9EESxL1CYnZFQyXcOtR9JGIo0btFFn59S
a7HdYEo2tTfZutUuQn86LZxomquwa5K95MCRbBmlWc+xuIkaUuPQN7fTmSIMzTpkD6iaE3E03pQ8
ugFyS/ZZM58YyyXUMdTZzIfKHSqs+e1A0YwJt8qzrTVZN1A0MdRxrJZQPMtteySh245p2KIpE+Wm
LLN8gO+AtkS4CplsTJFBuVBZVhidcCDYlc0W53RDllTJkPgqIihylkE1j1pegVDzpFPTsAp5ay+D
QJi2I1Y+4feen8id52j5eKgL00E85Jgy3XUtbKItdM9I+vLeq1Iicjx9oWPsMOkXB987VJo0JGZK
jzVkGWhpvNMTO1p/BuQW0tRhTTMHc7UYqB6IW1nNl9d811sxFqY0mSbw8zpakGXVSE3X6SUKJRq+
MBxupUNmW11lSVRgGop1UIDIaHFI+2vg5XtVAWl93ul1aMyjEFEwZbPB+clw2lXTXTjA1mEpB0Ox
bzZQPpofhgnhS5RQNLS2J9lNHhas0MotNLoojws2POuE81CyZwdZxjv1xIgZhxrvmjnRpydZXlQo
b3tWgS2zYmF1g34hc4q7pI1a24YxWhYcqK0Yk7PF3OL0mVT0EcpOI8vduuyKniDVgc46IqyjiVC3
i2qluxg6+lJ3RkrO5IwT9iIaagJlDU8iIWT7arsIOHakcq+jOYeJ/iQNBTPuCrkhDEPVoB1mZElT
Y6Huy0mcGIaVLHg2DA9LKe10hIBLcWEc19KK3pZiCDxVMR/vV0JnXlPGqMRljBmtepI1KuUhrCCm
66QNVIz7ZrQxjVk+itiZ1mWxtMw5KsRCn208tFeuFK2aeTDwoqFEHszMTqSIA13nyDEIBSrEXOI7
WhT3SroWNvvEGxPVnsh3U8KR4xmK+zjbm/slMq8o358q88IKOScozOcnplCtoSshg5kONWam5sly
1fdLer1rxnOBy4zpJFmS2pRQ1X23Q2eVtF0T6Vru8j1FcZxdMu5kykDoZagFtGXfI2gChKHFPFig
wmzO0iIcjdZVbjiNka2AEzYtq9RS8h5L5om+TcnJqDOJ+Y1XwZMlEWqbjmSqlJbAezBPAdnrJJfd
xWGXqHZv61NGQENeXDNydw7i7qZrar3FaFSNh9zIVfLVvB/VgoDVgI+cyfSjwFaGCl5mfR14+Ga5
Ztht3jelCTdtYrzvzblxb2BNld2Gmg+zPOtoEbJnGH6es/vxlKOQNJ2F2B7NYRL0Ka9IZu6YZr33
V89PzszsLcawqXp+t5WdDlThFN9wKLAPI25UqvOysCg7mi5kQ1j080FPTeBNKCzHqbBZ7pZ9Jmcb
l6VguSMDK2MOsqi0EtnoSyo9RA0WPdhAI5jLZTVBVxMJmsVIM3f6gY+KA2M/L8s+apGzTRpXGr+R
+8lY2a+lRthnOvDJnb6qMfGmUDvzdDgoU9FOSk/JS8eNcrWabWbUjI/zcIbM2Lm0i9E9XA/haoXh
SeyPN92BaSGl1sz27gBgcyfmXOUKCyOt2VyMi8Ecmrfxsy0cJD5AulhYbjgSGuPFYbDvROyhVqnZ
TuIgTDEYbU9s4XHNuC4I0WdAh2yrUS53I13rSMOe4pPl3kgJ1OZMJzH0eslK9MwP5yMNxYbJhk0I
W56QojgbFy3+GapWjdldW9zQ5hIWyA1EnAYjb0MyiORc3eadZrTl8DVOqHqdL6yphZWmte4Q+NT0
FkPY4C0Jw/sgwK0w0kGB9RY4TOmNk3EBemrsDwkU8hYSVCQ2CUxzn7HxZDiiMmkkLYfI3HDGTSwU
xGxok5qAQrHMc1OlJ+Kg2hDVhzwQADGvG3sC5ukKGHZNX4qMk+top5N1in03iPK6EUhfcbLMJzOt
GM1qNO+4YZG5aG2bk5UbR/3p4TBM8bzT3S9WJlRxh3bjiuDq2WQ8YDuBCOnBLMl2Xn/VXy4Uv7s1
mK6J1u5IcBbysttRcnNZ1Li51dbBYR1zwzTQPTRaikqg9yJeen5iEy6VlDW1T3c0vwCK1KiWg6XU
Iq9yl6CXQEUBp6MppuiGzaJe4OZdi9gQ5BwEwfYuXxZGXAuZRG2EPpgLowW20Vyjt8oDoEAZztO2
w0xCO7YCbWtzWmaRtYD0Ap2F66m13g8kjHPjfIjt1/5IjDsjr09vd7t+0D/MgXUeNisIUa3sQJnb
7bLnErWzWhVdy6QsTmqKruQXHRzYZ9UvUmLtbeOKi0tx0fizDWk25jznhp5hjzDGBNb5wBbNyLAP
RbM7bPqzRYdOUaZbZtrULyNF2GO5ym1lMzc6+N6oEAFVCTPiRiHcR0hPsFACLWy7I4WalIJod1IZ
gRyw5kgBRg3LvBSek6aILFOIiLppeTA1ZTNl1dSpdtn+MAvqfaX2hb4aTVGcYuhsy60RLIOpmvPB
PB2WillsFvN8ZQOvKUq5nB1ugeGw8b0r8+qwdMfGaLVuUCVYCURj4TOKUEMDZfSekfp9RtfMPN1s
ybk6156fCIa1SdObSV0OdfpwHgdxXkdV4Llz3+fyxFeG6R6E/XmP2CEhYc60Ve5u+JmDHHBTVXyd
mAwxH4HGeQAiSo8FHNsGg1XQZTtpUcxofJGt6n22jidcL1lnNOSq3qy3TlBezicm2mBTyaX1JakE
a2as6OymZy4OBggXfMBejqMGNFtQ/Rmr5PFMgGUn8OvMTVGtg1KmI1npNoajamK6qoRrBkKYmK5Z
S8bNelzCkw2dezaHuYMI+EiGNNVFhOLzQZHZpmPmPpmT6JTWEKOZHHo9IqzS0kKG4zXlr/iZ4dq2
jKVGvtuZRQnNRs5e05G0qZZyDXwkCyexbSSao6DvpNQQaCO+6PT2qsZu6LS/F4eFgpYaytrTPMsk
E1Gdgycd5llkwLU6m4JwL9ukvaWTNWgOrPNsYexDZFBgjupD4trPsnSP6ALSLyRmtZOs2pnl/KCy
TEcBkHNyalo2LlSkOBzJQCcHnU1fEzpFR8WS56e1nMbrbNnPR4lScDjOb5ZYCCzN1iG4EFFqCHgs
k96Y3qd2MPX70lqOOGlSzJD5Vi2DpTJbLmEBXe08gxoA3SuzWi5VRSgoY2Y2iBi8KPRp3JkFpKGu
vFwvsSKNLURbmZW1kblBT0zJRa6uRdM06ZUhQ/JkNnVBWBWBntK0mHc6OTTEc8dzu7Q5JEijhyma
l+CkshFISxM4kQ2npZjv0QSaxyjZPc7y/bC72u/Gh93OiRG9W25AvMDjSTSW5eO67havLbnc9TWl
uzNWmrPBlf2+DppJf9xf51tzg6ZA4sZ2g6J24WjAhjvMbJwgPR8yUqxNSFVFW0+hBvJRssemwJer
0ISmiT0N4gB/NJTydM/FxZCLZ1zJ2Yf5yvSwatJ4tec2o77iW+N56aTZxABW/PlJM3BB6fHurMaN
fTHYJBLoCRoK3hiubNsYdyyKxDyxym1cHQC1NtyO8U6W5rCCDVcZY9rQbDjzMl+X243SolItRolE
AclytjBxUTGGY9ddGItosSuGsdATSl8NmP1uI831ySYDOmrkG8TA4CDUxrEF71L2wSj3Sgj0W75W
KmSe12NTMttNKd3Ch5vRah5rwJFseHUB1TZjEVNKg2ngWUMaa5vcNsdwVvaalYLVvfiooXo2Dnwk
XIHJSneChV1RdqBHQn+Fiet1vwD+z3AwzeNsQ+RMbPkMVqoJpIWa6GTUEtJECduZlk5N0Gnfzvce
VxkganMopZKn05Igp2gjOeUGWI2NXcXL7mg+CFEsDrS8A1S/clBCsacWkSewHALimoFaTuRwbm6C
ZD9ODtsUaEvTtGaVJUflepTby8G03K47XSGw8bXeE0KJ6XnlMFAOqFykUY/aL7JA2VXL+Qg46Ui4
yJRMs5XUtQSC2inAU5WmUoY4y0jFApQMJIwNyGYxA0O1lLjSq4Qpb9aTxKgMU9qHOVzMBCfrwNGC
nq0RftwBsfeaSjGf4dtVAmWsVr01PNqzTb5XCZtaeuLUx2c4UBzSaiYNowzl10oyN8ZRDzMYR8A3
hjUvBG8ujlIRwqLS61tDtUbn7vNThFGDGDJT2dfrdL5I4Go9KkeeM/JmUElPpjJFjwRLGR6IgA1c
4JAvQ94Z7/MNLi9n+Wzd+D3kwDs1Y8nA1pOQXROUO++wm1VkxfuDPGH8FIxApUyQTlnQREiDSV5k
BdvRYYlV1o5GLKZQvbGwetNbjcjVmKNnKjHdgbngaTQ9sEuIN/XysNzk0o7v7daagGx789wG7pcH
tN4U0TMdgKPNfE/WscUNNia/jvmaCA6aKYS9XMkoD/BtEYwif8Tpy1643+jxUBhQPYpCpI3h7WAe
DPseyodo1yK5jTOC4bnWrTJTCfUFulxIq6gTLPnpsAKOtjSZPT8JezxQt1CKLtQ6ZOJ9x9wnjTLK
RMMw10uFiasRn3QHdSWSAp/UHakivWgyh0h4sJWmu43m75oqnKe13AHzFFbKLA4oCqPLeFBi8xGB
ins57k0TeASEW3U7gTBR4GnFLelDNcm2zJDPi2E4RmoeRElTY4/L9s7ibEIE+s0SDHdY+11tjiDz
zmCPBapuGES23i7o9QC42BlZ8DmTFM0htzYx5dusxgcUzvmriUUO6UNI8ovF0CC5eg9mFrOcmbPc
sB0IVacgzo6jXjNe6INIt0EIaszmmVKtLCna6CMLR0kKxPLWkoi1mtnwfI3rDQkxe1ngUIYEY9ow
g1kdQeXWnPKCNEDW/j5tln4jB4K6HA4XPbg/Nm3OWiasn0m1OudFoyMvi8UYWaumNY0bQx2H+57I
Af+tWM6VSXdhb+pdLxPyURbVSKTEoejjWbY8GMAKDsQcMTN9wRKwRuuylhwKabPo9MtUpgb1aB4H
KAO3/QOx85LwthORnZV2Yg8rm5z7YcZGEaS21AFu5ZxlqR7izuyJRGHzwYAXhMG0zzeTZtdIwtIl
oJExVuRQ5oEOUVJE6qlhaky6a0VRU4WxlWg0nmtsPAPh8EIcz6sGEy09QCOkrOdJkHeoAlU7Fmc4
Sq07pUYPWANWpHZVarbsU/k0kcQcx+b4uMNVk96BjuzpHkyF1bSzQnTYrbNdxJXw4jCYRKXhU8qS
jH2fVM096VNwJ4gNCpsgoLb5buE6oa9IbIYs+SUmGf7BCRDXsHWpHm0MgW266x6ZpcMRI6+63WWe
jLpz2+gJQxCSMhXvJmGS1IKOxPXzk6/hnDSFxa62UPbL/aR0twzk7GMAosyBcWB0ZcixvU09WTTM
gvAKYMPpvBIcv1KlFI/5PTfGbKQ+6KoH7ClcKFFZ7Ml1aHH8Bi2KmMdJWSbshl2UE2zmssQEcex0
z3Z5ZOQOd9M0Z0O26XEjdV1oEt3zN70OUx53Y/0e40E9OF4KS1OcMA4dYUpcQtXBgerDMmAHJA48
VF/RxLgezzNBQpa2Tw/VbWIaSDiU55nE9RfA2y36IAasM8vgoQ4saj0GzFae7fCWTu4TNKaV1Oo6
Y6/vbA+1yTBjI5CcQRIX5jyqXZFdBn2Yn2PFFjmgdOguOBPEC51VPYYmerex5utoXzPL3ZgiQjNt
ZuPAckYVP+a3Y83aUcZSmLDbemQxZOegR0mRA8fEYoIeuSd3bDElgEYCbhZmuywz3DqrzZRU64Od
hl3RsnU4CmFVlIYjmhjTg32E9TdygMhD2oS0HkIe/DG8swUKSbU0QXdJVAC/VxE1it3UdhdYkzIC
dnsjMyocmhsKlki8g6OKKQ83uGbNe8R+1yti3ySCfsoebD/aTjdKx2elkWszjEeASJxA94V08LGR
lY6JER9s+kuiMbb6uigXKdsVRQspkmnUm8ujiTZma2RCKVYnliccPvFHtBFxM6aHQeiSancEyqLJ
xVBIehsU98ab/oSYHjyK8cuwz9mxtB6u1cRccMvxstKyRlkfVHkSlF0Vtk12vJBhht3phhqHcJ0A
bVnwUMAvBMsQTEMc+Kq8BtpRopwIsFMRBs0oyrBuxQSHqYENBrWXK3vSGdkOL2W6xSBYvLW3vYlR
ESoP/N6VkDHAm5x7Hbhj7CzzMFJMDhcFYSErewdZwYZqKUSukeFYIENTI9wRM/C4w3Cq91LUFXzl
AFxTEBYlZAysjEagqsoi5EZ2jKWGjJoxL5fiwKMJqrZhSY41D4xEsKwm88N0ZAf9cD2c9LltOg87
/Ch3JuW4o3GzqFQB3444Vn2EHnnLkWdA9j5THDIQJ+uSkaaRNg6KQU2IW1Kyh0kkhH1x620sYyVO
xHweulRSbBggd0BnH9jT2hD0pl75JYh//CWcxbO1kPm7wFxPRthUNbcM50zztrTEIISw7cZy1bCi
uFdjfTuI1zWdS6Yzk8wJ3aYskzOzDnec7TvoqMGV8aRnACOC6s18hE0+1DYXOVkiSAhidccfOQKI
rZJmSKdpGIyHQi2AGGy7BnIrmF49IxnTgDhty2+sPKQbNTMwihvB/EHW01yOk1qBhI1jyNZKc4cL
c0n20v4U8mq8xEGQahXQdGCzFNCWOnOo10oc2+Ogu6uaVV/L93thOrcRUwxHOR3R6mmMtcEScSAH
nhjweoVOPFg62F18b1NWb5hbPj5i5eenYEmUoy2iGx4m6UZQ9GYLrGRjmGTIjZZb2MreksPdMhh0
mdj06WxQR1nIsvWst7RNRQwbDhoY++FuvIvaXKnUn5D6QTTGyADWYtiEFG4B7zNW7vYY0dvknLKB
9KnSnzpbCObRCqvcUSmZJBHx0NyyTcFqo5ByxR+ArR9Cy9QEmsIJsJlQET6ayOlGH9B5vXT7u2WX
TPvLgD/E8nwH9FYvxGd9XFtChMENdwExHm1mwqAKBSvqtdFHNuMyeoIjU3vmcnjAQqxB5v6anWOJ
iU3pPdSH6AYdBF6fpoSlgvbIxgOuh60tY81ZY/IkG48WwPUTRxroaWePEH4kTCU/g5wt6sSKqmwk
2yBM2Y5KPMn1eDU0S4lbHpYQoo7olO0tKxv0Z7gfOcUIbmS0P1P5DKlHYBSmcc5JcVXD63RqLhUS
rh0SifvCsANspIXS3YWhx4ErSt7Q5SdCumeYNJ/O0V3gVlJeNaIohr10Qrri7vkJE+pSXCiw3vjE
YYFAB5/GDHXejTEUTMzdokEFbYm0W2pGVLrRoJxagj9b79jYsBvgsQ6XkNEFEWBGd4A9ZUH8IgKK
dyukUf2Ux+ZrNebGUyGUUUbv+5rIFyG57my9tccJzgwYKdyoOX+dQfBIQD1vC8ywjY+B3gIzixRc
+tAsBxZwQ82iGgZ9nVorm53eTHh9PBnPQWPACcgOmShCBb+LRaqnLtjumJvzFA6Uqr0J9Z0RaAOk
zSXIeutgx5rqXuaWyyHaR2auVw/WVPewZ+xd2qktJp035TYZCm3WCx+SXKSOxonX9Txc7yx90+9p
rrDXwna9t2KXttBIy5nqQNRkvuwTvZDTCrrcioYpLA/aYimuFgdkuFw6XUjXl8Ee3vbkVRXB0BBd
mCWE+kNWWzcp//w07RptFp85Mpy5rPF1iPWSBTHwus50uBd3G95seg4pa5KUdjjeV5ZpszNrx1ks
Nd/fClwqGOaigsQDLYbPT4OVeMzws/vWOtzxWpxZ5GgwRpXhMZPO3Wo+6TsBby+KjVDxnTVwlIFV
I9tkogERimkGUFC+W1RboEPktlTTEXVjrXa8nmJ3VnZudcVe0JNQuRaDQ0+KhVEorOQendjMjIlB
5MZvloHWFZfjdW1AwjGHb9dia3HFUhkIc+WYD5VjjL485uGFxZIVw+P3Sumf+747FAuEUimUnh74
7jHT75itN12XHTNBCLc+4N3mlMe4SRKqS43NLeQtasg/nDL/VC8JIU8bet0dNBwes/1IEfUV4A8A
W59U0rhjowvSj4enrEOK1bHuXN7q0+G2vXtPtpvIrs4EC5zYTzFueMrMsesaTxNN7MiCyiVtHuTz
0zHDsc3lRCaCzE/3sDIjl7F67NVoEoayTIvceE0U3oY9YRaLrup5M0STu0wnP34mbmyWzwDfnO5O
5MSJkmHzU5s7G4cIudnu4QoaH1aQ9ooZsdlFrBNc5qJBoAXEYISTobM/1qZugEapkOcnPtfHgRjK
x9zF+TLjtd4E2EfGOIxcGTtJflEwEtkjFyibHwao4pvjg7E+5oKOLGKAgMgHOGJwBcaUCzq1M5ue
MiG1Zp6yFpV6ywbqyP0mrF2iRI6ZkYwqt9sG5gDX2u/sQCwaOkKdhB9tjuPeww/PT828GuwMp4Ew
WQ9lktlwLEcUxvqURUoxhr/v0s2iGHs8M6lca72zYZ7cKajIe1w0N4959UIkTjeT6vlJiznuq7T4
M4nx36ZGD9JTGvgff6EgMPzzBbuhzNAq/BCUIP58wf98aX/fUOiUUH8mlfuGsqfDdbodAI+48fbT
iT9mmsY3FJhatpys3B0QAv3t0T1n75+UaXbpWYKvsu+5KHQ2Z7v+7+NXX6Xew6fc+9sz8dmqLNPk
h2fh28dm/j20wqSt+t+MnVblj87DZ48s1055+IzXhengUh4+w0TNRIwOx4dP1LrN2y8aNrJ3+0n7
bUwes/RVASqNkh4gqABiQVLoTpJmuayDCdKd0BXnN72u7wjdYO+kqc5NgH4rFnoxpg/GbC3yUUcM
xTCS6GASzbggMkUL4sbJQYW8mC7x7saGFa5eIkrX6lfQLGbobsdR+UPluU6XSnCg39IevM5GeMT5
nlNZjrsXZh1huWa9FN+Yh0OzG6j8utSxHJUjDxp0N1K5jZfIYoRQB4Jc7HFtxEIbi7MHwOOiJ3kB
HVBjUW+0XTrHsUi3e5LrWk05ojrjeR+pkHGDN+imMisKCuHxhtoXlm6u8p5WaBBHSU13NjRQnZ4C
HbLJKdGLUaqrzDydnNOLcu3xPBQvSkId9Pr5xtnnjcUVbCMPyy4iILaY8rJp8Ek86ImqQY+zLDcL
30yBRuIReEUv+GGXxNd40N1WELTOtqvx1ICYONnuJ3RBBz1qHntsssj2GjokyDxDJugErcTCJVz3
IPXkMkykFRiFnFzl6G4wK3x+VmLzHCPGw1Ev35BMlPfDEbmajYzRdqebpptuh81mHUI+iGEypw6z
Kuj4SCgcDrulvx6TcnswDT9ZMZPO3JDhHdF0QjNB7dhOs0Bm58ulaEYb7sDzg4CP5LmgCOZ85jXS
HA8GqZgmHX3Y8/spAYV4MxyCuD4W/EIphWaXBfP9aivBVWWowKUrAmHBIFp/LUT6SEiYzY5tCpId
ScRkuiqF7s5jSU4NiUKYkJXRFFwNesotZQmnCEaddzploCbLvTvEaslYYPG8tLlSpyViNz9Q1lbp
BtA+XjmD3dQMRTLlPWzAxbo3XjgqNepZmfX8NEITo9Ln63w4s+yxwpLr9cQR97UWRbWET6Yhloww
quLSrZ3Vpb1MSm4jsygzSFmeYQheZQa+IrMhw3nQ85NR6uHUbfrrFaNM4dQLGKlRpkO16iPHiTox
ZqqukKAL8tcPad1rjTAC/+HW6KxKu9keYbfao8/NC3LD/cbW5VLgzALHPnLbp8F0FxQvwsT/469p
Ud1iMUEVs3BbWdHxdLnPzrS7VP6MwTornfcxWQPLdqMfbrHKFFijsgizbWmV1TZqG21782+ucK3S
XbH7+8zXZ+xEOoBrOHUfPZEjPW9hwImeb+O/nasI/ecLSt5H1i59y/3HpxVfEb3Y+/9+2e12N5Zj
otAHopmmmR76wZmzGe8mllSkVfYznkn024aAL3d6DPPTc5mPMoqgsD9fOrcM0Ikbl9q/3ZtGARdJ
5BY2fk6J7ru4x2c59MUTrZf68jYFQOuvgv/xCsaynVNTJ+xTgOo6Aa5RoAtm6LkZd1E9nGn9puIT
NwIydFevg3qOApdYQ7XnmxLUORN7jTfneH3rYI4BG37GSGagHSbLJpnrhF7onGT61mhendLAPTjn
wFwd0bMobqxkbK1WRycBP7pC+HlX6NrgthaKOGfVrg/veQZdmuegUFiHK+CcvNzVvXt9mhspNgi3
5c+wGBFo54PCDt3t28w6f2iwVYKQyBcSC/iGq6t9/7Z8Ly3CA2gLiNAB7UW2dV1619h9hV2X6P2V
BG4ufQILwntrvwUMaL3iO2G/8rvbTsmzLvjDDP/SQ7mZdP8RI4U+wrlPI96GO/R5A3V5zD9r/fbR
usU+XR7mThcFlpS4nZ2fhvlcNHfPmP5MW3Xyk241U9eH9pqpujq2XwO5o47brdWVoaZAMRS9ZLGu
D/ZlQl6yXKeeXrda50o/YrluJN1PXfzV3Tit3dWp/2KRxmCm3ka9a+TDUACMujYa19dvzqG6q7LX
EBltF5yucfAame4sd6TTK/APR/l4APrL9lX3fX7sz11VP8q1a2tA5yR8biHos7rO2cVfkdLT1Pej
V+U1Ka3yzfjtbT5TwIm+pkyvs/kbQA9QGcW/h8r3zcQTlU+oPzD5ftw/grXfSPJvQlkeqIjS/eAk
3eMAvMHaM29UuZW15zD9dOJedhQvE/cE/JPaze6H/iO4e06efxP6Mttt6CevS1bpqYvvQt/vcCHO
YXqEvjT1HfS9z2ac6HsC/kHvlumv6T+cE+9DbL708S8XnJ32Q36B4OxzIL9TcHZNl1/bgvrfG5yd
+s+79Xt5BGQbl11eEblMvbN4HlGn5Peo07O7nTeSCKD+qFPdOIt+BXf2K3n+OG+AC1xn8zNWxJ22
ITvdgRsHoeeWYex+WNf+/kUFAgDr3ucRnth7GdUDFCaRCzkiNzH4zoJHBk/c+zyXh9Xf78SwsbXd
Nmmx+jE0Iy8vir9NswvQHuEa9T1ce2QB6x+unePaUT2/G8NwBHhR5DUn6k2GfQ7oETOMEN9DrEfC
mlfb+wjm/wTHWtA/g2IlaOdkmYbW7oPC+H6KHVdduo94emcBPUSx1k7euX7ziWJXd3K+Y1x/Tpri
Ma/vfcb0+MLjo0TfdjSvLaV0H9E3Z/rxCBVQ+u6VyM+o8MgaIAc+aZNtWs8fgH/5gP6//x7q4oOH
8f46gzyXDfgWTS6j+umK45rf9pvojXcc3PdSHp1H1mEvdeYhTuDfoUHuo/QHP9gp3PJvqTuOjhjv
bp0izI4j/D6aA39kg/QSpkc2+ynyO/TG1SXN30NvvMOQvpe+wO9bqPtMX3wfBzrfoyY6D+01foT7
91IP4TaLrP1xYN5HPdwn3XPa4ROkn64drtH5d9EO3z+i76UdHllb+7oPD1CA+h7l8Mi67Svc42c/
Sjv8B/aj3mszCqM7ICx9PK3qxn3Qy1Ep+pOTA2/dzvyZm0/fsfN0PlH+wez5n5z06hXuNvie5zY+
y6Gn8Uey6M8iuTMtniauMviRfMBLaa1HmC9343yMuNfSVr+Q12XenuHhuY9+uSyTqZtYScm7ngXq
+Q8+sHYGx43V/MceWbtE6vOUlqLUtqKX8tjPlyZcvaGY34PZ53h9Wd5XyP2r6VNh697L2auspWjA
287tTwl9oVK/AfPTtOodj6G9qlUAtU3xW53g/ufU6jcyu0uz3sTIn/4c/3c+G0egDzwP+bHtOzmH
U60zSt5hl29Y8T5T5vpD/Ne4eqRF+RIm3vGJ1WvrM7/SosYO0Lq0wugmJ++qm3fxUf7zJYcAcRiF
ydvR8gU7/BH5HUV111qpSbS/u83T87isVQCZAOGXoWNde+DqAonJVm1jVxdLLtL4iu58zzjjp2sh
7Pu00HfooMuR9fnhI9qkEAK/vFvyyA7Lu+qgq+eI/IoUyMA976B48M79yeKnxu+fwzT25wt1V6r2
bTv1DxLhEhVA3164wl0BLoSgghfgSpUFMFBAZNuX/2Nt93Hsth98lvL5f78v8/snZp1tfkj6bOti
oI8sw58F9NCKG/kdWWePbM+0rDiR4sX9TRLPeKt0p0DMY+B+u8UPJ9uqbNUE/x1PyXLVtkzj0zkm
f/y1Bz//bzj8f6vVtNf77zj+7+3WfHCnAG2PsyIeyWH71KmHHlFAv2On6OozNb/+TpEdfScb3mWP
qNMeY/bIJtFH+A+Me3sW8cPbQ49kxH5msl5azL/9BvKu/MxMvMO2cTv/0Yfy0b5A8tN1wG+eu3qc
RL9E5ll7PNFDmWdfdOFnbxU/kq/6AevL/5En6v99QBM8/hjtzwyHWl9h3NzozF7nRfeeZYaPIdEr
gAfDoruOF7otJfV9o6KTL/Yh55JZrcKjdfk8OPp9gqAvO/OD4qFHEtXewvbTQ6NHHov9JzS6ITT6
cph/4SjpkWNezvbvn4DpXmfp1aT8CkET8VBm3Rdd+Cdw+o8ETuftyXvFUI88+nUR1D/h1IMa4pcJ
qR5cWvmqG/+EVb9MWDXZx++z0YQh9xzt8zGqOrX/YFB1z9bWbc90vXNQNflsL+k3D6kmZ7bF3jmg
euxYg2vI/gmn/i7h1OeD/AsHU4+sCZzp3T+h1L2O0smO/AqR1JVMvMsc+KIH/wRS/5FA6pwdea8w
6pHo+gKkf4Kox3TDLxNDPfLY2je9+CeE+mVCqPfZlUKxe+KSj/HT4ztS9xzheuNhB+8bPH1YPbqS
rJd9tcD0G+XpfbYc8mvk6X0L6KdHT488Kf1P9HRD9PSdmwy/Zp7e49sO/8tjpV9ly+mR/KxP8P+J
kv4jUdI77Ea8U57e920o/C+PiX6lTaUHF0z+2VC6lVU/9ZHJz54EvvvgoMs86WKPvffiMqL7wyb0
rR3QR4zHbziq9x4Wd31Ur7oBXxd9l0djz/flHj589sgrm5bBY1Sirvm9j7ifj1Ppp5md79YINxud
6ybn/gzgL8HfPeIU8oa5eSwqPm9qXoG2H122M78DW75X07wPW67u6Fxmy2Oq5bbDKB/bgb7AllsO
ovwtT+wqEyNb3RjpXmYA+eCRMh9av7nca5BKP3iGzOWl2fPjfkL31jsO32fB7Oz5MR8E9P4Hxvw8
gr2eKvad58BRxIMMe23+Toqh7bu8fubpb3CUWqu3Ti/8oUx7BfL+VPuZewZ3bBRcJtvxcKL7yfap
+TvJRl1/X8xlrl3exzjPtXvhPXQM2w1nA371wdeXv9Tm5em4l8/eDvrGYUdXlvLag5rPOR+Xti6/
bfqGwq/HzZDtBmbnHKmuqK6zrzG5e8/yEveA4F9k/vMXrW7b49ni47kz5+r5dazYsRnJLU8vZr31
JdJXqNAureLIeU/0gik7j+GmGl5tGta9aNOuxFbnF2bODzKA92K94ju5TZfOM/1+VXP5wL1vhHTe
pn2rln49wnFVAej1sTuTNx31K1vf7d7OrZwbWoUfno44BVqLuHRO1htU/Qb9PWwlyUfYet79usxW
5wTxE2u3x3eT/EdI+4243o+3P/k9B20XEr/twlGYTPL9GhOAwvHzDs87kfeWldMLa6bXe31TTTec
LnhtkfXquYIXfAS8PQv4wnL9ldXVc5maj3Dypztx+HfQD9hr6vwy/Luqzo9Qbyrz8TToO9v6bPyx
+8f/NjHckNp2Xit/4R+Gyesh0ucr+GVWYttWTgcoruRjJl65d7dcWiXl/QeM37Qke2XHqH1O6NZj
yT8jK3Ik0KWg98Ii7uV+31jPh1eQXcs7uRaxXAqbb+CWB2Cu/vtCjx87z/641OGuBuH2p1hb59Rc
BJoDOqNtVfVuj1TPiemUwVYCpfJhJeVhEl5c0XhQYV5edrkuhLuISLTZmSh5M6s+bV9fen7hC49P
Bmw4cuRt2P/+eO+3a3GPkfMnqsKJaxXODUu+P0D10bey5z1U36mf9zGMeEjT4fe9gOEE7Pxm1WPs
+cnvkGmXwz+fDu0EEYs0Pi4jyfz3vLbjmFqAdi8tnr6zerqxQ3eay/bV9fe/xOPiAxSXtiaOmxKt
ioKL9m0KN5Z+r7d33Ci6SzsWD76S5udGyqeJ+n1G+7NtstZ60bcqsu9k9sUe3MVljMCv5IxdUYgX
i3zOpHY0ucBqo/IrgP/92W038Og3WIDZuhEA9MkpP47Yw9FvB7uYg/qu0e8V8D9sDeX1DSHdiyS8
QsGz2yUPkOMnemZvm84HfLLr6ybk3at21/yxK97YBSt6Qe+gF/2wKyN+W1dO5lPmz/lfvzg/HlEU
382QC6Hi+zPkZk3yqha6j3Dkth2WE0daQO/Fkv+wiblfs3xpYMjbNhp/hIG5UXH8bPNydvf+e1Mn
fmocN0jTTZWdXr/3Fj+uJX9h7c7lDakGN5HjWpz2JeCb0y1QAr0QkF1buzxnTM6riROslxOul5uA
3RuEXQ7AvpTJuWjrfhb+ZF11Aj9NAesSgGyaSoWVvbE+dS0/rGXWLbk138HHq8hvJiZGIhc0zzVi
fmvB7h/hn+izfCWj+4b1TeflSkYFTYMRvWXW3+S5XPFbvurhzcNPX3Jg7t1SOa+WXvVRmb44J2Df
ujK/NHFexQkqnJRWWd2Z2Xc3c0Af3FclrJ/NwrziJdPUT6La1zK5mWvUI1y76f6Tp5yWH1h2Rna/
uB/0KtRh6BTpNvXK7zI/x1en/hRv6Czs250i6tIq9TVGnIsCzjPiFV2rfj4ifLkV4vu5R2eF9D5e
0k/PkBmk/sNOUeukk2ff4vGOvPwM6A1lbsuPOc/ebuvkYeS5HZMr9D2bG/Xt7Y8kUIMuA6md7fYv
52+/yaM3d3F/6US/8+x7nwWD78vpo+hjjveNWbCfeHs2FP3epYahm1STsgizH067GLTUniOTTQP3
rfXLr6Xwme6fB+HZhxG/LiLHlu9OwMiA+fgaZ90aZrVZHV/Og/aTq1M3TaOjFFtxtjf/OGl+uY+m
u54LZOi4H+Z2K9tv0PzxAn+xV9Z+9lt2r+XQfb27y4NH7vHEv+TzPZauTZo/ev63+FGTIG3aHrXd
nobZ9uZI5sMDJUdtc6eJvD28/CiFb9XZF8roy4sbjOHPo9z1qfOhM18HllHoJ+2LuEGcGPrBt+H+
1wV4cMmnTfKVcvlF5943M29lFZurM+/refeb9CtqB+/2jr05zEez89nwsmFiFfu/whmr6g2iSH7K
gJ/RxAgEwwd/se0lo3HMsv3X68J00P7BSit2aggMM5DGHLwLWK39NGomYnR4fgJ/qjX4xRcNG9m7
/aT9lg0QfRYgBkbHq94qcGKDcSQxsxOtsuMZIvNaNZwQqCmslseWlVlfF0Tj+UkVoHKz2ar+mtG0
QbxwLKvfNUhkM0Bs7eAPylAn+qTHFbkdyF3CsEU5cec7olZ0ZFitnGg7IJbyaGN1Qxtg8wbS1N5r
06FBCxpbHvJqXKaszww0knW1EeU7pjCSoUUjop056UDMfFJPCLY/Kg/ycpCoW9bT695CG6X689Ns
HKfMVq7mg4mXkEF3veg0ljpcTPSKnIwE3V52DoNmcMgHSrFxD76NuSHdraV6MteaoApX06lGjFe9
HPS4lRvb1w1SKDZ93/f/9a//gV+H58bBfXUwzyqKNwu/bjNhZ7dSv1GuJ23/uoR3xsD8+vr0vMa4
KtmzRW4ULIqgZ8/WOm+2eNDSt7eeWT84C+nblYNffzguKLqr43G+zA8ZkMF5I3pmRM6D+h2H5Lw3
+/f0H3ygi68HJr+rA5H6279jv0BLSZvUO7BKd1vqbuRaW7fN6JXCslfZf8cup0kUuonubrdpUTnu
33JYnWMGLSDt37Fzlp1Wdzjzv0/H3F34nkHKpwWMR437MWXhBjf2aNvbun879/WCwboq0fNlbhQp
1une4S9JbVO/nVDPG8u/p8cD+pIMUl9Mo5Vb/B2V0ocOhpEL2pumK2v/7jrqLGF+yIQCPfk6j+LX
n093O2nXw+87a/sh48C/gniJjiheihOMFw/geDkBuS1wv7Mzv2MAecWZuzrQl8v9kCHlPjR308Bd
Bvc7DtEFl/Tq8Jwv80OGhmmbumlYzoP6HYfkvDN9dUTOFvkhAyKAln47M/SGq3NVtNfL3rrWSON3
yFgFTb4ABfPiHRu9if7XYf6O0+Am9+2mobtWww8eQNA0GMXipWwbv2sgr4H+LYfzzcWrv2eYFe/Z
v+lqVryfu3Zm+Xcsm98YVb3JlR9i2tSkzecDDv02rQrnmzNHf/0pdolq11fZzhe6VS8S598YdGGh
bf9i3+pmX8D1O6q+KxPljaG5VO5HjU5zau/GAbqE7uoYffhz+9f/B5NekjE+OQEA</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-CustomAppManagementPolicyToApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Set-DefaultPolicyInputsFromConfig
{
	param (
		$policy # The policy object returned from the tenant
	)
	
	# Helper to extract a restriction by type
	function Get-Restriction ($restrictions, $type)
	{
		if ($restrictions)
		{
			return $restrictions | Where-Object { $_.restrictionType -eq $type }
		}
		return $null
	}
	
	$appRestrictions = $policy.applicationRestrictions
	$pwdCreds = $appRestrictions.passwordCredentials
	$keyCreds = $appRestrictions.keyCredentials
	
	<# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$txtPwdLifetime.Text = ($pwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpPwdDate.Value = [datetime]::Parse($pwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	#>
	
	# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$maxLifetime = $pwdLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtPwdLifetime.Text = $matches[1] # just the number of days
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtPwdLifetime.Text = $maxLifetime # keep as ISO 8601 if not just days
			}
			else
			{
				$txtPwdLifetime.Text = "" # fallback for invalid/unsupported formats
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtPwdLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtPwdLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $pwdLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpPwdDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpPwdDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					# fallback to today if parsing fails
					$dtpPwdDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpPwdDate.Value = [datetime]::Now
		}
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	
	<# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$txtSymmetricKeyLifetime.Text = ($symKeyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpSymmetricKeyDate.Value = [datetime]::Parse($symKeyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$maxLifetime = $symKeyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtSymmetricKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtSymmetricKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtSymmetricKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtSymmetricKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtSymmetricKeyLifetime.Text = ""
		}
		$dateValue = $symKeyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpSymmetricKeyDate.Value = $dateValue
			}
			else
			{
				try { $dtpSymmetricKeyDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpSymmetricKeyDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpSymmetricKeyDate.Value = [datetime]::Now
		}
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	
	<# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$txtCustomPasswordLifetime.Text = ($item.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpCustomPasswordDate.Value = [datetime]::Parse($item.restrictForAppsCreatedAfterDateTime)
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	#>
	
	# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$maxLifetime = $item.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtCustomPasswordLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtCustomPasswordLifetime.Text = $maxLifetime
			}
			else
			{
				$txtCustomPasswordLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtCustomPasswordLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtCustomPasswordLifetime.Text = ""
		}
		$dateValue = $item.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpCustomPasswordDate.Value = $dateValue
			}
			else
			{
				try { $dtpCustomPasswordDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpCustomPasswordDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpCustomPasswordDate.Value = [datetime]::Now
		}
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	
	<# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$txtKeyLifetime.Text = ($keyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpKeyDate.Value = [datetime]::Parse($keyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$maxLifetime = $keyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtKeyLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $keyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpKeyDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpKeyDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					$dtpKeyDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpKeyDate.Value = [datetime]::Now
		}
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
}

function Convert-TimeSpanToIsoDuration
{
	param ([string]$input)
	if ($input -match '^(\d+)\.(\d{2}):(\d{2}):(\d{2})$')
	{
		# e.g. 1.00:00:00 => P1D
		return "P$($matches[1])D"
	}
	return $input
}

<#
function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}
#>

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkPwdLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# customPasswordLifetime
		$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			# Optionally refresh the UI
			Load-CurrentDefaultApplicationPolicy
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
			
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		$defaultPolicy = Load-CurrentDefaultApplicationPolicy
		Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>