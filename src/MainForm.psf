<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAALBNSURBVHhe7P3Xb2Pdvq6JnUuj/44DtK/shtsX
bQNt2NcNGDBgwH3O6d57n73PWvtba335q5yDqkqlUs4555xzzjkHKlMSk0QqkhSp+BhjUlRJqpzD
93uEF6Rm4phzjjnGO0f8D/9BEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEIT/8B/+w7X/43//3xc98X1WFBYeXRQcEikSiUQikegbVGR0
QtFvv/1R9N/9d/+HoouZ/Qv8x//4H+uyCqsYW9pkTL/J6OK6SCQSiUSib1DjKi9ftHHj1j0u5vcv
8MQ3oGh8eYuW4QWaB+doHpoXiUQikUj0Mg16PlveUi/s/466eLxXybt90+AcHRMGuoam32wAIqNi
i3TGHVqHF2kb8ah1TE/z+ApN4wbtu3e5SCQSiUR/ZrWP6rX8sqFvhsb+2ddKbdM0MEf7mNpngcZ+
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
AMxlB3M/wul0In71mqsB5jvrOemby2em8Iz3dIiIJ1lzXjbHOm8ONQBsbGxYB1DEk6LZOfj+IuJp
1xzfvDnUAAAAAAAnAwIAAACADSEAAAAA2JB/OgAsrhEAAAAATir/VADoHFlS/+SK9WJEREQ8efaM
L6tnyvllASAoOCxzblPqnXKqZ9JpJQdEREQ8eZpz+eD8jjoHp347ANy5c7dkeHLBSguIiIh4su0c
mNKL1je/HQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAATiH/H9hU+CRByAzYAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $global:ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formEntraIDApplicationMa.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Retrieve the application ID from the textbox
		$appId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($appId))
		{
			Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned secrets" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Application"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-CustomAppManagementPolicyToApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Set-DefaultPolicyInputsFromConfig
{
	param (
		$policy # The policy object returned from the tenant
	)
	
	# Helper to extract a restriction by type
	function Get-Restriction ($restrictions, $type)
	{
		if ($restrictions)
		{
			return $restrictions | Where-Object { $_.restrictionType -eq $type }
		}
		return $null
	}
	
	$appRestrictions = $policy.applicationRestrictions
	$pwdCreds = $appRestrictions.passwordCredentials
	$keyCreds = $appRestrictions.keyCredentials
	
	<# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$txtPwdLifetime.Text = ($pwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpPwdDate.Value = [datetime]::Parse($pwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	#>
	
	# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$maxLifetime = $pwdLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtPwdLifetime.Text = $matches[1] # just the number of days
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtPwdLifetime.Text = $maxLifetime # keep as ISO 8601 if not just days
			}
			else
			{
				$txtPwdLifetime.Text = "" # fallback for invalid/unsupported formats
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtPwdLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtPwdLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $pwdLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpPwdDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpPwdDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					# fallback to today if parsing fails
					$dtpPwdDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpPwdDate.Value = [datetime]::Now
		}
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	
	<# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$txtSymmetricKeyLifetime.Text = ($symKeyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpSymmetricKeyDate.Value = [datetime]::Parse($symKeyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Symmetric Key Lifetime
	
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$maxLifetime = $symKeyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtSymmetricKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtSymmetricKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtSymmetricKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtSymmetricKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtSymmetricKeyLifetime.Text = ""
		}
		$dateValue = $symKeyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpSymmetricKeyDate.Value = $dateValue
			}
			else
			{
				try { $dtpSymmetricKeyDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpSymmetricKeyDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpSymmetricKeyDate.Value = [datetime]::Now
		}
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	
	
	<# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$txtCustomPasswordLifetime.Text = ($item.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpCustomPasswordDate.Value = [datetime]::Parse($item.restrictForAppsCreatedAfterDateTime)
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	#>
	
	# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$maxLifetime = $item.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				#$txtCustomPasswordLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				#$txtCustomPasswordLifetime.Text = $maxLifetime
			}
			else
			{
				#$txtCustomPasswordLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			#$txtCustomPasswordLifetime.Text = $maxLifetime.Days
		}
		else
		{
			#$txtCustomPasswordLifetime.Text = ""
		}
		$dateValue = $item.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpCustomPasswordDate.Value = $dateValue
			}
			else
			{
				try { $dtpCustomPasswordDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpCustomPasswordDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpCustomPasswordDate.Value = [datetime]::Now
		}
		$chkCustomPasswordLifetimeEnabledAddToPolicy.Checked = $true
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
		$chkCustomPasswordLifetimeEnabledAddToPolicy.Checked = $false
	}
	
	<# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$txtKeyLifetime.Text = ($keyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpKeyDate.Value = [datetime]::Parse($keyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$maxLifetime = $keyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtKeyLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $keyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpKeyDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpKeyDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					$dtpKeyDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpKeyDate.Value = [datetime]::Now
		}
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
}

function Convert-TimeSpanToIsoDuration
{
	param ([string]$input)
	if ($input -match '^(\d+)\.(\d{2}):(\d{2}):(\d{2})$')
	{
		# e.g. 1.00:00:00 => P1D
		return "P$($matches[1])D"
	}
	return $input
}

<#
function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}
#>

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkPwdLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
				
		# customPasswordLifetime
		<#$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		#>
		#if ($customPwdLifetime)
		if ($chkCustomPasswordLifetimeEnabledAddToPolicy.Checked)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $null
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		
		if ($symmetricKeyLifetime)
		#if ($chkSymmetricKeyLifetimeEnabledAddToPolicy.Checked)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
				
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			# Log 
			
			Write-Log -Level INFO -Message "Calling Graph to update policy..."
			
			# Do task
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			# Optionally refresh the UI
			Load-CurrentDefaultApplicationPolicy
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		$defaultPolicy = Load-CurrentDefaultApplicationPolicy
		Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:GitHubRepoURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website $global:GitHubRepoURL"
	
}

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>