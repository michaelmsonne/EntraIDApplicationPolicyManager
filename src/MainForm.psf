<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGZtSURBVHhe7f1Xb1v74y74zd0E8zJOcq4GOIMg
g0yQg3OQ2wCDIFcJMjn1f35l9+bt3m25SbJl9d57712iem9U72LvvYkURekZfBctW6blbe9tyZbF
5wM8EMW6SC6u9XBxlf/uvyMiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiK6MK7963/9f6p//CS2Pjklq/5lYhrD
MAzDMF9h0jJy63/65Zf6/+H/8N/XR87s3/F//Ff/qru0uhmLSgcWVQ4sKGwMwzAMw3yFWVKL+bgF
V67dROT8/h3im7+4wYB8B32zW+if3WYYhmEY5n2Z+5P5jLcR8/HRFR1GZ9c+XADS0rPq13RuDMgV
GJoPZ3BBgf4lDfoWtRhcVL4+n2EYhmGiOcMLyvCMdmbrg5HNbGFQ3GZRiYE5cZtN9EtftN8fcZ2B
uR0ML6owKFdI9xF5vydFDJMYNjGMI8tajM9vfrgAJKek16/pPBheUGFE3HhZjaE5Jeb7xrDSL8PY
8CYGVzQYWVRiRFxnkflwlCecd1KOXW/hPacZhmGYc5GxZQ06RpZR2zGJ+u7pj0pDzwx6J9fRNjCD
juE5tA/NoXNkHrLJFfROrkh/e8aX0DE09zptg+Hb1HfPvHU/Lf0LaO6TSxGnxXnSZd3T0jB1jq5I
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
3VpaWsL09PSrnwC8X64AbGxsQ6vVQ683MsznjcEIk8ny7vl6IzQaLTY3d94ad/+oAIQ/QN7XWxIw
DMOcl4gScPRzp8slVvzzSjN6cZmYbokvO1+kALhcbhiNZpjNVob57DGZLe+cJyLGSbfb89a4+0cF
YG19EzabDWaLlWEY5nzFbIHd7oDVGp5GWV5FnBbTrbWNrS9TAIi+Fu8rAAcHh9DqDNBo9NJfhmGY
cxftydMnjVYv5eDgQJqenXkBODw8jDyb6NwTM/3jBUB8UIiILhIxjTuzAiB+cxC/Qxxth8gwX0uO
fkcTgsEg7Hb7O9dhGIb5miNWGBRfcI6cagEQi//FdoeiYTDM15bjS6/Eh4TjMsMwFyVH07Pj07lT
LQBERET0dWABICIiikIsAERERFHoLxcABwsAERHRV+svFYAVrRtbBq90Y4ZhGIZhvr6s6zzYNH1k
AUhLz6q3BYEtcwAbpoDUHBiGYRiG+foiZv5KxyGWd0wfLgCPn8R2KQ0OqS0wDMMwDPN1Z3nHiIm5
lQ8XACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiKic+p/B9F3Q9/X4kbUAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecrets.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecrets.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecrets.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | State: $($policy.IsEnabled) | " +
			"Secret Lifetime: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate Lifetime: $keyLifetimeDays days ($keyState) | " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listViewPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			$row = New-Object System.Windows.Forms.ListViewItem($policy.displayName)
			$row.SubItems.Add($policy.isEnabled)
			$row.SubItems.Add($policy.description)
			$row.SubItems.Add($policy.Id)
			$listViewPolicies.Items.Add($row)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

function Show-PolicyManagementForm
{
	# Create a new form for policy management
	$formPolicyManagement = New-Object System.Windows.Forms.Form
	$formPolicyManagement.Text = "Policy Management"
	$formPolicyManagement.Size = New-Object System.Drawing.Size(500, 400)
	$formPolicyManagement.StartPosition = "CenterScreen"
	
	# Create a GroupBox to contain the policy management controls
	$groupboxPolicyManagement = New-Object System.Windows.Forms.GroupBox
	$groupboxPolicyManagement.Text = "Manage Application Policies"
	$groupboxPolicyManagement.Location = New-Object System.Drawing.Point(10, 10)
	$groupboxPolicyManagement.Size = New-Object System.Drawing.Size(460, 340)
	$formPolicyManagement.Controls.Add($groupboxPolicyManagement)
	
	# ListBox to display existing policies
	$listboxPolicies = New-Object System.Windows.Forms.ListBox
	$listboxPolicies.Location = New-Object System.Drawing.Point(10, 20)
	$listboxPolicies.Size = New-Object System.Drawing.Size(440, 120)
	$groupboxPolicyManagement.Controls.Add($listboxPolicies)
	
	# Button to refresh policy list
	$buttonRefreshPolicies = New-Object System.Windows.Forms.Button
	$buttonRefreshPolicies.Location = New-Object System.Drawing.Point(10, 150)
	$buttonRefreshPolicies.Size = New-Object System.Drawing.Size(130, 30)
	$buttonRefreshPolicies.Text = "Refresh Policies"
	$buttonRefreshPolicies.Add_Click({
			try
			{
				$policies = Get-PolicyList
				$listboxPolicies.Items.Clear()
				foreach ($policy in $policies)
				{
					# Format each item as: DisplayName (PolicyId)
					$listboxPolicies.Items.Add("$($policy.displayName) ($($policy.Id))")
				}
			}
			catch
			{
				Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonRefreshPolicies)
	
	# Button to launch the policy creation pop-up
	$buttonCreatePolicy = New-Object System.Windows.Forms.Button
	$buttonCreatePolicy.Location = New-Object System.Drawing.Point(150, 150)
	$buttonCreatePolicy.Size = New-Object System.Drawing.Size(130, 30)
	$buttonCreatePolicy.Text = "Create New Policy"
	$buttonCreatePolicy.Add_Click({
			# Use input boxes for new policy details
			$displayName = Show-InputBox -message "Enter Policy Display Name:" -title "New Policy"
			if ([string]::IsNullOrEmpty($displayName))
			{
				Show-MsgBox -Prompt "Display Name is required." -Title "Policy Creation" -Icon Exclamation -BoxType OKOnly
				return
			}
			$description = Show-InputBox -message "Enter Policy Description:" -title "New Policy" -default ""
			$passwordMaxLifetime = Show-InputBox -message "Enter Password Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			$keyMaxLifetime = Show-InputBox -message "Enter Key Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			
			# Create the new policy via Set-AppManagementPolicy
			Set-AppManagementPolicy -DisplayName $displayName -Description $description -PasswordMaxLifetime $passwordMaxLifetime -KeyMaxLifetime $keyMaxLifetime
			Show-MsgBox -Prompt "Policy '$displayName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
			
			# Refresh the policies list
			$buttonRefreshPolicies.PerformClick()
		})
	$groupboxPolicyManagement.Controls.Add($buttonCreatePolicy)
	
	# Button to assign the selected policy to an application/managed identity
	$buttonAssignPolicyToSelect = New-Object System.Windows.Forms.Button
	$buttonAssignPolicyToSelect.Location = New-Object System.Drawing.Point(290, 150)
	$buttonAssignPolicyToSelect.Size = New-Object System.Drawing.Size(130, 30)
	$buttonAssignPolicyToSelect.Text = "Assign Policy"
	$buttonAssignPolicyToSelect.Add_Click({
			if ($listboxPolicies.SelectedItem -eq $null)
			{
				Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
				return
			}
			# Expecting the format: "DisplayName (PolicyId)"
			$selected = $listboxPolicies.SelectedItem.ToString()
			if ($selected -match "\((?<id>.+)\)$")
			{
				$policyId = $matches['id'].Trim()
				# Prompt for the target Application/Managed Identity ID (from the main form textbox e.g. $textboxSelectedIdentityID)
				$objectId = Show-InputBox -message "Enter Application/Managed Identity ID to assign the policy:" -title "Assign Policy"
				if ([string]::IsNullOrEmpty($objectId))
				{
					Show-MsgBox -Prompt "Application/Managed Identity ID is required." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
					return
				}
				Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
				Show-MsgBox -Prompt "Policy assigned successfully." -Title "Assign Policy" -Icon Information -BoxType OKOnly
			}
			else
			{
				Show-MsgBox -Prompt "Failed to extract policy ID from the selected item." -Title "Assign Policy" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonAssignPolicyToSelect)
	
	# Refresh policies on form show
	$formPolicyManagement.Add_Shown({ $buttonRefreshPolicies.PerformClick() })
	
	# Show form modally
	$formPolicyManagement.ShowDialog()
}

$buttonCreatePolicy_Click={
	
	# Retrieve values from textboxes
	$dispName = $textboxPolicyDisplayName.Text.Trim()
	$desc = $textboxPolicyDescription.Text.Trim()
	$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
	$keyMax = $textboxKeyMaxLifetime.Text.Trim()
	
	# Get the overall policy enabled state from the existing checkbox
	$globalEnabled = $checkboxPolicyEnabled.Checked
	
	# Get state for individual restrictions from the new checkboxes
	$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	
	if ([string]::IsNullOrEmpty($dispName))
	{
		Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Call your function and pass the additional state parameters.
	# (Update your policy creation function to accept -PasswordState and -KeyState parameters.)
	New-AppManagementPolicy -DisplayName $dispName `
							-Description $desc `
							-PasswordMaxLifetime $pwdMax `
							-KeyMaxLifetime $keyMax `
							-PasswordState $pwdState `
							-KeyState $keyState `
							-Enabled $globalEnabled
	
	Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to delete policy ID: '$policyId'?" -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>