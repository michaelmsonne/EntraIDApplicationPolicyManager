<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAEiMSURBVHhe7d3Zb5t5oub3uUuQP2OSuQowQZAg
CXIwg9zmIshdgCBnMDPnTJ/Tp7uru1zVVbaryuV9X2VbkiVblmXtkrXvG7Xv+75LlChSGylKovbt
CX6vLFumXS53lZey3u8H+MKyFoq0KfIRRVL/6l8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAR8aJf/Nv/ruMS5evZdy7H5lxJySMiIiIPsPCHkRl/PnLLzP+m//6v8oI
vrJ/zX/7r/91SXxqjrqdfnVP+NU17iMiIqLPsJ5Jcz0+r29PfK/g6/vXmO/8zQdUdoypvG1EFW2j
RERE9FO1/419xI8x1+N1fW7VtQ38/AAIC4/MGHAvq7JjXNWd+1V1jauix6Xy7ilVdTtfvJ6IiMjO
1XQ5969oW0d+NkfriKrMx3Q7VdluPmZYFdY32j+deZ/K9jHVdE+oqmPcOozgw31T5jiZ42aOY23v
lBo6h39+ANy7H54x4A6opmtCteaDeydV3e5UZ3m9+iocqq8ZVlWfS7XdTtWa9+mmn8/5hte9qUPv
1/UTLxMR0W+i+l6XCmt7lVbYpIySlncqs7RVZU2Dyq9sVWFNuwqq21VU2ylHU5/KmvqsP0sbelRY
3f6i/Kr9j8koaX3lcHIrupRT3mFlXjavs95W0mIdp6K6Pus4NvR7VN8x+G4DYNCzotruSdX2uVTf
NqaprDat9Axq1dmrxfxOdZV2qWbQrbqeSdWZWwQ6RlVrXn5eQ59b9b0v//5KvS7Vdu0vp4a+qeev
d1lH0vTa+79owlozwa+vN8umb8o6THOcg9/+ooPD/9nP8+t6edr3T6cZUq98PnP6n1/Rm/cJ/njT
wfub0xb8NiIi+m3U2O9WRkmbHM2DquoYU1X72P6fwZnXt49Z12O55R3KcrSqpn1YjQPTahrwWLcG
pObXKL2oXs/ya5XjaLUO21yfNA1Mq7p9SJllLcqt6LSuP8xhOlqG9KygVs8K6p9XK0fz0IvPWdY4
oMyydutwzOdp6Bx6lwHwIGN4Zk315kp1aFqj+R1ad07Ir0X59qTl3V0tFLWrqW1cjUNTKiitUn5l
m+r7PGoanFbzoFsVTb2q7XGradBjXTmbE2CqbR9SSU2b8kqrlFVcpZKGQTUNzqipb0K5RRWqaHeq
2fx9wPM883Gzqu8cVGFFi3WiGgdn1Ni3f6XfNDCjhp4xVTQPqLp9RHU95nUeNb742P0/mwenlFvo
UEnzmFr6x5WRW6LKrik1D+4fr4PPt/8PdfhjXz2clwW9zToczyunvbF3VDmFDmWX1Kq6y2V9ruah
GTlqW1VSZ95n0vq4/dOxf5zN28vrmpRV0qjWMa+KSsuVV9Wl5qHZF59r//jtH9dXX3foeA1OPz/z
7P87ERHR+89crueUd6qixdxMP25dyVd3TcjRMqqylhGr6s79m+6r2sdV1z2pgqpu5VV2qK5rzLrc
bh/zKiHTocTEVKU+y1R2dr4eRifK0TKsZuv6a1p1naPKrexQYXXP/s36XRPKKG1RfGKmCosrreKT
sqzXmW86zY8MHE2D1q0C+9c9s2rqGnm3ATA+v6HmoWk1D3g0XVGg1dE07bb/P9rs/1FrU4+13FSo
/rpKtYzPK7/IodLGIdW0diu3qEoldW3KzCm0btoorGhWdVufcoorVdvjUWP3kIoq6lVY1a6mfqfy
y+rVPLqghs5BFZTVqLxlSDUt3cotrpajqVdlNc3KczSorKFdheWNqmgZVGVztwqr2lTfPab8smoV
ltcoLbdM5c39qmrpU6GjRqWNPSqvb1NOUaUcLSPqHJ9RXkGRciu7VNferdSsYlW3DyuvpErlzb0q
LKu2RkxD77hyiytU0TKkstom63NXtvYrr6hCxXUd1nHPd5jqVNrYp6qmdmUX16isvl15xdXWac/I
zreGRuvAqAocjSqsbFRpfbeKK+pUUt+lkupmFVV3qLptSKU1zSqpaVWl+VlNW59qe92qaWpRalaZ
6nudys7NV1Ftrxy1DSqs6ZSjtkU5xdWq6nSqvLZBBeZwWnqUV1KtssZelVU3KK+8SSXVTSqp71Pr
yKxahqaJiOgD1D46p7zKblW1jammy9y67FFKTpXSs0uVlV+hjFyHkjLLVdc9pZqu/VuIC2t6VVjT
pYYep1qG59Tp9OtZXpUyM3N04doDRT1JVnpGvsqah9U2PKfW4TnVd4+roLpLRbV91vCwblnucyss
Ol0DA4NWodFp1uv2fzQ/qcrWEeVX91jHsWPMq+ae0XcbABML22obnVOra0GDMQ5N17Voxtkmz0iX
pqcGNBFVrI7mEXVMzqmgpEIVHeMqr21USW2HSirrVFDRrIqmDhVVtqm6pUvPMvPkaJtQa/+Yiisb
VFjVqvruYRVVtatz0q/SimprJOSUVquwol6ltZ0qrqpVnqNR5Q2d1hW9NRzK65RTWquGwVnVt3Ur
PadAuaXVKq3vUnl9q7ILK+Ro7JOjvlE5JbVy1LeroKJVnRPzKqlssA4jr6JeJVXmSrJVGblFyi2t
UnFthzU2iqpalZlXZB2X0oZuawTkFJUrPc+hsrom63SVVjeptL5TxRW1yswrVm5FszU6yuo7rdOe
56hXXd+sOobGlZVTpLKWYVU3tam4tkvlDc3Kr2hQgaNO+cVVKqrtUsfYrEqr6lVQ2aq2cb9qmjus
sWMdr5pmFVc2q6CsXFnFFcovN/8eHSp0NKiovFKZhQ4VVLaooqFD+SUVysgpUpE1RipV3T2lzrF5
6z+fiIjef11Onwqqe1TdMa7anik1DswoMiZd5WUO1dXWqaaqWpHRKdbbantc1q215kq8uL5HTb2T
ahvxqntyScnZlUqIT1FKaoaysnL16HGiqjom1D7itWrsnVBRXY+K6/r3v6MfnFFBTbfuh0UrNv6Z
lXm5oKbHepsZGtXt49b9E7omfOqe9Kuld/zdBoBrcVcd4151TPnV3TImZ2iRphoG5e4ekiuxXv0Z
TepwL6t7wqvK+laVNnSppm1ADb0Tqusctr5LL2/qVoP5WXdbrworm6x/mI5ht+o6huSobVZxTZua
h+bU7ZxVVUuPWodn1dA1oMKyKuUU16que1RFZZXWFaP5bt/6DrlzRHUd/Sqt61RNW7+KKhtV0zGk
isZOVbUOqL5rRKVVjarqGLGOR2PvuGraR9Q16VNt+6Aaus29IkfU2D2iyqZuFVc1q6qtX/U9zpev
q2y0Pk91c4ey8h2qah+So65N1e0D1k025jAaep3W6aht61NZQ7d12s1/UL057U2dqu50qmvMo+q2
YfVMrahzxGUdr4rWIWv4VLX0W6epvK5Ztd0u1TS1qrihX32eZTV1D1trr6Z9UI19TlU396q0psm6
pcKclibzupb9W0fMrR71XUPWrTBFNR3WrTDlLf2qbu23lqU5c3aOe4mI6ANkHjJvvqNv7HWrZXhe
baNelbcMKzmvRqn5dUrONbdID1ivbxmaU8e4T2UNgypp6FX70LR6XAH1uJbVPDirbEer8is7rJ//
l9T3q2fSXMcuqdcVUNuQR8X1vXI0DalrYkHto17rxwM5jhblV3dbmY+zfqQw6rVq7J2yxkavy6/e
qWW19TnfbQB4ArIWQ8/EgrpnAurpntb4swJNJSepr2xQ3dMB64T3TOwfcO+kX70uc0QX9/+cMi+/
rO/5+/RMBr990XqyIevvk4samA6ovq1XjYPzGnT7VNXYo86JZfUdPjzr5f3DsQ43+G2vfO7997OO
54vj8vLPlx9/cHimgPpcC6pt7lBRVZs6J/c//4vjfuhwrY8/OM2HDuPFaTUfN7Hw4uVXjqd5X3dA
3WMeldd3qn3cf+jf8eVhvziOh/7NrH/zqSX1uwNq6xtVkaPOug/GwPSK9f9ifd7n/z/Wn0RE9N7r
dy+rrHHIulKv6XCqum1cdV2TaurzqLHXY/1Z3+2yXm++I6/tcKqwulc1neNq6nWqY2TWGgKdo7Pq
nVx4nl89Tp/ah6etOkZm1NgzruqOMetjazsmrMOraXdan6O+Z8r6HOZl8zrrbR1OldYNqLx5ROZh
/QPTq+oYmHi3ATCzIvWZK85JcwW9qG53QF2za+qaMa3uv+4D1TP58vOal4Pf/rEyPzMxN8180ONg
TqfTr65felonF61neuoc91sr8rW3ExHRB8tcbneOL1g311e1O1XVbv786SrbnGrsN9/5L1l32G7o
c1l3an9b5n3Md/vmG8CGPo91GMGH+3rm0XmT1v0LzHX50My6Ogcn32UAhFsDwBxBz8K6Fle3DrUd
9Pf339LqtpYOXl778J/vpzKf+2N9/l/zeT7m8SQiolczl78rm7vvXGBjx/q45fUdLa/vvmP7H2M+
Nvjw3pY5biMzKxqa2VDnoOvdB4D57tdc4QMAgM+Tc25Vg79kACysbAUfFgAA+A3Y29tTRbdHl1I7
dD2tU60j3uB30fj7HQA7mp6e1Y718q5mZ2b0pvcCAAAfzoOCfv0vX2Xqf/hzmtW/O56jjPrxV97n
PQ+AZR3/T/9FlcMBbU436+//3z9qYU/y+xatty7MzcgXWJP2drWzs6PtLX6MAADA+9Q26tPfHc/R
//rXTP37EzlW//OxDP2fZwo1MRd48X7vdwDsLir8ux8Um1GmmrIUXb4QpuyEp/rT77/U49hY3Tx7
Xvej45WVkqvOtk7lJeVqM/gwAADAL/a0fET/9ou0F1f+pn93PFv/05cZKu1wv3i/9zsANmeV9CBO
8VFhuvskTkXJz3Tl+9O6eOeh0mKjVVxSp7JnKXoQ8kDREQ9041qUuA0AAID3J7NhQv/jX9Ktm/0P
BsDffZul/+2vWWoYmHvxfu93AOyuyzkyKd/8vGa9Xs1MujU3PanCgiJ19g5obs6r6Um3Zt3jSk9P
UWPHcPAhAACAX8G3vKG/v1Guf/unZ/q7b7P1v3+Tpf/+j6n68mG91rf276VnvN8BAAAAPrl+l1+/
D6vRvz+Rq//juzydiGnSjH/tlfdhAAAAcARtbO9qYGpRw55l7e0Fv5UBAACALTEAAACwofc+AFZW
VuT1euXz+Wyd+TdYX18P/ucBjrSNjY0j9fVvTksg8PJx08BR8l4HwMEX//b2ttXW1pYtM6d9c3NT
c3Nz1hMe4cPwehfknHDJNeWhT9DE5JTm530v/j92d3c1Pz9vXQ4cha//g8sxxjyOqvc6AMx3/8vL
y9bL5sLgTR22t/f623+q5x+h3ed3ZHjl7W+4c0Pwx7+xQ/eK2NvdVfDBvPb+h45/8OuDMxYWFqwL
EnwYw8Pj8i8uamVllT5BS8vLGh4ee/H/Ycau+a7ZCP56ONzBl535mgt+24Hg17/s1a/S19/+agef
6/BhHxb8/sEZ5hYAbgXAUfReB8Dq6qqWlpasl4O/kA6+GFfn3UqKjlZBdUvwh7/d3q62t83h7Ghz
8/DTB+1pb92rnLwSrawGVJSXL5dv9dDb366lulrjs2a07Glva12VuamKS87Q7Mqbn6LIOTyswPOT
Hnz6gi843jQAuhpq5Zzxa3JsRCvPbxzY29l5bXz8rba3gw5hM6CRsZfP+PQu9jYWlZsao0cPo9Qy
NB385jfa2TGfd09b2+/vlo5t6zB/ntPpevFvjU/D/B8ceKcBsLennfUl9faNaPsNd0v2uZ0ady8E
v/qFvd1NVeYnKzLioUqa+oLf/Ebm8sL8YpRZt0uDvd1Kin6i9DyHVp+//rXjGPR1bL6pMd/cAEfN
RxwA5ot9S7lJCSpv6NFQ37D6O2tU2dom52ifCgocGhoZl6OwQF3D05qb7FFN54CWF6ZVWlCoh3dv
KbWsWyvuDl0PeSrPRI+KKiplbpjbC0zqyy+Oq66xUv/yD79TXk2fhrsbVVpWo46OLjU31au0okRT
3jk1VtbINTWrjhaHKqqL9P0f/qSvzt6Ud2NHgw1lys4tU319o1q6ulVX16SW+lq1dg6pp7VJZfUN
ykiJU9jDFA27/G+98DDeNADibl/UjYdpKiooU0tbkxx11Xr04J5KW53WFWlvY7kq6ro1O9mrsro6
TbmdKskvUd/QhBory9TQMaZl34Qqm9oUWFlSdWmRkh4/UGRCkWYme1XXPaSVxSnFR9zQo/SaVz73
z9rd1kB9sSLup2pxaVb1DTUacblVW1aslp5JLU2Pqqa2VWOjIyotdljP7vj4WZV21l26fjNSbveQ
isvLtGRtgT111JaqpqlP085OlTc2yuUaVXFBqQaGJ1TnKNk/zLlRVbV2aSWwoMriQsVFhioqtUTe
Wa/WNt9+5W6ufMxNtPg0zPn8bx0A1qWAf0JP47KsXxo2NVCvkoY2rQU8KnMUq7i0QIWlTRobG5Zn
dkHLfq86W5qVW1ikmdUNM9M1PdKi+1eiNL3oVXtjlXrGJtRaU66K+h4FfNOqrqjTyKhTFaWlKkhP
1s3QBJlzUmdtuaIePlF6bqXqizJUWNH51uN68HXMAMBR9fEGgPWNYkCJT5OtK22tTysp9pESU6L0
zXdXlZaSou+++l4xccl6cv+uvv7jP+vY8VO6cu2umusaFX7psvKanFqb6VV4+GNlZiYpOu6xyton
pK15Rd29pxvXLuv2zXu6eOGaHsckq7W6XtfPXdOt2/eUkpGsiMgIXfjhB126eEeZuam6deO8zl24
qVthMVrfk6rystQ/uaCGklT99avvlJicrfh71/WP//QnXb2dqJz8VH178qLiY2IVl1hkXZi96WbM
gwuONw2AisJ8PUt9phtXburBwyhlZcfp9198rz7PuvzODsU+SVRrTZ0eP3qozNxEff3tOaUkp+ny
9z8q/FG8kp881vE/f6Fj357QufPXVVXVoLSICD2KSdKVE3+y/s1u3gtXamq84vIaXvnc72Jxol/l
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
TplHC5g/AcAu3usAMDf/r6+vWzenEn1ucesVADt5rwMAAAB8HhgAAADYEAMAAAAb+sUDwM8AAADg
s/WLBkDf1LJGplesDyYiIqLPr0F3QMOz7zgAwsIjM3xb0sjchoZmN6zlQERERJ9f5srf6d9T79js
zw+AS5evFTun/dZaICIios+73rEZNbb3/fwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAH6j/n9r+txT83apJwAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfManagedIdentity.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfManagedIdentity.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfManagedIdentity_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecrets.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecrets.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecrets.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>