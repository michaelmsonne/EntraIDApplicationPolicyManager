<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAJjjSURBVHhe7P1ncxtbu6YJ1seJ/h0d0fNpZmJ6
PvRMRE9M/4SJ6Iiqnqo6p06dc953v25bact7ylH03nvvvffee29BEI4kCDqAoAF5TawEQZEgJXFr
S1vuuRS3ACbSrMxcudady/6H/yAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIwn/4D//h5v/5f/qfCp+/eFUYGhZVGBQcIRKJRCKR6AtU
RFR84U8//VL4P/wP/6dC78z+Av/j//g/1mYWVDK6tMGoboORxXWRSCQSiURfoMZUXr5o5fbdh3jn
9xd4/sK/cEy/SfPQAk0DczQNzotEIpFIJLpMA+7P5ivqwva/Ud77e5M86zcOzNE+bqBzcPrdBiAi
MqZwyrhNy9AircNutYzqaBpbpnHMoH33LBeJRCKR6FtW24hOyy/re2do6Jt9q9Q6jf1ztI2qbRZo
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</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	Load-DefaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			[System.Windows.Forms.MessageBox]::Show("Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D).", "Input Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# customPasswordLifetime
		$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			[System.Windows.Forms.MessageBox]::Show("Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D).", "Input Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		if ($customPwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordLifetime"
				maxLifetime						    = $customPwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			[System.Windows.Forms.MessageBox]::Show("Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D).", "Input Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		if ($symmetricKeyLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			[System.Windows.Forms.MessageBox]::Show("Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D).", "Input Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			[System.Windows.Forms.MessageBox]::Show("Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D).", "Input Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			[System.Windows.Forms.MessageBox]::Show("Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D).", "Input Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			[System.Windows.Forms.MessageBox]::Show("Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D).", "Input Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop
			[System.Windows.Forms.MessageBox]::Show("Policy updated successfully.", "Policy Update",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Error updating policy: $($_.Exception.Message)", "Policy Update Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-DefaultPolicy
	}
	catch
	{
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		Load-DefaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>