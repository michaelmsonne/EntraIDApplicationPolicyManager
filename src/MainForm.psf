<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAJcWSURBVHhe7P1ncxxLu6aLzUfF+R0TcfRJUujo
w5EijkLnJyhiImZGc2bvmdl7v+963bL03hMECe+999577733QKO70Q6u4bobHpciq9Eg0ABJkItc
dM/FuNmFsllVWZl3ZaX5d/9OEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEIR/9+/+3Y3/8//8Pxc893lZEBIaWRAYFC4SiUQikegrVHhk
XMEvv/xW8D/9T/+nAu/M/hz//t//+5qM/ApGDGuM6NcYnl8ViUQikUj0FWpU5eXzK9y68wDv/P4c
z338CkaN6zQN6mjsn6VxYE4kEolEItFF6nf/Nl1S57Z/T3nv703yrN/QP0vbmImOgal3G4DwiOiC
SfMmzYPztAy51Tyip3F0gYZRkzbtmS8SiUQi0fes1mG9ll/W9UxT3zvzVql1GvpmaR1R2+io71V/
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
AKAC/R8NXxefdmBeMAAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	Load-DefaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

$btnUpdate_Click={
	
	try
	{
		# Build the hash table for applicationRestrictions.
		$params = @{
			isEnabled			    = $chkEnabled.Checked
			applicationRestrictions = @{
				passwordCredentials = @(
					# Note: Here we add a "passwordLifetime" restriction using textbox and date picker.
					@{
						restrictionType					    = "passwordLifetime"
						maxLifetime						    = $txtPwdLifetime.Text
						restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
					},
					# Including a default "passwordAddition" example with a fixed date.
					@{
						restrictionType					    = "passwordAddition"
						maxLifetime						    = $null
						restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse("2021-01-01T10:37:00Z")
					}
				)
				symmetricKeyAddition = @(
					@{
						restrictionType					    = "symmetricKeyAddition"
						maxLifetime						    = $txtSymmetricKeyLifetime.Text
						restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
					}
				)
				customPasswordAddition = @(
					@{
						restrictionType					    = "customPasswordAddition"
						maxLifetime						    = $txtCustomPasswordLifetime.Text
						restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
					}
				)
				keyCredentials	    = @(
					@{
						restrictionType					    = "asymmetricKeyLifetime"
						maxLifetime						    = $txtKeyLifetime.Text
						restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
					}
				)
			}
		}
		
		try
		{
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop
			[System.Windows.Forms.MessageBox]::Show("Policy updated successfully.", "Policy Update", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Error updating policy: $($_.Exception.Message)", "Policy Update Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
		}
	}
	catch
	{
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>