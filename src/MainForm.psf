<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAJm5SURBVHhe7P1ncyNLu6aLzUfF+R0TcfRJUujo
w5EijkLnJyg0ipnRntlm9t7vu16zfHvvDZvee++999577y0AwpEAQQfQk5ciCwSbBNndXL26V7vn
6rgbxbJZVVmZd2Wl+Q//QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRCE//Af/sON/+P//D8XPH/xqiAkNLIgMChcJBKJRCLRF6jwyLiC
n3/+teB/+p/+DwXemf05/uN//I81GfkVjOhXGdGtMrywIhKJRCKR6AvUqMrLF+zcuvMA7/z+HM9f
+BWMGtZoGpynsX+WxoE5kUgkEolEF6nf/dt0SZ3b/jfKe39vkmf9hv5Z2saMdAxMvdsAhEdEF0ya
NmgeXKBlyK3mER2No4s0jBq1ac98kUgkEom+ZbUO67T8sq5nmvrembdKrdPQN0vriNpmnvpe9ffM
26XW6Z/VjqOOd7njqG1fb9M2tkjn0My7DUBIaETBpGmT1mE9bWrj8UXauucZq29msqGeztYZmicW
tWVtI3raRg20jxrc05fUb13/i9TvPsffu71IJBKJPrZUJltQ00ehUu3bVVTbR15VN5Xt41S1DVHV
OkBV6yBVbYPUd4/T0DNxour2YSq1ZUNUNPdR2zVOcf0ghTW9J/sqaxrWVNo4RFnzCMV1AyfHyq/q
oaJ1lA6V+U+Y6RycvpwBmDI73RnQuJGurhmWSodwzulwLc6xVjHEYMMorZMmbcetg7M09c/QPrqo
/e0+mIkOZQzGFjWpeSrTd0tPc/80LcN6OseN7nlj7mXaeqfW9+xPTbcqFzOiP1lH06j7xNpHdNpN
OL3+yXpq/5rpOBuOk2nvbS6c9zpcr/fhmT7+9Zz38fKWgRlajsPk3tZ97q1D89q1Pbuv1ybq9Xy3
UXpzmC6e571PkUgkEn0cqfRWfQJQmbHKZ9RbvZJ3KcHp+fXdU+RX91LfNUbPtJUulTmPG8mtaCOn
tJnc8laySpq0dbsnzVoe1zGip6ypn6K6Ae3lW+1LfaLPq2gls6SZrNJWsoobqO4YPzleQ880hbX9
dE2Y6Jq00HW5EoDIgtmlLTrHTbRPmTFU9LFlnWftYBHH4T4buy7sVT10DevpGl+gtLKBmo5xuiYs
2jZdYwvUtg/TMWGha9yoXSB1gupEG7tGqGrqoqSqiZK6dpqH9PRML9HcPUBRdRtdU0t0T5i0i9Gt
Aqx+p8zUtnRT0zlOx5iRrnF3pqetM2WkvmNYMyDKIJxsO6XCoo5ronfaSk1DC8X1/fTPLVFcVkl1
1zQ9k2b3MSaM7m1ObXsyT5tWF8+sLe8ad6+jzkfdGLVMu0Ha9ovUtQ/RPm6mY2iC4op6Sus6aRsz
a+fRM2WkurGL+p6p4+vkjjye/fRMmymrrKWyY4q+SR35RRU0Dhq043quhTIY2q8nbOPqOhwvPw6L
Z7kWbpFIJBJ9NKk0t2VIR2nDIO0jBpoHFmgd0lPfO0tlx4Sm2p4ZrURdLVPrqoy5uH6Apr5JLX9S
qmofJzEpk8KiUnLzikhNzSKvqoOBOZvbIIzpqWpzv+27PznoqO6YJD4ln8amDqprW8jNKyO7ooO2
kUWaBuZp6J3RSgZ6py30zizTPTJ3OQOwYNvRMuzeCSPmhgqc06kc9P5ndkdu4DSm4mgqYqSvn55p
I8UVdTQNLtDQ3kNxVTNVzR3kl9ZS09ZPVfMgjZ29FFW10Tdnp6VnmIr6Nhr6FmjvH6aqfYyhBRsN
7b2UN3TTOjRDVX0b5Y3dNHQOUV7TTHV7PzUtPVS3DNDUPUZ1U6d2EetbOyita6OwtForJmnsHqWm
pZuKpl5t29KqBiqaBxhYWKGhtZ38ilbah6cpKKnUbkBFbSPV7UNUNbRSUttB+8gC5dX11HSMUt/e
S2ltO/VdI5SU11LZ0ktlfRultW2U1bZS2zFKQ1s3hVXNVLf2UlrVRHVrD3lFFTQNGekZmaS8vpPK
pi7qOoepqGultnOQ6uZuatqGtbCq6dq2floGZjVj1DO7RFVtPSUNfbT2j5BXXEtL/zQlVfXufdQ0
Ud7YR8fInHbNVRFRTXMn5fVdNHQNUVhWS1VrL+V1nXROWuibURHLIhKJRKKPJJXOqpIAlTF3jakS
YBNV7ROkZ5dRUd1MRXULmbnlWkbcOa5Kqxdp6pvV/lalxAOzNi2TVwagoLCM6LgM/EISKCwooaC6
i2Gdg96pJXomjdR0jlLePKq94LWO6DVjEJteRltrJ3rdAmFx2VrJuiqVVqXMzQPzlDePMDC3zMC8
nd7R+csZAL1jn/65ZfoWV5lMaMDcPojJpMNoNGKamWMuqpr+ySUG5vRaCUDbmI7qxg4aukaorG+h
um2QuvZe6jvHqW1uJa+0lu65Fdp6R6hsaKOmfYSmzn6ahwwMTM1TXFlPaXUT5Q1tVDX1UN8xQHld
MzUt/dS1d1HR1E1FQwdl1c1aaUP/lIHy6jqKqpuobO6lsXuY8upGqloGaOwZprSmifquUaobO+mZ
X6Gpo1fLcEtqW6ht66OqsZuSihpKalTGPUhj1wCVDV3uedVN1LQPUdemMvYGCsrrqe/spaq5z31O
XSPUNrZTWF5DeUufZgwa1LGa2ilv6KJr2k7v2CSFpXXaJ5TG9m7tfGvbOqhs7qayoZPS6mbqeqcZ
mDZQXtNIXfcUIwY7dc3dmsEpbWinVpmepm4Ky6oorW2mrnNEMyaVJ/NaNGNQ29KlXb+i6lZqWzup
bh1hWL/qvukikUgk+mganFdv6CYto+1Wb+qTFkqbh0lMyaapqVVTWnou+dXddE8t0T5mpLl/Tlu/
bWiWwXk7g3MrNPbNEZuQQX5BCXl5xSQkZlDSMMCwbo2+GRu9k2bqusepaBk7LjW2aG/5weFJJKXm
EJeYTXhkIgU1PfTNLGslw61DOipaxxjWrTBiWKVvfOFyBsC4fsiQzs7Q4iojg3rmI2ow1Xdjbu1G
F9vAaPMEQ+YNRnRLWkbe2DtBx/A8PZOLdI7M09I/TsvANL2TRlp7h2noHmdQ76Bv0kDnyAx1rd00
D8wyYlinb0J9JzcwvLBMW/8wJRUN1PfNaCUExRWNWm3JnnGddrFUMXtT1yCtQ7M0dSkHNUv74BTN
fRN0jxto6xuhoWeS7gm9tq4Ky6DOQffYPD3q79EFeicN2jYNHQO0Dc1oRfE9E8fz2gfoGNXR3j9C
YVkNzUNztPSM0Dqo1tPTPa6je8JA16iOzuEZGnrGaR+a1c67a3SB1r4xOsZNDM2a6BxbZMy0ycCM
gbrWXtrV9mPztA/N0TOhp6G9n+4pEzVNHXRMWBkzrGjh7Rk30DWud5/zwCT1HYO0D7vP3TOvrn2Q
7nE9TZ29FFY00jGmo7Fr+Ph8FhkxOLSbLhKJRKKPpxG9Q8uQq1rHtX5z+rU3ejs1nZOUNA5S2jio
lXT3zy7TP2fXlnWOGjUDoPKMSbOTscUNxoybtAwuUNs1qb0QNvTOMqJfY2xxU1s2okqyeyapbpvQ
jjk4v6KZh0ZV679nWmuFoF6OVeY/pJYtrNA7aaGydYyxxTXGTRsMTOovZwDMmzBqWHV3IGDZZGTa
zlx5PQslFYwOmBmxOrVlqr+AcZOTceOGprHFdcaOpz1/jxs3mTBtauu7/95g4ngb7Rhq3uK69juq
W6ZtYI4J6w79E/N0jpmZsKgL5N5O+zVtnvx6jnP6WOpEtXAch0UdQ7vAp/dxKgyedbV5ZicTxjU6
+se0egxDhnXtBp1ez71fzz5On7f7+Opia9fFuM6o3qGdlzp/dY4qHJ71Jy1b2jk298+6w6mujyd8
p8N0fJ5nw+liTG+npWuQhu5JRk3OM+u5741IJBKJPqbGDGsMLaxQ0TxGQ/fMiVr6F2gZ0J2ooWdW
m9/YM0tlyxhN/Qt0juroVS92E4va78CMhcG5JQZnrZrUC7S2bNJI58gCnWMGqtsmqeua1vZV3z1D
c/+CpqbeuZPj1HfN0Ng9o5mSxt45LZ+atLgYnDJczgBYnGgZmCcjGjNtMLq8w6htlzGLOwP+OHJn
eJpjUcbBO+P9w+QxCN7zP7Q85+s9/3LymJaT+yQSiUSiP1Qqn1Jv3eobvyqaf6vGzfRMWrW0W73J
901b6Z+5hGaXtG1UnYDLHkdVDlfhU/nY9NI2Q9OLlzEAEQVWJ9qGto0dtvcOvkEdXjDvc9SXEk6R
SCT6erWzf8juwdGlpdLuHaX9o0tL2+aC4+wdwP4hHByhTXsfZ2HZyZR1m+Fp4+UNwKhhnfWtPQRB
EARB+DIx2FzvZwDWXGIABEEQBOFzZO/gkJzWef4U2sK/BjeTVDfN9u7BmXX0H9QA7G3Q2dHLPrC/
vkR7Z7/3GoIgCIIgfGRCS8f4v/yQx//yUwH/t58L+D9/n8ejzH4ODo9O1vmwBsBp4E//7//GsG2X
0Zp4/unfH7LhWGJweBLHyjJtTc0sWO2srzhYX1tjxb7uvQdBEARBEH4H06Z1/l+3yvhfrxTy/7xR
oun/cbWI//VKEZ2TSyfrfVADsLdmIPzBM9JzCshKjyM5Kg2/e3f45foDQgOC8XvqR2xMHBnJxfS2
NpOf0+S9C0EQBEEQfgfNY1b+rz8V8L/dKD4xAEqqREB9FvDwQQ3Atn2O4swyslPiyC6voi43n3B/
fyJTsilIyWSgb5jqrFyy0pJ48uARmUWd3rsQBEEQBOF3oEoA/vdzJQDF/N+vFtE5tXyy3gc1AEeH
+7hc2xweHnF4uM/21i572xuMT0xiX91gb3eXne1dXJsrjI5P4tpWtQUEQRAEQfiQhJePa9/9/5ef
3XUA/k9/z+Np1sBHrAMgCIIgCMInZ//giGytFUAr/xrcQmL9NDuqM4BTiAEQBEEQhK+Yo9cv/WcQ
AyAIgiAI3yAf3AAcHR2xu7vL3t7eNynPuQvCt8Lh4eFX8cyrc9jfl3pJwrfDBzUABwcH2O12HA7H
N6vV1VXtGqyvSx8HHwtlMlVCLfrjpTL70+zs7LC8vHzuOfhSZbPZ5NkVvhk+qAHY3NxkY2PDe/Y3
iUpIlCESPiwqA5qenmNhwYBOvyj6A7WgW2RicgbX1vbJ/VhZWdFMwNeEena9jY4gfI18cAPgdDq1
afUAnZNWE+GQ5eUldg4PtTc5z3zPtPeve9q9/9MPpWpqeHS8XL2ZaE0bPCt67U+Ttq6a9uzziP29
Xa2/ZDhCC9neNlarVdvXyXbafl7v7/Rx3ySFShhVuC7kTTUyPiHOdQera6usrH7ebz+qqFanW/Se
LfxBmC1LrK69jiPqrVkVnZ9+Xt+li57xMzr1/B4eHrC6YmPFscLK2sbJs+x+Ns/vz8PJvg72tPRm
a08te8PxvMKmnl0x78KH4xCb3cbnGKP+OAOgHs6jXZpLCgkKjqCpe+LMtmq4Qu33ggfv4MDF6PA4
e4dHzE2MYXZsnVlekRFNTnUvjQVx+MeXoMY72D+1H7fx8OaIpvws4jJKsW3scri9SllGAklJ6Qzr
3F0l7u29zsBVwjDS00bfhEn7+9z5nZLivAE4gqAgGJqGpnYVJ7SIwdg47HiMzQXh9My66ByODmFi
Ara9llVUw8rrt7TLMNxRzv2rd8mp7z0z/4KjsqP6cZhYUHeGkaExdr1XuGC704mzN4dHh1gW55k3
2jk61Ub1IpQB0OuN3rOFPwhlANbWX5fyvdMAaLdzh5rKGizr7jRDmWgPSwvjNHedTQsUKuNXHLFP
c2kyd67ep7Z/6tQaR+5H6Ojw1CNyhGNpkYkZd/zo7+ygKDeHoOBQUjNyWVp/SziPJQZA+KAcblOX
n0dISBSdwyrNPI075s6Mj7N6Jg0/or6qFvv6Oo019dhcZ9NE7SX0zJzTvHnJRfxhBkDhss2RmlHq
nl7RkxYfQHpJESmxscTHp5GWnE5wUAyN9U0E+z0goaCamuJsEiLC+dv3t1je2ict9BVJuaXkpASR
09il7asxL4lXwXFEB73k3ss46qpKSYlLIDsti5ioOJISg8iprSMnMYqElHKaqzKJSo3kztUb/PnP
P9I0toRlsovqpkF0M0Pk5+eRlJhNaXYiL33DSU/OITIpidj4KB7fe0ZhVS8Hb0lIFOcNwAFEhEJC
NuSWQkESpEXDldtgdcHyAkSEQWUjFMZDYS6kp0FUEqTnQGAY1LRCzEtIyofaUoiOh59uQE0d+D6E
0looiYP7vrB6Ubb8Ng6pyqhifdNBdOAjAuNSSI6LIzIuD930OEEvXpKYmk9sRDSBz59w+2UC+wdO
ntx/Qm1zLRGRAXTNL3G4s05xagwZWZW01OYSm5FMfkEe4UFRZKXnExMaSm5hHVX5cTwMjKSluYH0
uHgeXLlCbEEjS4tWdt9S+ioG4NPyfgZgm7ysfGzbB0x3lxEUG0N7byupiSEkZqYRGZFEW3cbnb2j
GPVTxIXHExgSSsv4nPsguw7KsxrYWNPz6sV9IpIyiA8PJymjkrmRTp4/8SElLZeo8Gie3LqFT0yB
tllLdQVxCZnMLbsYb6ykude9v3NhPCUxAMKHZN00SUZ+rTa9MNRGRHAUwQEPCcuqZHagkWePn/PT
L/coq6kl4NVD0svqqCuJ5crDQByuLTKiQvCJjietoJje7h462zuwmNfZXDWTm5NNeUk1+UVFlJdW
kpmdy+j0637+L8MfZgBUOrC7YSYlMZPFxSUa8tPJLSwg1O8JYSlVdNXm8uP1QEZHB7j9l79w9cY9
Xr54RmxyITP9ffj7x7NzeER7bQVxMfEUF2WRkJanFau011US+OwFAUGhPH/0lLv3XzA1MU1WRAyx
sYmUleaRnplKiK8v13+9TlRKOsX5STx+FU16eg4Ti5vY5gcpLK6jv72Gf/z//TvZxTWUxsbw/d+/
59d70TQ31/DTL/fp7ukhI60A9X79pk8BivMGYBuKKqC2BP7lO8jMgfwkeBgG6jNEfQFUtENFAWRk
QVo4vEqB/mb42x13ScH9G/D3X8DPD4LjYWQCYlIhLAiu34Nnz6AgH1IzYOm3lQCAi9KUcnqaK/jp
rz/z/NljIlMr6WmrIfh5GM9u3+W//MvPdA+NEeXzmMisRu0drCQ3j8TkFPLzs8ip6mHNNEJKagEz
A31ERsZQVZXD3395zsjoCPd+vkJV2wClyeF898/f4ePrz8NHPkyOTpMTFUVN9wz7+wdv9bBiAD4t
72sAMpPTmTUYyE5NoKyyiOs371HbUIXv40f85V9/pKiyktzsCuqrCvnh70+oqKoiJbdKO8beupHi
jBqaytL56ZdbPLx/n6zSZhor8wl7Gc7tq1f4x7/cZ3h0hGc3b5JfP6Rt11RZRnR0Mq194zQX59I3
YdHmnwvj6XRKDIDwAdla0ZGSkofZaKU0I5Pk6Bhu/fgz/uFxpITFcfXnn7n6NJKsqBCu3bjHi2fP
yCnMJyU9G8vaGnlJWRSWVRIfH8ujZw/pn7dxsH/A3paNv/3z/yCvoo4f/vRXSmtq+Lf//q/06Ta9
g/BW/jADoKSKJ+YGu4kMi6ezq5fyohRK61uYnjOyOD9OdUMPVquFod4+Kktz6ZvR01VTQEZWIZVl
5RhXtjBM9NDa0kJxXgL1fdPaAzs3Oc6CYQmLYY7auhaG+9pJT0ikrLIFs9VMbXEile2DDNbXUFBa
Q2dTIVnFZQxPzNDb1kD38Dwc7dHXUEZCUgY5BZXMLCzSWVpGSlYWTx49IjI5m/beYcwmM8Mjk+yd
1Cs4L8V5A7API5OwZnO/sTcVQpX6rQPTKjjtkBgLzb1QmwMVtTClA6sBqppVzSQYHoHqIvdnhL5G
SMmG6mro6YWyAlhYhLJ0SM+D3bdloxexx1jvOC7XBg1ludR0dDM1Z8RiMdBUWkdGUhpZpfUs2x2M
9LZQVl7PDkf0tzbS091MamoiM0ubcLBDQ7Eydw0M91STkV9Az+AkNtuyVpylNy8xNz1Nd3M1xQ2d
6OdGSU1Iprqigo7ufowGKQH4nPntBsD9rb69qpD4xBTqagtJyylgQT9FbkYCNa096Od0DPT1UFtR
SWpKPiE+L3gRGMm4+iSk6upsrzHSN4VzY5nS/GzqO3uZ15nQL8xQV1BBSmIa+VVt2O0rdDRWUF3f
rh1XNzNDb0cLUZFRVDZ1afHqXPi8JAZA+LAcMdXTRlxkEqUVzViWbLTXFNA0OEFvVR0p6bkUl5Uz
0NtLRWkBowuLNJemEp9ZyN7hIV2VJYQlZDEx2UtofCyrmy4sxhXstkW6e3qpKKmgZ2CI8mKVfvYy
MWnwDsBb+eAGwOVyadPeD5ZbvzVT8ub89mq/H4K3Bc1qtp478psyf094zhsA4UMgBuDTYrEun6sE
qO7JGw3Aezz39iVVSdg9rbZ/S/WRN3JhunBcafBtUogBED43bMYZphdt3rN/Nx/UAKi3f8/D491+
+MuVOyE4OPCe/2apNyLVNloSkQ+PSqQnp2a1lgB6g1H0B0qnNzI+MY3L9boSrur3QjX9/ZDPvOLo
8MPt77dIPbvSDFD4VvigBkCrhetwsLi4iMlk+qa1vf1bv8ELl0VlNjs7u+yo0SVFf5x2zveUp+7F
0tISRqPx3DPwpUqeXeFb4YMaAEEQBEEQvgzEAAiCIAjCN4gYAEEQBEH4BvmIBuCA6ZEB2tvbWXG+
fd3dnS0219cY6+uif3T2ZP7+1gampZUz67o5YHV1/S21g9+4QBAuyREzo/10DUyedOG5u+Vkw3nx
9+Gj/S10BrNWec1kNLl7qRMEQfiM+WgGYHd9kRD/UJqbm1k0L2lNt7qb62npncRus2M1m1lZczcZ
1I31k5WWSUxMIjnpybT0urv8XBxswS8ig62tTXR6PbtHB5gNOpatcyTGpWGwOrAs6ljZcOFctWNf
NlFaVEz/xALraysYl5Y5PNhBt2BgZ/+QlWUbO3uwMNJBdeswm2vLWBxr2rG2XRuYrRaWV9Y52Nth
yWLVtrEaDdjXt9ndXGXZrjpZOGB+YR7XwRGuDTuufTEbXyOHLisx4RFEhCfSOzKHybzIaG8TKVk1
bDg3WZhfYGVT1YZXQ+HusL86y8+/PmRqopO//3gbs2MF28oGezsurcXCrop/VjPb+6or5WXmjKrH
rn1WVlfZP9zHsmTBsryiWVfnup2tg0PWbBaMZj1F+aUsu6RFiSAIH5YPagBUPwBqKM1Np4vdNQP+
L3wpL68jMSqGyPBorv98i8DQSBLiM8lPCOEvPz3G5jrAPDVAclIa7SNG2FkmJ8vddWJNfgIvXrwg
ODSB+MRkQiMjiYlMIi49Dj//COLjk8hKSaW5qZ+6rCi+++4Hbt73ITOnkPSUGBIzE/ALCCUsJIr0
xDTuXrtB27CFiY5S/ELiKC+IJzQlA4drh/r8VO4+fMbzgAR6uzp5df8Wtx/4ER4cQlpmOd21uXz/
413SszJJSosjIiySW9f+ztPIPLYPjtjc2NCaQ4m+HKm4qn49qGasa2trbGw6OdyyEvT8OXHZJZQU
ZpOYHEVYdCRBwbGkJiVSkp1HQnQiOXkFdKk+vnfthLzyJyoyiJDIDNorsvjl5xtaV9LBAeHU1XeQ
6P+E209DKS1OITIplZBXz7hy8zov/UJ49sIHn8Bo0pMTuHXjJ+4+8SE4OIroID/++vNjTJt7bG9t
nYRZJBKJListX94830vgBzUA6iDujjuO2FnTE+QfRnt7B1GxOczPTfHy0TNi4lKob2olPySUv/7y
gEnHPpbpAVKTUklMzqa6OIfm7hkOnFaSklJorSviX/7pb+SX1fDs4WMysktJTIziwUMfnjzxoaKi
gY6KaiIe+fHLtRv4hsWTEBNDWGQ0Bfmp3HsWy4JujtSoWHzu3SGndgC7cZzkuAQKC1KJT8vG5Nik
uaqUnLxy8guLCH0ajO+9J/zTn3+lb2KBuuJMAh8GcvPGfe77htHSWM3zmzd5+OARiXk1Wqd76pxF
X55UnFW/nvirmrWpvw82jKSkFGgdRLVV5pCVm4mvjzvO+QeE0dHYyUhHHdcfPcC6c8TOygIZCcmk
JcYTn5xBxJNgbly9xi9P4jAa5wh/7k/wIx9+uHKTrOISyvIzuf7DFULCwwgMiSW/oJLSknICHt7j
ydOXBAcHU9Y0RH9TIbcfhGBzuXvbE4lEot8qlS+r9M2bD2oAlNNQB3OzR29rA1VVVfSOzLKzs41u
dpyB/iEcm1ssDA3Q2N7P1iHsujZYtlpor6+ioa3fvbVzDduq+xNBUugrUooaGOptJiwinvGFRYyG
Rex2G13NtQyP65gZHKC9b5DJsSGm5k2YF4Zp7e5nyb6qOR/ropG+9g5MKy6OdlaZmZpmeryLruEZ
7RgrtmWtlzPrkg3Tgp7OphZ6R6ZZ33TisNuZGRqmub2fse5G/vu//BNZHeNMDncxaXIX2wpfJqfj
rJr2dABztL+NxeLueevAaaapuUn7pKTTmbCZ56mqrKOzpYr00krt/u/vOLEuO7T17bZld3xp7WBa
b8HlcmIxmOhvbWV4xkBujC//6dcnzBkMdPX1YrDaWbIuY1FD7TpWGBvsZnTOwOqaKlGzMzrQz9Lx
syAIgvBbUWmcSt+8+YgG4MNxssvjIUI/JXuuDfSLps9ybGfht/MmA3AZNtfsbGz/9piwbDZhdZx/
GAVBED4GX7QBEISPxe8xAIIgCF8CX4UBUP3y7+zsuLuBFYl+o9SgNd68ywB4f0v7o6W6pfWMsqnJ
5Xo9/YmlBv7ynvc2qfXVOQmC8Meinrsv2gCoylkTkzPML+hZ0BlEot+s8fEpNjbO1oR9mwFQmZYa
7EZVnlFSLQQ8Wlc1a0/9fTJfW9drvqq5f7z9ppYROk+2vWjfHqljK6kBapTxVUPcbrmc7Gqj7x2y
e2yG1bOhmiK6zfEOu3v7HOzvsbd/wOGhxzS/Rbvu0fzc+3ut/YMD9vZ23fs72D+7bH+Pra0tbR33
PtyVFNVxz+1fhWl3V7u+3mMJCILw8flkBkB1jOIZDtQzst77oBIQlYhvb2/hVG9EItFvkGpCZzJb
cDhWz8SrtxkAlQlvaE1bVSa+gWvL/cbrzsDXz7yNb225tDdcLUPfeP3GruZtbqyzuraG0+nCbJhn
YnKOTde2tmxjXZkJ9zDa3m/UKjwqDKrkQoVrfqCJyJAoyutqqa7vxN0l0R4tja1sqMfxyB32Desc
LZ0jONdXMJjtJ+fjQZmHs+yh0xnY2t3XTIaHVbuNrX1wGKdpP+6bQ3F4uE9rRT6hoSHUtU+757ls
lJfVYN/cOVnPzRF7u+7SF1WSIQZAEP54PpkB2Fma4MHDICZmp6lr7NPeMhQqEdo7lRi4tzp6o0lQ
bz3KAKhExPtNSSR6l1S8WTSaWF11d/zk4W0GQGXm6u14rKeJioY+nM4NnNt7HGw7yElNoaZthO2d
fXada0xOzrK766IsL5e+CRP7ezu4NjdY33BimOyjoLyNw7014sNCCPQNo6nb3TJmZriDpPQSVp0u
VuzLrDtd2nx1rPX11wbgYHeXrJxmFvQL1NWUEpeQSWVpJhkluQT5+/MiOhm91UhhShzhkQmUN40w
1JzH86Ak2mqziUzNoqSwgPDwZKZn9eQnRZORX0lWSgrJsdH8dOUhFtce88ODNNTW0dbUTmF2MW3t
Nfi9uE9ESh4ZyWHkNQ5qnR8VpsQTrPrXyMijND+erNJ8AgMiqG9qIS81kaSETLoHRhju72Nj95B9
MQCC8Mn4ZAbAZZvH51kAaVmFNDa1kRrqx3P/OKIiw/EJDCW7qJrseF+uPwtkfNbM0tLZNzQPYgBE
v0fvawBU8ffMQAsP7zzB18ef9IwCirPD+fXmXQJC4ygtraA0P5vQ6FSKcqK5cfsmr2KLmZ4co6Wh
kRi/J9y495Lcik6O9tcI8XlJQFQi2VnpxEQHEJEQwyvfSPKyM0iIjCEiLJ7yyioamjvY3tvXwq4Z
gL1dsnOaWNTP8OL2DX65epf45DTys2P49VYwZVVlhAZFEPz4Ef/1n/5MQeMohqk+UuLiuf3DX3lw
/x43H4ZTX1dNuH8EQY8f8V/+4V9JLaghJzaQm09iUVnzVFcJv/z1e27cfYRPYCCPnvhS11jFr999
x99/+Bn/qBzNqBckRJJR0kJPWxW5udlERwRw/dZjrl29Q11jDyMtTTx5coek4matxYyUAAjCp+OT
GQCHYYzSqhZyEoO4dt2HmJd+/OO//p2oxCyKCotJjAzl7//2F3x8QxjTrUgJgOij6H0NgPqOPtvf
wHff3aCjfwD/B7eJS88gOuQFj/xTSIt5xUP/UEL9fAiOiicjJYKfrwdQXFzEy/sv8bv/iP/6j/9O
ckkn7NkJCwhn2rpCbXEmmdkZPHn0gJs373PrzlPa24boqS3l15tXaB1b5GB3Wwu75xOAfqiFuOgY
oqITyS+poaIggeScfLITUwmMTaaptpkEv1D8wuPoHNGzvjRFYW4BlUWZZBaXUd86gE4/R3F6PvEB
4fiFxzM0pWO0v5nY6CT0dheu5SnKi8qoamqivqObquJcgoNeUVxSRnZKHPUDs1pYeto7sblgd8NE
WlwgmUXlFOQXU1NTQ0pUGLUNHYRGvqRrxgJHqi6BGABB+FR8MgOwvWFn3rCM3TJPY0MbdYXF5Fc0
MDE9x/zcHHPzOkZ6mqls78Nuc7C8dDaB9iAGQPR79L4GYGtrm6XFWaqqm9AtLjI+MkxVcTpJaWl0
Dc0yO9pLZ98ws1OTNFTmkZSZTUt9HUmJ2bQ1dlKUnklGQRnDk3p2t1YZGBjFtXfIqnmC9LREWnv6
aW7uYLivg5T4ZBrqKgiMjsa+dYDrOK6rzFPVgVEhU78ejg4POThQYT9if8+dsarKedqyg33tE5s6
n8OTz22vP7F51js8OHB/9z861CrrKcPz+gCeujvH+z7Y16SF5VAV6++yf6DCoHr/fL3ZweEhG3Y9
je3d7B0enqkDoCosCoLwx/LJDMCHQiU6qgWAVnHqgr6ORaK3ScUbZQAuWwlQzfPUwt/YdGkZptO5
ydb29nHt+kN2tl24tlQt921cW1va5wKVoe7uqZr5KqPcYf/wgKPDfbZdapyBda1Zn2oBsOHc0jJO
VSdGrbe9487YF+fGGZ0xaLX9Pcf3GACl09OnpdXWV9NvWH5Ol13vzDHftM35+Xv77uuoMn/PPtT1
VSZDmQCRSPRxdfpl5os3AOpkplSpwbw0AxS9hxYMWjNSVbv+NG8yAMowqLdvbyPxsbW1vcPuzvbJ
3yocb8r0vySpc1DNBtU5qZIAkUj0ceVwODTDrfjiDYAHt7txFzuKRL9FF8XN03FWTZ82AFqR+N7e
GR0cm+qD46at3svfX+629ufnf/mZv0fe5yUSiT6O1Gc7VXqoShwVX40BEIQPydsMgHp4Tmdg6qHa
sC3S1T+Oa91GT9/wyUBQnl9lULW/VdH/8TxPSdzpZ8Oz3snC43knRfkikUdaJVDV2ZP7bxWLDo/r
YohEF0mZADEAgvAOLmsAVGmAeulfHGng71ee0dmYz19/faZ17DM9Y8Ckn6Oja0hruz8+NIhtzYV+
up+u0Tk2Vs2Mz85jtZroHxpgeHwWp2uDmekxzPYVbf3+rlYio1Nx7LgrzXn3pCf6NuSdkGv1K7ad
LC+vaJVAFRbDAqZld2VWZUq1+HvcdfTB/j4HWnx2x2lVx0RV1FT9rpyuAHr+OKKvSV+lAdje3mFz
08mm0yUS/TZtuvvR946flzEAdrtd+57m2t7GPDuI37MX+L54SmxSHqXJ4fzpzz/y4EkQkeFxlBVX
4nf3Gr/efk5+QQoxcXHc+fVHfrp6hfsPX/Dk2Ut8AqMIev6E73/6nqs37hESFkfw0wdcexTB5gFa
z4HqeKJvRyqxttlsJ3U+TrR/xLZDT1p6IQazWesHIvCRL/2ziywu6nHtbKE36Jk3GDAYzaxtOFlZ
smJdnCc/N5/esTnsyxb0JjNbrnWmp+fY2HLv2zvTEH358tzXr84AKKc7PjGNTr+I3iAS/VYZGRuf
0pr2neZdBkBJPUiepnC6iX7SE9MpyMsiKSGF4Ae+/PzrVV7GlrAwP4r//Vf43H7MlXtPKCjMIjI0
hMe37xMZHUN0fAbFpdWUFJfi//AhfgGBBIdF0TE4RV1REs98Y1nZ2nP343/Bdz3R1ysVv1TcVJW3
1LSqgLqyssLq2ia7G1bCfF7w4lUwwS8e88s1H0pKc4hNjCQwNISHt+9x58Ejnjx/RV55A+Up4fz7
v/+NG/dekJaZS3JCJLGpMbx8FYjvC39K6ga1MRzU/r2NiOjLled+frYG4M1L3o36DqYyf3VCqjmW
SPRbpMaQ+C1jAXgbAE9C7dxYw7Hu0mLzqsOBbmqCwZEJrPZVNjc3sC8tMzowiMm6RJzfff7mn4jN
ZmVkYhKbY40V+wo22wqbG2tMjA+jsyxrAxStr9mZn5lmZWNLO463sxd93VL3/LQBUIm5ajWxu3fI
vtPKizt3KGocpLE4Bf/ILMqKs8nMSuH+I19yc4vJzcqlqLCQxKgogh684odfrvAqJIaY8DBCI6PJ
yozn7vMYxob7yCmo0+K49+cH0ZcvFW/U72djAJwrZro7O8lKiiMkNJrRBcuZ5ZdFOgIS/R6pePNb
OgK6yABoCbX6xqpVwNp7XZHvuNKfSrhVpzsahwfYVZHu9s5JJzmqjwB3+1x3S5bjDbXt1Hdaheoz
3ztzEH398jYA6k1O+wS1t8/ejpPpiQlMS3asRh3T82bWbfPU1jegM1lZNBhZNCxiNBoxLpoYbG+n
pauX4YEexmYMLEx209jRg8myjN22jNG0pB3DOwyiL18q3nxWBmDVOE1acip5pS2s2w1kJecyP29i
7zcWB4gBEP0efSgD8FukNVmVhFZ0Cb3RAGjLj3t3VCOralH16KQ5qqfy32m9CVURUMVJbSjpC8Ig
+vL1+RqAslY2HYvkpBazrWqunlnr3YgBEP0efQoD8CGkMoNPdWzRHyPPPb7IAHg+PXlvIxJ5pOKH
p0TnszMA6hNAV3sHmYmxhIbGMG0wY55bZPc3OgAxAKLfow9pANyJ8vkH8UNLva1ZrEtMTs1qPWCK
vj7Nzi0wPTOnveWr+HfaAKh4ZrOvMDk5o42ZIvq2NX/BPKWp6VmtfpNKLz47A/CaI7RxS7SirNed
n1wWZQDUwyIGQPQ+UvFGtQb4PZUAVaasEued7S129o7bVHu9namBcD5UO2tVV2BhQc/6cRhFX6dm
53S4XK+7SfYYAPWrTKvZbNXmqxIC0bcpFTc83ZOfnb+O3b6ipRMqvfiMDcDvQyXMmgta0KPTLYpE
v0mq9Ei1gVY1q0/zWwyAWmbXj+L/wo+4pDTGphbY3T8b34c625g0OE7+Pvs8HB1/w70Y9Y33dEmD
eqD1+kU2vcYvEL4uVNx8kwFQb3YWy5K2zNvUir4dqcxepUkqXnim3XFiVTMAKp34qg2AIHwMfosB
UGvNDrZSXNePdaqTl8/DKC7IIyU5l5LsfBKy0knOzKWjpZmEyCjSC2qZmZkgLzWesNAYOvtnaC/L
Ija5gIK8bCJi48mvbKW/rRz/iBhGZgwYFsxaSwMxAN8OYgBE75In01e/Kj3q6enBarVqTZzFAAjC
e/I+BqCwphfbTBc3f71LUIA/t69c4eGzJGpqirh25wkZMUlc//Eq956+IijMh7v3X1FVVUt8WATx
fgH80z//icc+ocTHJREdGcmf/uGfuHHnHlUd49qgQFIC8G0hBkD0LqmMX5VeqvjR1tZGcHAwlZWV
WtfjKyuOL8MAHG6tMTo55z1bw7RoZvt4DHFv1MAXb0NrX33xpoLwVn6LAVDLVgzjBLz0Jy0zh7au
Hmryi4gNDeTurTuEJaRR3dhMYWI2AT5hFFWWEhoXQkv3MHPzCzSUV5AWGoNfSDTl9a309vTS2tpJ
ZX4WCZn5zOhNGFQTWSkB+KYQAyB6lzwGQMWLpqYmKioqqK6uZmlpSavX9NkaAPW3Z97K7CC+ATFY
7DYG+vuxbW4wMzbErGGSpNhEhmaNzE8OMaO3sr5sYnZ2hsyUFOo6R1myGhiZnGTTtcZg3yDLDieG
uVlsji22N+wMD48zOjiIYWmTI6eJ2PhM1l1rzOv1bGyuM9w/wPLqFnbjPDqjjWWzgaGRSXLS0uiZ
sp4Jq+jrlTe/xQCoTFkNqLKvWgAcm1Vt08NtxkfH2dzxdAykjnWIbtI9GJBC9QegODxUnQWpjY60
Y3mOvbevmvLsaQ+vdwnA9o77IRa+TlQPp2IARG+T5xOASoucTqc2rX7X19c+308AngCrwKsEr6k0
hSdPHvLsRQjpGbkEBvsTE5NFUkYsz32CCQwKIyczh5bGHhoLkvnu37/j2r1XZGbnER0VSVZ+Cg8f
vyQmMo7kmEQeXL9KTuUYey4zT+48IDQ0gpSMapzrRsLDYkgKf8UPV69w++5zIsOjycuroDQxlO/+
dpXnryJIjYvhL99do29+Ret/3VPbUvR1Sj1I6qF5U5xV0+8yAEqnpzXtuTN3zRicrsV//CicWXd3
Txvt7+y83QvneQzAzOw8RpNF9BVq0WjWxqhQibaKf2IARBfptAE4O/8zNgCeyKw4cC2TlZnNxGgf
f/uX/0Fkcj6hQf5ERqWQlpHMixeB+PoFk5tdQFNVLTFPg7h19wHPAyK0joQiIyPJzk3VBkxZMBgo
zMgg5Mkj4vKb2Vpf5N7tZ4zOLlBVXo/TtUZRVhZxwf6EREYRHJHMjM5AXkIcoY8C+PnKdUIz6jHO
D3H39mMGZ9wlAMLXjWon6/0QvI8B+KOk+hpQx19xrIq+Vq04tLEgVDqpEnkxAKKL9EUaAPW25TEA
h7vbbGy6m2DVF6WTVdaCYX6U1JRM5k3LbKytasVgcxODTC9YsC/qGZ2cwWLSYzDbca2ZtQFVNl3u
RHlzbZ35iUmW11xwuM+SdZmtbeWiN7XSBqtxkVWHnfGpSWxrm+zsbOPcdLI4M8Xo5CyODRe7uztY
FxewLL9utiV8vSgDoBLY03zOBkBJPT9K6viir1MqXqpfMQCiN+mLNwCC8Kn5UAZAVdI7/ffHknqg
VScwk1Mz53qQE3158u7BTUl1bqZ6clP3W8U/MQCiiyQGQBB+Jx/CAKj47NrcwLWzp434551pv5a7
1YD72/7xYC5q5L/fYBzUA616+NrwCrPw5aHigopf3lJp5MzsglbDWwyA6E0SAyAIv5PfawBU7X2b
bhjf575ExSayaHtbxnyoJdzuvR2gm5tDZzCzdW4YzKM3liZIM8CvBxWvPIm2SheVVLxS8VGVBIgB
EL1NX4UBUG9Cnrej19plRyT6WNpRg+ocZ8O/0wCotWaHWiltHMY61UdKbCKRMcEU1jSTGBlJXUMP
ZdmJZKYXkhofi19IFElxyaTlJXH71m2S86ppqs4jLiOFiuoKQv1CaOgYwTinZ3PnfEsAMQBfDx4D
oNLE0dFRxsbGtDgmBkB0GX3xBsBqXWZ6dkFr+qI6vtDpDFqgTWYreoPxRIsmKxbL2XkeGU1WzGbL
ufkGo4Vl24q2zODZj9GsjaTm+fusTCfL1GAb2j4WTZrMVjurq+uYTWaWbCsYje5fk9F7H0bM1mVM
JvO5+Wo/6vjq13uZ6I+VGgdAjaanEmCl320ABlvJq+zCOtvH1X/+H/z46w38/EPwffqIX366QXZJ
I2ON1fj6hOD39AlhcaXkZUVz71kYKXFRPH4ZTHVlDt/9/Q51tbWkphaxfXDx+OxiAL4eVLxS6eH8
/DxxcXGadDqdFr/EAIjepS/eAJgt7h6LVB/Gzc3NtLa2UF9fz/y8V8+Ae05W1nfOzjtmf2sN29rZ
wVw8zExMYVs9m1AuL9nP/H0as3lJ+z3wGp3FsThNcVk1G/tgmJnSvvVOj4/jvKCnQbvVwppz13v2
Cd6FvcKnQXW0orrY/b0GQI305zBOEvwqgJSsImanRklPTqB9cJzihHjySiooykgkKSGL1q4B6kqy
uHblJlllFdSWFZBbVENjdQ6xyUlU1newMD9PV1cP89NSAvC14zEA6s1fdeGqND4+LgZAdCl98QZg
ZWWV3t4+zQCoxE1FdHVStbW1Wq1q2GOop5Pm2nIiIlMYn7Wyv73C2KyOg8Nd+rs6qC4rpbZ5CPvq
Gs41MxM6Mwd76zSVpfPLr3fJKGpkYV7HaG87CTHRhEbEU9MzxgG7jA71sGCxahdlxThDWlYZmztO
xkbGmZueprY4n9TUbPIy8mluaiXo1TNu3gnF4Vwnyj+QvhkTQ309zFqsGOen6B+foDQvk+L6QSz6
SXoGJnCu2ZkYn6IkJ1MbCMZkMjI01MvS+hrjA71M65a0Zoczc5ZTV0342HwoA6Di7f7BgTZqn8c4
Hh65e/NT/xSqop/HK+5srjA5vXD8l/shdP+6/1afJNT63m/+YgC+PjyfAFQcU5n96QxfDIDoXfoq
DEBPT6/2/ctjAFSkb2xs1JLO4bZKcrJLKEtNITA4ivTEJB7fvMoPV2/gFxhGTVUtpQmJ/P3v1+kd
GyHi0RV+uHab0KgY8vPTuPvgKUFhCYT6v+D6Tzfx8QsjLiGdpOwsgsNDyc1OJD0/m4d3blFY0Upl
bacqUyAvKYHH9+9x5ecH+AeGUVTVp4XX/+fvuBmYx/xEBw8fPebxk+ckJReQmBzGK79ksgrSef7S
Dz/fEJISU2ioaqevvoJrP3zPn3+4Q0pmHhGhoeQVZfDy5XMiwmJJS0zD98k9nvpl4vT0Git8dD6k
Afgt2ttXN/no3PzLSgzA18PpSoCnJQZAdBl9FQagu7tHK/ZSqAROLWtoaNDeiMa768hMzSU3MYXW
gWn6Wyp5duc+kfGpZKSlUlJQSm58CmGBMVRWVREX6EN0UibpaWmkJkXy9PET/EMTyIlP4OG9u0RF
xxMRHE9CejZxCXFkZSaQkpXNqxc+lFU3kRwdR1FxHlGRSSQGB3L77kOKy+spy80lJTWf+KR0Gtr6
aawpZWhyhqC7P3LrSQSZGfG8fBlORm4WAf7B+PmFkZKUQm1FA2kB0Ty8/ZjbT33JSMskMjJC673Q
1z+UgfF52huqiA0I4LFPFGu7F3xTED4Kn8oA/F6JAfh6EAMg+j364g2AzbbC1NS0luFPTExo38IG
Bwe1EoBDrTj1kKnRIeYNVq11gKq9vbVhZ2JOxyEHTAwPoreob/pHrK2ts766xJTOxP6ui7GRQZbs
K6xvOLGbTCyaLTiWLczPTDMyOa9tMzs9jtnmYHtvl631dRYXZujr68NqW8W8oGPZvoTN5mDL6aB/
cJTtgyO2nU42N92Jr360ndjkfKwOCwXZWYzOGdje3mLDuY3DqmN0ch7nmkP7BLBsW2Jx0czerpPp
qQlWnVvs7uyws72NVa9jUTsP4Y9CDIDwqREDIPo9+uINgOrRzOnawmg0Mjw8rH0KUFInJQgfEzEA
wqdGDIDo9+irMADrWj/9gvDHIgZA+NSIARD9HokBEIT3RAyA8KkRAyD6PRIDIAjviRgA4VMjBkD0
eyQGQBDeEzEAwqdGDIDo90gMgCC8J2IAhE+NGADR75EYAEF4T8QACJ8aMQCi3yMxAILwnogBED41
YgBEv0diAAThPREDIHxqxACIfo/EAAjCeyIGQPjUiAEQ/R6JARCE90QMgPCpEQMg+j0SAyAI74kY
AOFTIwZA9HskBkAQ3hMxAMKnxmMAVPxTmb2SmhYDILqMxAAIwnsiBkD41Kh4peKXXq9nZGREk5pW
8UwMgOhdEgMgCO+JGADhU6PilcrkVcYfGRmpSY2Guru7IwZA9E6JARCE90QMgPCpUfFKJeIq/jU0
NNDY2KhNqzRSDIDoXRIDIAjviRgA4VOj4pWKRyoh9yTcHkMgBkD0LokBEIT35Es2AAsLetZVuI6O
RF+wDg4OtERcScUzJY8BmJ6dFwMgeqvEAAjCe/KlGgCVaVisS0xOzTI/rxd9hZqdW2B6Zp7d3T0x
AKI3SgyAILwnX6oBUFLPz6c6tujDau8N8txjT4mAGACRt8QACMJ78iUbgI+hw5NH9PDcsktpb1+l
KO59nezq4Nx6B4dHHB7se83f067l6+up0pEjLSP0rPM6BeHcPj3bnd6HNr1/ep9v0HEcODf/N2jv
OD07OnLvZ//AfQU84feE6/T5eKTWPdj3vh6vtxMDIHqTxAAIwnsiBuC11PNo1U1SUlLC6Pzy8VU4
Uvm5+/d4jroOB4cHmjzzjjzO4WAX46JZ+0SxvDBNQUERs+aV47W0FbVtNhw2luzuROfo+Lpqmx/s
a9fXPWcf3YIBdypxyP7+HvqpIS18LT0TJwbj4Dij9dyfo4N9tnc8adAR+3u7uLbciR2njuUJsmY8
dp1Y7Tbtb5URH69xfH6v0y33uR9q53dy7sdx5HB3m0W9Dv2ihZ29XbY21hgaHGbrwLPtAdtbWxyc
7E59/3f/4bBbsG1sXmgCxACI3iYxAILwnogBcEslDIr6okxCIyKJjy9Ap5tnTrfEklHPzOwiJt08
ExNz2JYd2nmvrqxj1k0wNDnF0pKZyZlZehoLCI4rYm9nldTYJCqqGujs6GVieo75+UkMtnV21k3E
hodS1zWKTj/PssPB2NAwvR3NxMQm0T82g1Ede3qM9NQ8hkan0OmWVNZMQVIsWcVlRIUmMrOgY0Zn
YG3VwfT4MInR8fSOz9HU0MDUvIHRwX7K8rOITy1gXr/I5Fg/+mUb8xPDDE/osFlMjI/Pa0bAMN5N
Vl4JvQODrLpcGKbG0RntmHRzzC2YMczPMjW5gN2mzt3BmmMdw9woI7NzWMxGZmZnaarIJjwqgezC
Wnb2nWSF+/PUNwWbw8r8wgQpCQnUtvYxNj7J8OgI0zoz2y47k3ML6GdHqGxoZf8I7V54pO6NGADR
2yQGQBDek2/ZAKhwq3Ox2Wxa4qDebJuLUnn4PICWvhHyovz4y6+PCHr1jKfPIgh6/oDHD0NIiQ3l
6aPnREQmEh8fTXJGLA8fvsTXx5fExHDC0qtYsc6QkV+nXa+Z7lqe3HrAT3/9V67ce0ZSSjyxSQnc
u3WLn379iWs3HhAWEYfP/bvcfx5IUVk1JckR/PuffiQwNJGnt6/iF16svXEXJ0cTEBBMRGQcgU/u
8Ncr1wkODuLOlWvcvvuSqMhoHj58jp9/EJVlVUQ8f4FvWAIxEWFkZCUQGOKLr28ICfEpBL58wvVb
Qaw49xlsL+L+42Di4xLJKy8nPfgFP954gf/zh7z0ieHV47s8fxpBYlQwTx6/IDIqgaSkGOJTo3j4
0Ad/P39i4yMJj0+hpLpLxRLu/fgDIRHJ+Nz7ib/98CNX774kJSmRB/ce8/TFK4LCE3hx9zp/+v4H
KuvbKC7LZ2lzXzMY6n4o2e127T6p+CcGQHSRxAAIwnvyrRsAdc4qAdk/cJdTN5YX0juzwv6aibBb
j/j1/ktiw8J5/PgVccGB+AXFkJQYxssnQYSmJ1NSkEZicgwBEenU11QQF+FPVGoRuzubZCUmkZdV
TExIHFWVVQQ9vk9ceiZJifHExUfy6NZdAoNDCQyOom9slqK0aAKDI4mLiSPkgR+/Xr3JI/9YEgJ8
eOKfyO7RERUFBcybV2jIT+fe1ZuExCVRkJPLszs3ef4qkISUHEqKSwn08aW0uJL85GSiouIJDgoi
IysJf38/Kpr66etsICogkFu3nmJc3WG6p5Jr1x6RmJpBbFQsYfefc/2RH3GhITx5FkC0vy8hUQnE
x4bw4lkI4ZmplOQma5l+aHwedVWlRIYGkpSaSkxkHKUludy985yaugYinz8kMjGZuJh4woODCYtK
o6qqhvzcXB5du4lvSBRdXd0UFxeysY/2yULdH09mr6bFAIjeJDEAgvCefAwDoP725vQ66k1bPZCn
1/fex2vtacdVFcv2jjOGE53aTn0f9w7Dm/f5eh2PAfCsv7piZ21zS6s4Nz82zNDEHItzc8zM6zHO
zjCjN7Gx6mDF4WDNtY3DPM3A2BSr65tsOdfo72plbtHK/v4BmzYzrU1tzOpMbO/ssjg3xtTiMg7L
Ap09fWxsrDIyMoTeYtOu7+rKErOT4xgtdvRTE/QPjWG1rbAwPs6swayFb8Vux7m9i3N9jSXTAoPj
U6wsLzM+PoFpcYGZOT12xxobqzZ6OzuZ0+mYmZpmdX2N8eFedOZl7XyVFmdnGZ+c1Srg7TgWePzg
JrnVHdr+50YGGZ3WoZ+eZk5nRD85yYJpiXWHHbvDwcbWNlbdGCNTc6xtOHFtrNDd2YZ52c7s2CAt
LS1Mzelxbu1iM80yMreARYVvVsfSso2VlRVsK6us2c0MjU8wNT5A98CYFt9O3x8xAKJ3SQyAILwn
H9oAqGk1X/Xr3tvbq2lgYEDbxpPJ2ixGFs029g9Vpr7Hzva2FoZ9Ty3xU7Xg1dvgsnmRubl5Nlw7
2jOjHUf97uxoGasyBltb268Ngbb9Dtvb7m/Ib5K3AVDzVOU2j5nwcFLZ7fh/VelOqwy3v39Soc29
3XFtN08teE+FuyNVEe84TThSleg823iWqwp++yd/n64UeHR4vE+O2N3Z1e6HWv46JXkf1Nav9+Cu
0HfE7p7nnC+x91Np2ekKkt4o43YZDvZVqwnVMuJAS6zV9RADILqMxAAIwnvyoQ2AQmX6HR0dzM7O
MjMzQ1dXlybF9toi0SHBhIQmMr5g1zLN8d4W8sva2Dk4xOlysq8yuaNDrZe4NdMkQb5BlJZVYHE4
2dp2mwAVZtPsMKW1PRwdrlFaWsfWkapp7g7vcGcDde2jZ94ovXWRAfic5Qmv2WLVOkH60FJv5tYL
5v8RslqXT46tpYfrG/IJQHQpiQEQhPfkYxgAVfxrsVhO3uJUca8a4EWxtbJAwEsfopKzKMrPIiou
lLjkOIJCkygrzCYxKpb4xCxt/b7ReTasUzx/6ktdQxtpCXH4vIpgYGCU+MDnPHsZzMOnPiTkppKU
nEVs6FMeBMbSUFvA/Xu3yKof1o7pnZF6Z6hnSgC0N3s1ffwMez5VnCudOC91HRWqKZ8HT90CtR/1
hn9RG/jLSpmi+QW9ds+WbfavVkaThemZOa2kQwyA6F0SAyAI78nHMACtra0YjUatD3e17tLSEs3N
zdoy5/IMwYHRmFcclOamUlScy/27d7l9+z5PXwQxMTRBc0kWv967z9zKNhvGYXxehtLV3Up4VAY9
Pa34P/Ql4OET/uG//4nk7ErSksO5ee0OP/3le175BeATEE5Odhp5NT3aMb0zUo+8DYB6HpetZuyr
m9ryxdlp5k1298U4LsbfOWlff6q9/OGBdg339pzMzs1o9QFGe1tp75/AtWanqryCeasDx6qNbdXh
zbkOgC4nlYip+7V93GTxa0WV4iijoz4HiAEQvUtiAAThPflYBmB6elqL42qfCwsL2jCviq21ZYZG
ZrTppfkektNS6eofoKWlm8GuRhLjM2msKyYsJQ317ryzZiE7OZHMzHQqG/tYXjbTUddKQWomeYUV
pMQnUtrYrLUt72gop6pziKmhdiIjwxiZt2jft70zUo/OGIDjZ7G+NJ+ecROGmW6ufX+bnmk9ZouR
1voKUrNLGZ+cYWp2mvHpOTZcW1iNs5gd7sRjsr+FsIhYivLziQkJpaW9h6yEVIqLykjNKqCqppre
0Wk21p1vLUl4kzwGYNPp0o73taJKX8QAiC4rMQCC8J58aAOgMlzVrr6uro76+not41fT6pOAlhkf
F5Nr676h5ph+dpwFi8PdK5ynYt0xah+X5ujNmb/SRQagsaKEGcsmA7VpfPfjQ9Ljw/jhlx/57q+/
Eh6XQpCPDw+fPOe5bygxYaH88sOfuOOXxO7hIdWV+WTnl9LS0U9HbRmJCYmERORo+63NyqegsID8
smrW17bEALwFMQCi3yIxAILwnnxoA6CkMmklzzdzz9/eGdqbpB3xHZn3h9CFBqAonYSMAuLC/QmJ
L9A63nn2MoComDgS4+J5+jxAK3koLSkl/OUzHt1/QFJeLfuHB9RXFpKeWUhJRQ1VDeUEhUUTH51C
TkYeCdlV9HU2UlzVwKZqZigG4I2IARD9FokBEIT35GMYgC9FZwzAsVlxWHRaqUVH7yAmywo7rjX6
+vtYtJiYGhtDt2hiacldW35tdZWpsX4mDUtaF/v6iV5qW3tYX1uhs62BMZ2Vg+11GusbMK+7GO5q
Zmx6AcfK+7U68BgAp2vrzH362lDxUQyA6LISAyAI74kYAO9WAK/P/+jogL3jTxCvn90j7ToonW7H
r+1vf4+d3Z3X89VIfp7tD/Zwbrk4OFL9CLxfJUAVnrl5PfYVlZCp8Qu+Tm1sbDIzOy8GQHQpiQEQ
hPdEDMCH7AfgXc0E37zsMlLGQTWTU5njwoL+q9Xs7IKWsavPRmIARO+SGABBeE/EAHxIA/BxpRKv
31QJ8gtG9XmgzlkMgOhdEgMgCO+JGIAvxwCoMKprr9PpmJ+f/8OlmnMuLJyf/1vk3sdZea+jpOKb
J7NX5y4GQPQmiQEQhPdEDMBZA+C5Fu/7nf689ty9C36A/SmmpqaYmJjAZDJhMptZW19nxb7k/vst
MpvNF867aP5pqe6BN9bXWbJaWdtYZ3l5iRXHqjZoks2+osULq+Xt+zh9PNUplGoSarVaWVqyar/e
683NzWljSai4JwZA9C6JARCE90QMwFkDsLPlxLhoYGllgwOth7/jczsezOfwQPUYqJo1qgxdZe7u
66P6LFDrqoGJ3L8eQ7HLktmI1b6uttbmu7dxj1HwW66duhdjY2Nn7lNfRycLpo/XKmDVqqeupYPd
vUO6qlpYXt5kfKibkXkjq2Ydba0dbJ5P7t7ISH8fLQ31tDbU01hbi23J6r2K9pljeHhYDIDoUhID
IAjviRiA1/0AqHPtqi4gKjGNyIgUFlecWkatODraZ2xwALNji3W7BfPympa5L5sW6OkZwLykMqU9
9g+PtBr/apRChV03zKunvkRFxTA6a9KMwtqSgf5hd2+I7rEHdtlWoxleEMbTUuEbHx/XrrnCONnN
i1eBZGaXsXHcK/HF7DE6OMzSqoud7S0sRj2Dg6NMTMxgXFrzXvkMs7NjFOYn4hsYTHpqNoW52XQN
dZORHsazB88JjklnY+91uvY2tre3aG9q1Ir4R8YmaW7ppr+nB51xmak5E/OGpeP13KNJigEQXUZi
AAThPREDcLYjoIbCVMLjUomPTaIwK5m7z56Rl19A0MtX3PjlFuGxyTx/5kNmbr7WRbHvg3tcf+BL
ZVUlmamhJOXnkBAdSUBQAgbHFpbpHsqbR9k0TVGQkU9SZBBXfr3O86AEyrMjuPUiiJFJPSajTUsP
vMN4Wt4GYHvTQWV5Hg+DX7LyVgOwT3pkEOnlXcwONXP16iOSEhJ58iiQoXmb98peHNLbVE1cagJj
8zPUNtWwurxMTVUZzY2dpCXH0DIy673RhezubNPe3MTw6ITWW2JVfQfjw0PUtI7wv//nu9rIjoqd
HTEAostLDIAgvCdiAM4agLrCDPJLa8lPS+CXv/zAoxcvCQ+L4tmdG9x5FEBScjopiSncuX6L5rZB
6nOyiI5L4emD++SWFBLm/4SAuCIaKoppHjSyMt9HclYlE/1NRPiEaoMY/fd/+4H0rBwe//oDj575
0TdlvtQ1PGcAXA7yC9IIjs3AYnWwd6oPg7Psk58YS0BgEvER4TwLyMBqnuPBrUf0zSx7r3yGklh/
XoQm0dfbQXRILCVZKdy7cZuC+m56BrpIjUqic3jBe7MLUQaguaGRvpEZGjtGiE/KpqutVVs2b3j9
KUBKAES/RWIABOE9EQPw2gCob88z46NY13ew6Wdpra0kv7yKyfFJCtLSqagooayijuGxCUb6e8hJ
SaSsvIry4hJ6BgYpL0ymuLaJyRkdczNTLFjW2F0zkhAeSWZhJbrpWXJik8kuKqahoZnu1hoKalsx
GS0YF5cuXQKgwuvmiLGhYaxrO2ytbfCm/H9nVUdadjHzs7OMjs2xuubUhjy2LdvZ2X/TVm5MC5MM
DPSz7Nhgum+cZaudyZF+hiZmsJoNjIzOe2/yRtTwvk119RQXlZOdU0RYQACmxUXv1bRzFQMguqzE
AAjCeyIG4GwlQHW6KnP0VO57L44OOTw60ioMnh7M6E17VBUKVf0B7/B5S6EqARoMBi3cWoaoxljY
3sK1tYXzeJ631lbsLNnsxyZnXytidzpd2j5dxyM2vkm7ewdaHNjZ3tbGO9D6IjhU56b2ozon2nvj
cS+S3WZjfHSE0eEhDAb9yYiRp7W8vMzg4KAYANGlJAZAEN4TMQBfTj8AKr1Q13t0dFQzApfV+PgE
k5MT5+Z/CqkmjGqoaCXVpFGVaHivo97+lQmQngBFl5EYAEF4T8QAfDkGQMmTZqj78rVK4RlNUgyA
6F0SAyAI74kYgE3tHFTC4Dkn0echdU/sdrt2r8QAiN4kMQCC8J586wZAncPKyop2HqLPU+o+iQEQ
vUliAAThPfmWDYBHKvyiz1sqkRcDILpIYgAE4T0RA+Clky5/394k753aU10Gq9r9B1rvf97LVe19
z3xVO9/dCmDvUmMGqH26cXcn/LVLDIDobfoqDIBqxiMIfzR6g1EMwIn2ONzfYXpyFLNtTXs+1bVR
FdI8TfXc4wC4K6h5+g5QqMzcM19177uz7cK5tcOOcw27Y127dvvHb7Nqv5trDlY3XNo+1Lqbzm2t
S+CNDdX9sGpJeLwvzz41w+De3rW+wsjwEFPzJvYPDzWzou33OCxqW7W+Op4Kr2qSqHAf++DYmLib
BHr2ff5afD4SAyB6m754A2AyWZib12NfWcWxuobFsozRZMFsUSNlWTFZrFisy1jV34tGDHoz65su
Vux2zJYlrEvLmM0mjGa1vhqZy6Jtt7zkXq5tq9YxmTBa1Ahcy5rUukajRRvpy6S2P96XWmaxuqe1
bUVfpVTiOT4x7c4kvmEDoGXmx2/+Iy0VhASG09A2yLbqE2B3C8faKo61NbZ3dtjYWGNFJR67+xzs
77DlXKG+pgG7c4vJ8XFsqxvaKHlLi1OUFFWRmZvKmN7C1paLHZXpamMOHFCTmUhSaZfWS19zRSFN
vXOsLo6QkJRJRWUVrV1D2BxrOBwr7B4csGq3sbrhfknorCogKjmbqLB4phZtbO9sccQRLucmHY31
jOuWsSzOMb+4zPraCnOTw1TXNKI3LrOxscrG1jY7rnWWbGtaO/61VXcriM9ZYgBEb9IXbwDU74rN
TMSrB9y8dYtnAVn093dz59Zz2nvGiI8K4smzAB498WV0fIHB1i4K01K5evUWceklpERHkJxdQn1l
DjcfhNHW0kxkQDB+rwJo659ksLuVxMQU6hrqyUyOIDy1hvGBFq7feEVrWzu+jx5T29JEZm6JNgCK
unh1lYU0d3WSX1zA8uoaq6KvTg7HKptO9xunegv81gyACrenEqBKHLa2dzDP9pORlEZubgHl1XWk
RgZy98lLXgaEEh0dx6tXr3jqE0h6diERfvf55eYNfrn+gLiYGO4/9iMtNYWEmBQ6Wxr563/5T/hn
1jHSnMtP167wPDCWyqoaujpaSIsOxD8igaqKbJ69fEFQdCzJcX7cefqSn374mYDodPKzU4lLDCMq
MY4gn1dExxdopqSjIhv/0GhiYhLITIjk55s3SExO4+XDR1z9+TZBEbE8efSM2MQUctJSCXn6hJsP
fSnIzyc9OZTotERCg0IJi0giLS6a27d8WFx2sr3l1K6Duqefk9R9UvFPDIDoIn3xBkDhMIxRWteB
aaqVf/yv/0x0aiYBfv4EBkWQmJpMcHAUCQmJZKZmUJFTQui9F9x48ITQiGhSUjNIS4kkJjGW+Mxq
ZmcnyUlO5/mt27RNGNFPDFJbW09eWigJmVkkxaYTHR6JT2AqOoOO1DiV+AQQFJPMonmFnQMwTA0Q
8MSf6rq2kzAKXy/fqgE43QxQ/W3QT1FekUdQeCJB4S94HhhFWnKWlnm+fPSUqPhMCvMLiAp4xU9/
/YmA4BBCwqJJTc0mPSWZu3ee0tk+SFd1OQmJ6eRkxvHjv/+NZ6+CKCnJ597zJ9TW1xCfkEhipA9X
7j6jtDibq9fvUV6ez6O7t7j/2J+01FTu339CeVUhN6/fpr6jn5LcXGw7R7RVFFDV2ENdUSa/fvcD
z3wDiI9NxOf+LW49eEV8QgbZmTk8vnuPqrp2GgvyiIpJxOfpYzLzcogK9SEosYzBnmYCX7zi5pVb
dE2atERya2vr5N5+akkzQNFl9FUYgP1d1cWmmjqisiiPMZ2Z2dFeqhq6cO6o74Q7cHSAfmGOddcu
q1YT1hUH6w4bm9v7uNaXsdhWOTo61Ip0d10urGYL6ggHx8WbjmUjq649djbVRbFoQ5aq74aqj+5l
s15709/adLF34A6nfmKBre239xUufB18ywZAJSDub+IHmOaHSc3IZHhilLikKIamF5idmmZ+fo7B
/kHGJ2eZm51lfkHHUHczTX2DDPW00t49pH3GmxnrIzs9m+GxaUxLDhzLi7S1NFLT0MLAQAvRGZno
DYvYN/dgd42m6hKy8vKYnByjJD+NutZOBnraaWzqYGF+jNKSfPpGJ7FYrMzPzeHc3cekm2dpbYv1
ZTNj/V1UNaghdvXUlVXQ2dlCU1M70/M6dHPTVBbmUt/YSmtjA+Mzc7TWFVLf0Ytu0YzVama4s5vy
kkqW1rcuVQHxj5S6PyrRVtNiAERv0ldhAISvE3WPvYs0Pweph+F0nPzWDYDnHI69L3sbNqbnXw9U
c/rZPZ7j9ff5eVplvFNjCiwb51lcco/kp1Xce8dAPKdRCZj6zr+3u+seZ0BVSDy+HxdzUfheo14U
DtxvHBqqgqH39fnUEgMguozEALyBzU0nJrO7AqHo40u15lDf1T2o+22z2bTIqSLe5ySVqHpMgEIM
wNlz2Dtuaue9ze+R5gUOf1+Ne09JhXpb/3rlPj8xAKLLSAzAG1DFguoBWV1bF/0BUi04Jqdmz7xV
qwpmCjXPo9OcnXe+X/RzL55eb6Mn0+e28zreBfNUwqoeBIUYgM//HFSmuLxsY3pmnvkF/Vermdl5
zUyrOCkGQPQufR0G4OiQ6YEOiirqcb3DF6imgG8r/PNgMJi0dszCH4fqWMdznz0GQP2tMk8lVfQ6
PdhJfn4+Td2TJ9vp5xfeeN9NBiNbO1vMzcyxsf16paNDVSh8xNpxJv4mPJm+JwzucBxpD4MYgLMG
QBWvq4x2/7h43FM0rtWVOV7mvZ+T/R2XGrx+zs+6N09fAN7bXVYqEZtb0LPiWNX6LPhapUoulQk4
FAMguoS+CgOwv2EiyvcVVfWdOFYs9A0Nsbmzw/TQAHN6C5MTU4yNDNLe0U1qbCzZRU0sOZw4llfe
aAaUAdhWlQeFP4wFneEtBkDNPyA7PoaiqipiI9KY080yNDlOfm4Jg+r+Dgyzu7vJQFcv9o1tZkdq
eOobx7pzncSIaFp6xxgfHiErPobCxhE4WKeooICu/jGmJoeYWrRiWphmdMLAhn2RoYlRYiMi6Z+z
aWESA/BaZwzAvrszpImhPmYNNpybazRVVDI0t6Sd845rU+s7YcN58fOkvqc7V01UVVcxMTlDRW4a
BVWtzAwPEB4USkPfGNOzk6xs7Wl1A7zDchmpREwZTKfr6+40TL20qJIAMQCiy+i0AfCkTao1y8bG
+pdjADjaZ7q/lfSsbIKePeAvP/xAZl45US+e8Ke/XcPvVTBRUXF0N7cT7BNEdGQs+aXtuNY331jd
RwzAH89lDEBufAShwSFERcfz8s5Vfvz1Ck9fBBGrmmNmp1FeVsGz61f49fYzSopTCY7PYX3LRVJY
CMEhUTy9f4cf/naTusEFTDNDZGZkEPz0Bb/85X9w/dErAnye8fRRAI+u/czPv/7Idz8+YEpFTjEA
Z+RtABR1xbn0TloY7y7lH//hBzoG+ikpKyA0yB+foDhqa2rIzs8ls6CciekZassyqOgY1b7vdzaU
ExWXSlFeHvFh4XR29RAfmcKi2UpeWhaFxcVUN7SytOTuZdA7PO+SxwBsOl1n7tPXhioFEAMguqzU
86syfBUvBgcH6enpobe3F5ttWauT9UUYgO0NO2VVBcSmphLk40t4bCz5GQUE33/Jj9fvU9bYRV1J
NiU5RcQnFjI7O0V5ZTP2JYeUAHxGvNsA7FNRUoFja5fG/AyeP3hEXGIycfEpJCZGk5ydQUJoIi9u
PeH+C3+y0qIIjkphc2eb1MgwYuOziPH14e7D55SXV9PeO8DI8CD1NfXE+T8jMa+MktRknjx+RuCL
F8SlpBEVGcvQrFULkxiA17rIANSXFjK5uEpHSSI3HoUQ5fOYH69c5edf75KamcPD2/fxDQgjLCKW
Z7eu892f/8JDv3h2Dg6oqsonp6CExvZBJoa7ePXiBS/8U7T9FqfmUl5ZQkF1o7uZ7gXheZfEAIgB
EJ2XxwCoeFBdXU1QUBB5eXlaPPliDIDCuDDNrFEV1R4yt7DA9t4hpvlZFi029g5gd9OuFS9uuHa0
b4lbLhcba28vAVAPk/DH8a46AEoude8Pj7S+HzZWl5jVG9jaPcC5amFWb+LoYI+ZiUnWnNuYddPo
TEvaPjY31tnc2MSoM7C65sC8uIhzZ4+93R2t74ZVmxH9koN12xLm5VV2XavMLhpZX7Of9EcvBuC1
vA2AOtfeuiL8giMIDQ0mo7CBgdYaIqLiKC4vITU+gbjkLOoa22hsaKK8II/4yGCKmga0ugMddWWk
ZZfQ3NxIakYcyfmVtNXWEPAqiLyGAYa7GiivbmLJ6s7AvMPzLokBEAMgOi/PJwAVD5aWlqisrESn
02nzvpxPAB8B1QpgednOxsam6A+QGtHRuxWA6snsc0UlrOqhUHzzBuD4HJSZsmv97ju1a6Iqba6t
r7G77zbcqqKfZ1AfdWVczg02t7a1OgCryzrGZhe0a7TuWMG1o9KBI60//0MOmRofYnl1U7tu3mG5
jDwGQI1J8DWjSsrEAIguq9N1ADzxRP1+UZUAPwbr6xsYFk1aXwCij69Foxmbzd3sz4OKdMqVqv4A
PjdZrVat6EwhBuDYAJwM4+tuh67eRj3TF+n1eqqlwOFJBb8z89W0p4XBe7z5e6TMiNZUTmdgacn2
1Wpx0aw1dVQ9lL7NACwaTVr65h7XQhX3ir5Jra5qed3Kimeeu6Mzx6oDq3WJ+Xndt2kAhM8DzxuK
ymg+F6nweB4AhRiAz/8cVBhVuqFaIywtfb1SibYqUfNk9urcvQ2AmqcSetVcUNW7EYkukoofylR6
+pT4rAyACpQgfA6ozF0MwPl1PiepxMtzD9x9DHytUonyoXbObzIAKu5pQytrdVrUcNYi0UVSXV67
S+U+KwNw+puFSPSppUoExACcX+dzkkrI1Kcb1dRpeHiYkZGRP1ajF8z7jRofH2dicpKJCbdGR0fP
LFfnNTAwgNls1uKbtwHwvMl5hnAWiS4rFWdUXPosDIDidK1skehTyxsxAJ+XFCrDVHU31N+e3gq1
QYL2zq//WnvaG7X3Ogfa29Hb6ySo3iaPX8o53FeVItXE63RMvYVf9tqp9RwrKxh0OowGPWbjItvb
W+fWU2ZUmRwV91TCreZ5DIDnWOpNzhMHRaLL6HQ8/CwMgCB8znyLBuD0E7rvnWEeHGiZqGoy6KnM
5+lB8E0Z6ekR/05v86b13yZ1L9QbtMogFVsbdlLjkmlunzsT7vMcsr7u7gjqNAe7Wzi33MbiTUwO
tRMen8DI2CTJQbH0dA1RVppNQU0dHXVVZGTmY3de7lPm/v4ezXW1NNXXUV9TTWlhCZNjY96raZm7
Kg14mwEQfRnSnpdPKO/wuMMkBuCjo871S9Sb8F7va9NFfFMG4HiUvbmhDhKTUsjIr2HT6zHecjnZ
196A99hwHlegPNxnXTVHWj/7+URbdHiI024gOSqatJxiHJ5uhNX2m6/b8qvjXsYQqHuhDIC65grT
VA8BIWFEJiey8taWgXs0VVXQN6HHZtZTWVxMWmo2ZRWNzBndzUDfxObWJgOtRdx6+JDmzi6KinJY
2VylMCOExw9eERidjM311oOfoN72u9vbMBiNjE3O0doxwFB/P/Udo/jHFFPdPKitt7OzLQbgPaSu
jTJPn0re90bF8x1171w7n0TOrR0tDN5GQAzAR0Qleupbi2r/rn6/JKnvq94RQUUWNd973a9J6l6p
t0rv+PmtGQBFXX4KiTklJEQl0NnVRXVTEzOzszTV1OD/7AV5lU3kZmfR1jNAc005SZGhPPONYHBk
nPamUtqGR+hpraewtBHnwRGmiU6SMirobaqgrKyR7tYmslMSCIzOwTA3QEVzF1aLGkraplVw8w7j
aXkbgIO9bdpbyrn/6iWO80nOKfZJCnpJVHo9fc3F/O2nZzQ31nD1x9t0T7l7iHwT9oVJiosqqKsv
p7W7i5qaUlrqGmlo72N2Xkd5diIlre6M+13s7mzT1tRE/9AYja19lNW0MzLQz/SChX+/FsbYlEFb
T8UrMQC/Xeo5Xl5e1n69m/x+bHmOq4yACsvhwR7DJifBrTYSulaI7/7jFdZuo2RsVSt5Us1wPddJ
DMBHRJ2nSlAVF31bVt8iT+Z59ZB3Wp5L5T3/jI7XcdcEPqvffjz3m7CKzCqCeFAZpGorf/7euffl
wXt/79LpfVyk33v+F8lzDhfNU+fpeSA8fIsGoKEwFf/AMCIio3hy8wbfX7nCq1f+3L9+jVt3/YiP
T8D3pR/37z2ivqGTorgYgiOTCPR5QVZ+FmHBz3nsE0VybCJdk1Zsc/1UNI+xY58nIShSG+fjP/+3
70hKz+bp1b/y919v0TGqvoWff4PylrcB2HY5SEqIIausDYvezM4bSuIPD9bJTEoiNiqZyLBYMvIb
WF5aJCEmmSnj20eSLIz1wyc0lv6BIWL9oqktKeLpvbtklDfQ1FxFRHAqBqv7k8S7UAagtqqatq5h
Kht68HsVRE9Hu/dqYgB+o5RxVHFYPcOK82nV2RLM0/OOp84s99apDc4tO72OipfqRUIzsnu7hLTZ
sDnVc3U+PGfnqWlveS87zUXLz0ulj1GddsYtTq0kwHO9xAB8RFRE9GSYWgaj5llmyExOpal35GTc
gkPt2+nZTPQsRzgvUbQ4Oz3P3gXX1W7SMT1vPvl7d9vlLr49w9kMWKEihnKxHtRDpSK0Op/9bQdl
2WkUVTXi2jve2dEh+/tq+3M7fyuqwxjVe9ybzx82PcXMb2Fueo6dg8sf+3TX0B7joFDxU2Xsp/nW
DIA6146GWhaWXcz0NBHy0oeIxFQaahsIfvoY/8BgEpKzqa1vIjM5kdSEJHLT0omNjiMtI4PU5HAi
YuOobOpnsKedvqklnJZxfJ74kpKeTmV+KQF3n3Pv2UsyMnNIjw0lMi2fmXkjVos7nnmH8bRU+MbG
xrQmxL+F/Q0z9e193rMvz+GxszgVVQ9+Y3z3MDE6QnVlFeUlZVSWFGvn5Y2KZ6o1gDpfMQDvloo3
nn5GFOq6ba/bmZ1exLluZ2HubCmPWb/A6pb7/h0d7HNcl1TjovRobWmRiRnDhWPOnE47VbxU6YGq
6+La3iGuW/WC6jYIB9urlOVmkpmRw7TxdWbb3drB5gXd4SwuzJ8Mj350dEB/SzXpaTksLLnTxEPX
KqNjM+xeYHpPh6lkfJ1ew4YYgD8KFQlVBqEZAFWBeHeDksx0Onv6ae4aZNkyR3tvD1EhwdT367Rt
JnrbGRjTMTU8wODQLOMDfbS1dDM+PklfVy313YP0dbTQ2D7C5pqFlo5OHM51OquSeRKcgeqUtb+1
kcb+EVwbRuqb6qitLiImuQz93ARVlTW0tvejm5+iracXs8VES0MbjnVVO/q1CVBcZADcJQKHtJYX
UNvQTlNbF5YlEz29HeRlJJCYW6+ta5zqp7KqnhmdGefmBjMTY9TV11Lf0s3wUBd941NMjw9RV99K
TEgIFR1T2nYzA130Ds8zOzZE38A0k0MDtLV0MTo2yWBPPbWdAwx0tVPfMsDm+jKtHW3YNjbob8zk
oV8iroMjZga7GRjRsWQYo21oknWHmerySoaGx+ju7mdwuJu21hoCQhIYHxuhs2tUMyCqhOT0fTvN
N2UAjs9BndPOjuoSeJfdHScmi1WbZ7fZ2d5yap3PqK541Td7i9mIQzWhdKyws7ePw2ZlbXNL++bo
2c/+3g7mRT2mZfebttVsZFU1vVzfwOlcx7xsd4/pseF853VU92J2dlZ7O56fn9ek+jxfWFhw63ie
txZ0eiwWMzrdgqaT9Y/lvf6ZbRd0J8fQ6Y9/dafm6d6+/dl9LbC4uMjMzAwzM9MsHO/He72JiQmt
pEMMwOXkbQAUjoUx8jIaWTFPkxicSlV1NTrHKobJdh4/D6JvZILO9i6iQkKp65lgYridUb1Ne8aH
Oluo7ezD5VqisbGGxoYyIuMK0M1PU1NRRdfgpNa9tWqN4kk/Fer+eAzA1rEB8CxbN40TGBhDWWE2
eQX1TI51U1tVyN3rL2jtHmBosI/2vj4tbe5q6yIjLp7ohDzmzSpj3iUtNobI8Fjyi+robq+lo7uJ
kNAkZufnaa6torm9H9uKgyWzkf1TYSocXaN/UQzAH8ZpA6DO9mDTRFZOJa51CxFB/tz+6QeuXPuF
776/w/DiBnuudZJ8H/O3K4/xf/mE588j8X/+iHt3fXn+4hUlVYWE+b7guV8MeRnp3PrhR366do0H
T3woKsogIr2CzVUz8ZFpZBWk89IvmOLSLJ69eMHLF/4EBkXS39pJWnQMN374np+uX8PPP5ArP16n
fdj9zfHdBkBZ0T0KsvJZXndSmB7H/WtX+fnqr3z3l58obJ6A3SVS4hLoaWojNDSD+YUp7l+7zbMn
Lwh66cvVv/+JqzducftBEAVZafz1u6v0zNo52N4kM/gFf/nlAQE+T3n6NJygl0+4c9uH589fUVRe
QHSwL49eRJCXlcntH3/SRqe7/+iFdv5hSYXsHe6RFPCIB/decfPHv/Lrjbu88Ammp62b1NBwfJ88
54fv/syPP/2MX3Qu+SmhXLkRiHVdvX254+S3bADUuXm67vX8qhKBfTUWwKEq4fHU9Hd3LqL+ds87
clfgO17H3azu9fKTMQO0BEm1INjTugNWfdy7K/6597e3//buhk9LhdtisWAymb5Iqfb9Kvweqb8v
WkfFLXVNxAC8WxcZgDXDBMUFrey7zFz79+tkFlUQEupLVk46iZnZFGZnc/Xvf+PPvz4jNzWJv/35
33gYlM6Wa4WkyDSyC7N49iqAktJsXvq85MULf/wDQult7yInLhbf4FDaBma0Y13GADiXpnj55CUR
4eGEB4bw8w/f87fvf8YvKJqE6FgeXv2ZH65dw98/iEe373D/fgApScmk57hfrpJD/IjJLKGqvIDc
nDSCwwJ49jyA5899aWzsojIzA7+gQErqutwfAMQAfBrOlABoRQAH9NYUkJGWTpB/GOH+/sQlp5EQ
F0/3uIkN8wKht5/w0C+K9JgYXvmFkxEdzf0HT4mOSyY7LYabt+9S3jrK1HAXIS98iIhPorikmISI
V0SmlbC1sUTgcx8SsnLJzUkhMTmO2Lh4QsNiSU1MoCAjl9TEdKICAolISKG2qpYXt+7SMDivhfnd
BsB9P3XDraSr4XXDYgh8FUBUdCxpGakUV3bA/hqFqbHk55aTGp1CRGgMr15FUlXbRHdnF5mRAcSm
ppNV1MyibhKfR89oHzGwZV8k8t4z7r8KJz02Dh/fUDJjY7l//zFRscnkpMdx++498msHmJ3oJ/SF
D+Ex8RSXlpAc7UdofDa7R/vUpsTy9JkvkYH+xGcWUpibRW5aFskJWXS0dxAb+Ir0gjzSM/Kpys3k
wUM/zGtqHAAxAJ56Huq8PnepcHqfx9coz/1QdXLU32IA3ixvA6Ae2X2nncriVPIqSvEPCCAoKJLM
vFxy02IJjQol4kUUTx++4MHLYIqzswj19yG/vp9dl53Ql6+ITc8mOzuN5OQYYuMTCA2NJSUxgcyU
HIa6m7nv85QVLVm8XAnAqmmK6uYR2F0hzt+foKBgUrLzKS2rpLmjh7r8VAKj4qmtqiPk8X0e+SUw
vzBHRVWrdoyKkirU64p1tpvY6GDikpMJCYkhMT6RtIQ0BgcGeel3n4HF1/XPFGIA/mBURPQMMPOa
A/QLczjUdTnYxmhdYmfHxfqG+1umY8nMsmODzVUH685tnI4VVjdcsLNJqM9D/PLrteFzD9XHqsNd
jGazlm0tmfTakLkqspeVlLPkUPs7wGQ2c6CGu93d53DPhU4Nt7t3qBo+Y7RYtLe75aXlC79peRsA
VbP1dJfNVqMOo80dyVSxqmtnm/XjSllq+F2d0cr+notFvQnXtjuyqbDuOB2YbSvsH5uNbef6SdOx
tWULVvsazrVV1jZcuNZWcahl+9vEBjzlWUYFO/vH53+0j9FsQoXIZjawcty+e9NhZ921y+HuJsZl
1bTrEL1OpzWHUWw4lrBvONlybrBqX2Fl9fXbgkIlHt7flr92A6DkOQfvEcZEn4c8n2fUrxiAi+Ux
AN6Z2O72BpblFWZGeqhr6dPSO9eqGip8hf1tJ0ajGadzQ8usHStWHFt7sLtORWkZi8dpnCqR2TtU
Q4fvcbS/raWlo33NVHcOnDmWQqUfqsTGYwBUBbzXqLTb87H/kE2HhU31wnG0r9WjUiWsy0sWbZ0N
+5JWR0ql5SfbHLzOU9eWjdo5s68swSE2kw7z3BAVde7SgtMUjK7RoxcD8IehMn81+p16YJW0h3hD
RbJtXM5NNjad2jfPzU0nzs1Nbblra0trY+10unA5nVrEcLmcbGg1Wx1sb22xedxlrUoE1DHUMteW
e5/qONr+XU5tVCi1XK2vFe+q46m/NzfY0LZ1jxvt2YcnkVFSkUI1Z/FkdAo1X72FaOeiHdMdVs8+
1DFUxFf7UeO0q/1rYdzewuncPC5iXncvczlPzkOdq+f8ncf73HQ6tXNwr+s6Of+T8KttPee/4Tn/
18fWrp12fZ3ua761pR1Dy9xdW+7lTidO9Sbpcmnt1z33SJ23p6TDw7dgAJQuW/wu+mPl+ZSipsUA
vFnqmqhnUn2T96Rl7ut1nNY6ndpLjUp7VDqgpVFOp/b8qu1UOqXSNddxWqHSUi19OJPGqbTMvc3a
6iqbm64zx1JS6b42yJ361HWwR3LvCsWjqwwubjCwuMmQcZOBxQ0GjU5GLNuMmJ3a9KBxU/sdtW5r
0yMq0zU5GfRsY9hgyOTUtlXTalu1XM1zb7fDgGGNAbWvxQ36Dep4G7TNrxPUsszS+jaH+2IA/jBU
JFAZindb0feR/biduvd8b11mnctIRQ5vPBmk97p/hC57/r9Xp0s9PHwrBuC09vY9Nd7dA4icWXbB
+m69jjNvXuftUvUH1HXU6s0cJ1Za3QLVo9n+gVZvwHsbb71OXdwD6VxGX8K9EwPwbimjpJ5R7zoW
7yNlJLzneS+3Ws/OU8dV90iFQwuPMiXbO1SO2igesFI89LG1RMnQ0uu/B60UDFjR2Z0cHZyNM2IA
BOESfGsGQH0a2nOu097UyOSixd3173EFQDdH7CuDoJo1Hf8q1Gemgc4WOgemTpqkqoRQVYPVKhKi
KgseVwzUft196qui0kNPK4xVh1aiYzLosW9say1o1h0rOLf32d1yYltxt7Xf291hd899bK0YVOtJ
0P2WbJqfoLmpifF5iztoWhPV15+vVMUorcfBUyb38GBfa63wOjyvm6h6RuT71BIDcDmpa+OpXPop
5Mn8PVLmVSvG/5Tyyvw910kMgCC8g2/FALjDv6d9J1QVJBNTc6mpbWPNtaN9flp1ONBNDJKVU866
a515vR7n1iZ6g55F6wrLhjHCgkIIC02gd3gWq2VJK0Y1LZq0YlfTohGHY4Mt1zZbmy6t/sfCwixr
LicWs5XlJT2JsQlM6awkhwTQPGbBtWYlPjqBSaONtsocYhLSyUjPoq1vHNuylQWDga0dJzNT09jX
t+Foh4zYKPJKS4gIS8OyssKyY42dbRcWwwy5WXksWG30dPdgtNpYmJ+jsbqcwvJGzNZlFg3zrLpc
mPXzGCwONtdWMJndJWLe1+uPlDq+GADRh9RnYQBUe2Lrko1lm10k+mO0fCyv+UvLSjbNxb8pzn6N
BkCFW33jVJ9YHKvruFZ0JCflus/XOE5jWx+9bfX4PH7MjZ+uc/9ZCGUlWcQkReEfFMzjx0959CKU
srJSAl68ID63jNG2aq788AthEXHcv/uYtNgE7tx+TGpCJhFBAYSHJ5EaH0tSahRB4cH4PvUlMTGE
5yFxNLa34PvoIWExcRTnJ/A8IJjI+GiiooK5fe8Bv1y5TVJGHklxkcSnxuDjG4D/S1/S8xq1Yv/0
yBDCwsKIiUki7OUdfrj1iKjwEO5cvcntO8+Ijozi3kMfoqJiKMrJ4/mde/ip8CTGkpwaqYUn0DeQ
hPh0gl8+5tHLZNa29lhXlVIvGF71j5CnFY6Kf2IARB9Cn9wAqIR2YnIGi2UJs8UqEn18mdW3uyWs
S6rfecuZZWr+5NQMDsfZLl2/BQOgMhVVx0P19XB0sE1xRioFZY2Up6YSFZlKfGwCUYHB3Lh6lZCo
ZLIyk8nKTuHh00Dy8krJysgmMzWFrIJa7Rt8XVISv/xwk6evQvF78pCwkCge331CUkoMLx8940lA
CPGZaeRmp/JY9eVQUk5JXgrxifGER0ZTWt1E+MvbPA8MIyUhjKc+weRmxnPj+k0CgiKJj43llX8Q
+fmp3Ljnz+j4KDk5ZVpxp2r2OaszkBMTxvWffiU4OpGMpETuX7/KS78QUtPzyM3O5vHDF7Q2tZMd
H09MbCLPnz+noCiLJ48eU9s+TGtNCSEvXnLrvh8mrQKVe/jdP1rqHikDoH7FAIg+lD65AVDf5XT6
xeMewI5rd4tEH1GqCNXTjnx9fU1LTNXfapn6NZktrK5+mwZAXRs1rZ5Ll2OZysIShsdntd4n27vG
mBkapqe/j4mxcRZmh2lsacVoWWLRYGTRsMiiwYDJsqx9Q1+am6WuppHJqTl62juZn5mjo6UD85IF
y6IBvcXG5sYSjQ01TC0ssra2wcxwOzWNTczO6zUTsbW2REdTDY3t3RgXpqiuqmB8Zo6J4T6GxmYx
60ZpaGnDYF7SSi+MRos24IlxcRHX7j4Oq4XZiUE6hsYwzc/T1dnNxOgAQ2PTmCxLWAyzWo9uI6Mj
9PUNYl0y0tpcy8S8Abt9BdvyEuO9fXT1jRxfp/PX7o+QuieqFEBNq/gnBkD0IfRZGIAFneHk7UMk
+thSEf50k0X1t6q960lYF42mb94AqHn7pztGfwuqgpy6Nic6dFeYe9PWarl2JVXFvJNjuCsHnlpL
a0Vwup/9y9Ya8ny+8fSA9qFQPRWqfavfP07uHhXFALyWOu9PLe8wfalS5yIGQPRN6bQBUL8dHR2k
pKRgUJXJtrbEAHwB56BqWdtXHMzNqT70DV+t5uZ1LC0taybgWzcA6nzV5xB1/p9aKhxfw/UXAyD6
5uQxACrSqwFZ0tLSiI2NpaamRjMAqlcwMQDu5nCqaZyn+ZxqEqfmq8xXezN9y4h9nj4EPAMsadOn
plTX2Kp9tPd2l5UaFU3LHJftuFTHTl+pVlfXmZ6Z0673t24AVKar+iBRz9lFz/T76ez22v681nEf
4/W0+lXhUM+8dxi/NIkBEH1zUhFexTeVebu/GxtPBl6RTwDu4YDVG+fsxCh68wou1ya9zc2Mzi9p
53ywq3pAU702nhq+9qRVj7t/gK3NZVpam5nXGagvzaW4tpPF2UniomLoGJtDZ5hnfVcNMPTuTn0u
kioeV3WHVK9tXzPqWs4v6LXOj75lA6BMp4qb6vk9jXtwsg/LZT41ecLi3d7/S5MYANE3J48BOOm2
eNPTTbHUAfAYAEVtcS49E2amB6r513/8ia6RMVrbGkmKjyIgPJnW1jYqaqooq25iYdFIT2sl7aPz
WgLa21xFeHQSBbk5xISE0tndS2JkMmMT02SlZVNUWkpDaxe25dc9pv0WeQyA6vb5a0b1ySAG4LUB
UFIc7bvITU4gNTWJwqo+78t2gtVkwrV3xKrNytLK67jiqR/iMM7SPTTnnrmzSk56PqunfK1icWqA
qsZetvfcdV0U6h6otON94u7nJDEAom9Opw3A6yI+t8QAvDYADeVFzJg36alI5spdf2L8nvH9zz/z
/Y83SUrP5sm9hzx/FUBgSBQ+9+/y3Z//xN1XcewcHFBVlUdOQSnNnUOM9bcR4OeHT2C6tt/ytDxK
yoooqKpnZ8fdc593eN4lMQDftgFg10FEQCjFxbmkJedRUZRIYmE11UW5ZOc30t9SQnhCDL/+coNB
4wZNebGEJhbQWJ5MRk2zNqCaaaqV50/uEZNRSE5mDD4vnvDkRTKTfY2EhyfQ0DGK3WYlOy6E/8//
959pn3KXgCnEALwFMQCiz1liAM7L2wCoc+2szCUgLIbQ4AASs6rpqC4iKDSSnPxckmLjCItKorKm
idqaOnJTkggL9CW3tpvDoyOt/XxqVjG1dbVk5qYQl1FAVVEJIQFhZFR2MtzVQGlVAzbb+yWiYgC+
cQOw4yAyOIKS/ByCXvrwy1/+wuOXgYT4+/Lw9n2+/7c/8/jhfa7d9ce2c8hYZyPxsfGUFmeTmJ6F
dWOT4uwUKuoqufKXv/DrtdvcunmXjOJ6atOT+Ntf/8ZPdyIZHe7jwfXrXL/nj87uziQVYgDeghgA
0ecsMQDndcYAHJ/DtmsDvW4Bk9XG9o7KdPe05pLOLRerKytaf/3qvFXFSa2Wut2Kfd2p9Z1vM83Q
NzalfeM3L+pZ2VDf6g9YNOi1EoLxoR5tqGaX0/Ve18xjANRQq18zathrMQDnDcDRzhrtncPadHdN
FXmZyZS29NBdWUZsQjr15QXklFdRUVLIyNwSdv0QZSVllObHkFbSyO7BIVO9dQQEvKK8soqCnHTK
GloYGpmgISuHkKgUcnOKiAmPJyenkMzUVAYmF+UTgBgA0ZcuMQDndZEB8JQEqMxWda6jBs5R560S
Pc+AJ2pdj1TG7xm9T7XvV9tp809aDBxvv7fL/vFgPO97vVTrApUxGhZNrKysfrVSPaSqVgDqm7UY
APcw5Z8DnrCIAbgAMQCiz1liAM7rIgPwOUuFUY3Rrppsqp4bv1Z5mqSqjOZbNgBKqhngyfC82jC8
7mn3kLxvl2f9k78vuZ23Tg8D7Omi+UuWGADRNycxAOf1pRkAlfh67sHXjop36py/dQOgzlfdd+/n
+VNIPe9fw/UXAyD65iQG4Ly+NAPg6RlvZGSE0dFRxsbGvjiNj48zMTnJxMSEJu/l6ryGh4e1Tmek
J8DXUqUhn1pfy7UXAyD65iQG4Ly+NAOgUJmk6slR3cetLXcCdnCwi8vp1OZdLBc7O9vn1tlS93DL
dcH6r7WrOp05UmmWqu+g6jfsa5X0VAW9/eMxAtSgZt7bXSQVb1SGbjYZsZhNLKnKlResZ7PZGBwc
1OKeGADRh5YYANE3JzEA53WRAThdwO49Cp77Lci9nVZB8Hgf+1rXwRdfA0/3wApPN8Du7X97RSp1
L9QbtKdW+P7OJvkZ2XT1m06F+mK2ti5oOXCwy/bu6/BdxPx4L3Hpmej0JnKi0xgZnqG2qpDK1k5G
u9vIzy9hxfX2fXg4ODygvamBhppq6qqrKC8qYW562ns17VxVKYcYANHHkBgA0TcnMQDn5W0AVKa8
ODVIZlY2RZVtbB3na0fHo/OpzF+bPNrH6fJkqIdsb22xsXm+bb56Y95as5CflkZBeT2bu54uXA+0
Joav11MtDN5tCDwGQF1zhXGii1cBwcSlpuPw6sntLHt0NDYyPm9h1W6ho7mRwoIyGpu6WDA7vFc+
g81ho6MhjzuPH1Nd30hBfhaLy2by04N5cOcZgVGprG5frmva7e0tutpatbg2PjVHW8cAg319dPRP
k17YTGvPuLaeKq0QAyD6WBIDIPrmJAbgvM4YgOOeAOvyU0jKKSUuIp6+oRF6h4awWC0MdHcRFRRM
RUsv1RVl9I5M0tfRQl5aIgFhCYxNzTHU18zg7BwTQ93UN/eycwTmyU6i43NpLM+nsrqNsaEBqotz
iUwqxmado3N4ghX7CkvWlXeWCngbgP3dLVqbyrjn+xzHW/PgfZKCfIjNaWa0s4K///iYirJiblx5
QO/0657eLmLLbqK6vIqyyiJ6hgepra9guLefhpYOJiZnKc6Mp6zD3Tb9XezubNPW1MTA0BiNrX1U
1HYwOjTIwLiO//RnH7oG3KUBKl6JARB9LIkBEH1zEgNwXhcZgMbCVHx8gwiPiMb34T3++svP+PkF
cu/6NW7e9iEmNo7nT17y9OkLqqoayQoPwy80nojgQDJyUggLe8WTF6FEh8fSN7PM8lw/1e2THKwZ
SAmPJej5A/7Lf/uO2ORMXt3+gb/8fIOOUQPOza13XkdvA7DtXCE5OYakvFrMBgs7b2ogcOQiJymR
8NAEwoMjiE2tYMmqJzQwgjH9ivfaZ8iPfMmzoBj6+vuIfBVBZX4O927cILOiiebWGiKDkpjW27w3
uxBlAOpraunsH6emZYCgoEitRECh+lPwIAZA9DElBkD0zUkMwHldZABaaiqYNq0x1lrF83sPCIlJ
oKK0Ev+H93nxyp+4xEwqq2qJiwjXBvgpSEsnOjJWG1o5NTWasIhwCmu66e9qoWvcyoZxBJ/ngWRl
pZOfkoPvrSdcvfuQtPQs4oJ8CE3IZHLOhM327g5W1L1QlQBVmD3suI5HBjz+THERe+tGympbtU8Y
W1vn06a3cXiwy8b6GgdHsL3m0gZA3Nt2srbhVAvZumTxv4fB3l7KS8spKigmNyMd56lz8aA+naiW
AGIARB9DYgBE35zEAJzXGQNw3LOfc3MD1/YOO1tbbK7bmZ5fYGNjE4POwKrDhslkYWPTyc62i9mp
cYzWJSzGRTa3tjHqZzHbVrU6ASpjc27taMX002MjTC2Y4eiA+alJTNYlbMs2HCtWZvRGNjc2WXW8
uyWCYmpqSms+p4ZzVlIdtJjNJm1oZ8+88zJpzeo8Hbp41ldDQZtM3uueldns7gBGbaM6llHbWCxW
rNp+1LTquOf8dhdJHVOtPzM9zfTUJHqDQduH93qzs7NSAiD6aBIDIPrmJAbgvLwNgJr3uqa/qpjn
Pl81T6HOX3XH62kX7ZmnBgJS3f6qS6XGAVAtArR1tFYEx2nB0aHWrbA2qXU1fKh1F6w2Usd+UysC
7/CqMQh0Oh0LCwtfpFTYVcZvMBjQ6/Xnlnuk7ou6hmIARB9aYgBE35zEAJzXaQPg6ejkc5fHeHzt
eMZdEAMg+tBScUgMgOibkhiA81LhVueiOp5R5yH6/KTujbpPYgBEH0piAETfnFSEFwNwsTznIvq8
pD53qH7wVfxSpTRiAEQfQmIARN+cxAD8Nr3tnDzF8d7zf48+xj4/tvYumHdm+Qc6HzEAog8pMQCi
b05iAC4nVTFPO+OjI3YuWK6WHaqe+44Oz2WAqttfVUnw7DZ72jXUKg8eXyd3pcHX10xVNlR/72t9
7J9tCnhweOSep/rgPzw4Po6qB6AqErr/fqP29ji8IJyX0x5HHGnbqj7/T8K7pyo7uuPE6XNQcp//
wUllx5PeDdU2x+G9KCzamAJv6QlRDIDoQ0oMgOibkxiAN8vz9q3Ob2xwkMmpScoqy7ig93z0o32E
+AVSUN3mvQinzUBHz4T3bG3QG7NlGeeOu2/h4Z5O9Lbj9vtHh+jHugmPjCUqJp2F5eP5x6w7lnFs
qiaAe9hX3GMAcLCDSTXts7+5G181WM/BrpP+gV42z3XV776n78JiMqM23XGusX6cpu1vLtHbP0Fv
Vy3d4/oz62/aF2lpH2J3d4uJnk6KK5qPl+xhNppYsl0c3vnpIeYsK1oLCs+98JYYANGHkhgA0Tcn
MQAXS31jVuevnd/REW2lafz3f/o7LaPTtFVmEJuRQ0vvCJOjwyzZl8hJTmXGuo5tfpys9FyK8lOJ
zy1mamqAUN/7hCTlU1GUQm5lPcU52WSlpXHn5l3SipuYHOgkKSGFpORs0pJTyciuYv8QhlvKCInN
IC0piaqKSpLTEmnu7CU/I5MXqjOiuEyS42MoqKinpjiH6EB/rt1+QkNbN/UVGeRUV1NfVUp8Ui5d
rW3Ex6RicezjMIySX1RBXXEO+WWtVBcVkJKUx9DELAMtVUQnJpOUkU11XSN5uZnEpaRT3z5Ib2sJ
CemJ3L79gJyiMoLDYmhqaSY1Lome7i6eXvmZRxGZmAyjxCfFkl1Wx/TMPK0VOWQWt7PjNHP13/6N
iOQSGmtyiE2I5ubtxxSVVZORmUF8ShpVzb0MdpQTlVHAcH8X5bWN7B0caPdB3Q/PPVHxVQyA6ENK
DIDom5MYgPNS4VbnbrfbTwxAY14iv1x7QGp8NL/86d+4/eAlgUGveBmeytrGGplJqZhcRywOthLq
F8TtH/7K3QcPuffYh5r6am7/9D1///5nbl6/TnBsHiXp0dx+GEB6ZhbJ4bFc+f57frz1goiAF1y9
/hzD2h4T7RUEhsaTkhTPvV+v8fO1G7x6FcCz+7e5cv058YmpRIVGcP/2bYqr2uguLyIkIpHgV89J
SMskPTmEaw/CqKkqx+/pc679dI32MRNL8z2kZGeT8PI5f/nlLr4vHvP4gT+B4QE8fPwMP/9QYmIT
eP74Cc98gomOiSfU348///O/cuf2bR77hJEUn0RwYCg3bzygu2uMifYmnty5TVhCCn53b/HL9Vv4
+wfxzNeXnLx8Suv62LTN8MtPt0lPSuCX7/7CjVu38I9IIcL/FY+eBWjHiQgJ5s//+C9cu/2IhsZG
8ivK2No70DJ6dS88Uq0A1L3yGIMvNa6JPh+JARB9cxIDcF4eA6DOTbU7V+c62N2FzmCiJCuR6Mhw
ipv6KCuKI7awRjv32f4OQnzDiYtMpr1vjLbyTJLyK2hvqSHQ7xlZOXlkpyaQU1pB9+AkkyNdxEVF
kV1QQnZUCgGvAglPyaM2L48A/whsm9vMj/UzaXCwbpohOzGB+OQU2rsHSA0JISo2huTkLJrbu2io
riQ9PprM9BwykpIoKqsiPzOKuLR0alv6mZuboiK3iJCXvvTN2dld0xMdFE70q1BCE3MoSEokJbuI
mIQgsstraW9upbOri6L8PMprmujs6KCxvpH81AQySysozc8iPbeM1vZOygtziQ6NpLGhlb6ROeYn
eggLDiY+KY3hySF8gn1ZMOqJ8vcjKjKC8OgMRsfGKUiOpqC2loLMNBKSM6iobqKzs5PGxmYK0hJJ
yi+nv7OVqvoW7fqeLvZX90TFL3WvxACIPpTEAIi+OYkBOC+PATjTE6D6dn7g/miudQ60vU5jQy3m
1S2tUpti27nJ7rFhODzcx7XlTki2j393d7fZUZX2VGc2xxX73BXk9tk6TnRUBTpVmc/zq3oCVOso
VPM3VRlRhUd9r1cV5zxh2tnZYud4O9U/v+ptcG/vQKtLoPajvqOrSnhaxcK9LWbnp3BsurTtVXi2
Vk3UNDSxdXDEkeqNUM1XvRkeus9b3W51TlvbO+5Ke8d1I7T7vuViT9tmXystUWFTFSX1UwM09Yxo
NQt2t11sbDi15er6qF4Vt3f3ODyu5HhyTG25O6yGhSlM9lWtN0Xv+yMdAYk+tMQAiL45iQE4r4sM
gPdyT43207XUPW+o7r9fT5/+Pb0/99/uWvne097H9N6f9748Gbn6VRmm9nvg7ppYk2qhcNyLnkpn
tLBrmbuav6+1KvCcj2cbbb5n+5N9vt7mzPxz66ka/m68tz29zsmv9/aeng21LpbdPR16jqvOWwyA
6ENLxSExAKJvSmIAzkuF+20G4HOTyhSXlmxMTc8xv6D/ajUzM68NuqQMghgA0YeWGADRNycxAOd1
kQHwtNFXxdXas3o8Xyu+Vsve0l7d88at1tMKyI+vnfsv98BBlxn0501Sb/Iqg3SsrmnF/V+rnE4X
M7PzWkmHGADRh5YYANE3JzEA53XGAOyrjnYOGRvoYUZvY3PDQX1JGYNzVu2ct53rmM1W1jfdiYY3
6pv7pmOR8ooKRscmKctOIb+yhcmBXkIDg6ntGWFyehz71p77O/0F4XmXlAHQ6Rdxus72FfC1oUZi
VEZHDIDoY0gMgOibkxiA8/I2AIq64lx6Jy2MdRXzj//wAx39vRQW5xDk/4qXgbFUV1aRkaNqx5cy
NjlFVXEKJa1DqE/rHfVlRMelabXqE8Ij6OzqJi4iBcuynfy0LAqLirXa7kvWNe1bt3d43iWPAdh0
us7cp68NVQ9CDIDoY0kMgOibkxiA87rIANSXFjCuX6G9OIFbT0KJ8nnMT1eu8cuVe6Rl5vz/27v3
pijPPI/DL3P/2ReQmdqdra2aY1I7SWaSONFojKdoEkVFNGpGMRrPiHiOiYLG8xkVOSsohxY0v637
wTba4GhGSKDv66r6VLDToEDz9Jem6Y533no75s5fEkuWLo8P/vLHeOON38bf5q2I0qNHsWvXpti4
eWs0Hm4ufv1v9j9mxT/m1hY/ANhS+1Xs2Lk16vfsj9HRyocLfrUMAANAr58BoOwyAMZXOQDS+3pi
39cxd8GSWLR4Uazfsj9OHWmIpZ+viG07vom6mpVRs2Zj7Gs6Ek37D8TOLfWx8rNF8fXBluK+A8ca
vom6Ddvi4MGmqF37Rayp3x3HGhvi49nzY3NTS5z+dl/s2NMUHR133QLwLxgAmsoMAGWXATC+5wZA
+c5+Iw/j3t3euD8wVFzhpifxuf/gfow8Go3h4aHicQLKv8aWDA0NxOBwqbiT4L3u1jh37UZx+oO+
vhh6OPakPf39fempcOLS+dPR3TcQpeHhcf+WV6k8AIZL6fEBqtfjxz8aAJqyDABllwEwvokGQPr9
/OIKvvz7+sW9+8d+J72ysbcx9v+K8xUPdPPTM/Y9Pf3Jd/uVzwL4c0tjJB030pVjR0dX1XbzZlvx
3ALpQYMMAE12BoCyywAY34QDYBqX/o3pV+TSYwF0dlVxnV1x/8GDYjgZAJrsDABllwEwvpk2ANIz
F6YfAyTp81KtJemylt5nA0CTnQGg7DIAxjfTBkB6ZLyurq5obm6O06dPxw8//PDLdmaC035m586d
i/MXLjztzJkzz/3/9H6l96+tra24vBkAmuwMAGWXATC+mTYAknSF2dnZWdw8nu4sV1a+Y+KLSp59
HP7i9dN33I9/ulPjRKVnB3pyEYjHI08e9/+5vzfdH2L8672ou729cfPG9bjdeiPabt0sLkOV50mf
j5aWluKyZwBosjMAlF0GwPgmGgA/XbX99DDA5dKj/RXPvlc8G9/YHfvKjyD4oocIHhkd+5gl5fMU
r/Po5z8aYPpcpO+g0+csGervitVfrIymw1fip79lIo+jr+9B5YkxWhqMB4P/+jcKzrccjsXLV0TL
6XOxav7n8e3Rk7Ft6/rYtHtPHNq9I9au+2f0DIz9WOJl0sf4QMPeaNrXEPv27Ilt9Vvj/NkzlWcr
ftSRbg0wADQVGQDKLgNgfM8NgCfPTne55XCsWLk61n61K+5XfBkPpl8HTB+CxyM/PSTw45Hou3cv
7k1wBZvutf+gpzVWfro0atfXR8/T13kYff0DT89Xfqa8yn9fZeUBkD7myZ1L38f8RYvj01U10Vt6
+uYmMBL7d26P787eiK6267Ftc33Urv4ytm7bF1dv91ae+TkDpcE4dfjr+Mu778ah49/Flq+/insD
fVG/bmG89+5HMf+z1dE9MPHDI1dKv0Z5/MjhuHnrdpy9cDUOHW2O0ydPRsPhH+LDJZti1/6TxflK
pWEDQFOWAaDsMgDGVzkAkoZNtbFyw9aoWVYTR44ejR0NDXHx4sVo2LEzPnrvg9i4vTHWr1sXB4+f
jP07t0XN4k/ivdmLo/n02TjUuCUOtLTEsaY9sWlLQzwY/THazh+L1et3RfOhXbFt27442rQv1q38
Ij5etj5uXPo+tjYejjt3OuNOW3dx83flv/HZKgfAo9HhOHJwR7w958O4O/6Q84zRWPXJh7G0riG+
b6qP//rfWXHoQEP8/n/ejOMXx57r4EW6rp6J+vodsa9xZxw4dix2794ajbsbovHIibhyvTW2b1xV
PBDSq3hYGo7DTU1x8tTZ2H/oRHyz+0j80HwyrrR2xm/eXBrnr9wqzpcuVwaApioDQNllAIxvogHQ
WL8mPv5kSSxduiz+/uc/xe/+8IeYM2devP2nP8abf50bNTUrY+7sefHX/3snGvcfj69rlsfCZavj
4w9nxYbNG2Lxglnx9zmfRe2KVXHsfEd0Xz0Z25vOxHDX1aj5ZGnMf//d+I//fCNWrd0Y7//ht/Hf
v38rjp29FaXh0ks/jpUDYHjwbqyq+Tw27jga7a13ovSCW+Ifj/bFupWrYsXntbFsyfLYsKUpujpv
xeoVdXGpbextvciW5fNizqIv4mTLqVg+7/PYt21rzHrn7fhye2M0HdgVny6oi9ud/ZWvNqE0APbu
3B2Hjp2KnfuOx0ezP47vjh2tPJsBoCnNAFB2GQDjqxwA6X09tr8hbnQPxdUTB2LxRx/F0lV1sX9f
Uyz84P2Yv2Bh1KzeGA2NB2JDXW3UrlgZG+vWxvLPlse69etjzerFsXRFTew+2Bwt3x+Nk5e6YqD9
XMx+b06srlsbu+u3x/y/zop3/jEnvlz/VXy5YkksW7s5Ll+7He3tPa90C0C6E2D6HP4co/fbo+lY
c+XJr+XZ+0r8HBfOno29u3bHjm3bY8/2b4rPQaV0OUu/DWAAaCoyAJRdBsD4nhsAT96HdAe00pP/
N/JwKDo6u4rT0hVRqTQYfX39USqNPSxvV8ed6BsYiPt99+Lh6KPo6+2O+4PDxR0Fy28nvdx553a0
94x9l9zd0R79AwMx8OBBDA7ej86euzE8NBQP7g+89OOYPhdXrlwprhyvXr1adO3ataeVT6ssPXJg
+522uF5x3n/1OhO9/evXrz/355f9vZWl8968eTMuX74cly9fKt5eqvJ86VaOlAGgqcgAUHYZAOMr
D4D0vqU74qU/P/tY/+m09HC06eXiYXwfPX56j//0NZxOS/fmL5+Wfi0v/fnZX2kr37JQfjvp5bHz
pzv+pYcOHju9OO8EDzf8bOXzpF8DbG9vn5F1dHQU//5y6c8TnScNqPQxMgA02RkAyi4DYHzp350+
Ht3d3eM+XtOx8uctfb6qvXSrTHpf0+cmfZ4MAE1WBoCya6oGQHr9V/nudTqX3o+hoSFNw9ItAeny
ZQBoskqXIQNAWTVVA6Cnp6d4m5Xfwc2k0r9f07t0OUufKwNAr5sBoOyaigGQvpjS6enmWmmqS7cG
VB7MpZ+bAaDsmqoBkL6YZvqPADT9e9mvSEqvWro8GQDKqskeAOm7scqDtCRN99KYNACUVZM5ANLb
SK+XTpOkmVQ63qX7lBgAyqbJHABpQadbASrvsS1JM6F05Z8eZyIxAFT1TcYAAKhGEx3fDABVTa87
ANL50utWLmlJmsmlWzPT8a2SAaCq6XUHQLrZP32xlH//X5KqoXRcS8e3SgaAqqbXHQAAOTEAVDUZ
AACvzgBQ1TSZA+DHkcG4dv3WS58TfmR07LcGAGYaA0BV02QMgOIpbNPT1/bfirq1WyNdvbdfa4lv
z16K0VJ37Gtqirae3vih+WAcPH4iTpw4FccOHYzLt3qj5/aZaDjyfQyORvEUuGNPhytJv34TfaNj
AKhqet0BkF4uzjswECP3bsbmbYfTYwJG/brlUbuhNj5Z8mls2fpVfPD+h/HNzk2xcP6CeOvNv8cX
K9bE5wsXxZr1tVGzui5OXb8XpdJw8fbS3ytJv2bl55qoZACoapqMAVB++fFQVyyeOz82fb0lald+
GrUbNsbadeti5fJl8eHcBVH/zzXx3vsfxN8+WBQXbrTF3i3ro3bNqpg3b2E037j33N8B8GtLx7dK
BoCqpskYAOVHAkzaW6/EmQtXorvrdtzuvBcdF76L3/z+z9F46lLM/+CtmFvfFAMPBmJkZDRGHz2K
7XWfxRvvfRI9g2OPvgUwHaRjnAGgqm6yB0Clx6OjMfp47Lylh+Mv/6MPH1aeBPCrMwBU9U3mAEin
lUoVT7P59ClbR2IkPT3ww5GKp+Ace8rgyqfmlKSpatxx6pnTHz85thkAqvomcwC03rwdly5fKy7D
kjRdu9F6a9xpqctXxo5fiQGgqm+yB0BfX3/xepI0XUvf7ZdfTse+gYGxl9PxLI2DxABQ1TeZA+Dm
rbbo7b077u+QpOlUepz/9N/0a37lK/7053QMTN/IJAaAqj4DQFJupQGQrvzTMW/v3r1x8eLFp8dA
A0DZZABIyq00ANIx7/Dhw7FgwYKoq6uLjo6O6O+/bwAonwwASblVvgXg9OnT8e233xa1tbUVpxkA
yiYDQFJule8DMDg4GMPDw8Wf07HMjwCUVQaApNwqD4DKDABllQEgKbcMAMkAkJRhBoBkAEjKMANA
MgAkZZgBIBkAkjLMAJAMAEkZZgBIBoCkDDMAJANAUoYZAJIBICnDDADJAJCUYQaAZABIyjADQDIA
JGWYASAZAJIyzACQDABJGWYASAaApAwzACQDQFKGGQCSASApwwwAyQCQlGEGgGQASMowA0AyACRl
mAEgGQCSMswAkAwASRlmAEgGgKQMMwAkA0BShhkAkgEgKcMMAMkAkJRhBoBkAEjKMANAMgAkZZgB
IBkAkjLMAJAMAEkZZgBIBoCkDDMAJANAUoYZAJIBICnDDADJAJCUYQaAZABIyjADQDIAJGWYASAZ
AJIyzACQDABJGWYASAaApAwzACQDQFKGGQCSASApwwwAyQCQlGEGgGQASMowA0AyACRlmAEgGQCS
MswAkAwASRlmAEgGgKQMMwAkA0BShhkAkgEgKcMMAMkAkJRhBoBkAEjKMANAMgAkZZgBIBkAkjLM
AJAMAEkZZgBIBoCkDDMAJANAUoYZAJIBICnDDADJAJCUYQaAZABIyjADQDIAJGWYASAZAJIyzACQ
DABJGWYASAaApAwzACQDQFKGGQCSASApwwwAyQCQlGEGgGQASMowA0AyACRlmAEgGQCSMswAkAwA
SRlmAEgGgKQMMwAkA0BShhkAkgEgKcMMAMkAkJRhBoBUMQDSn9MXRmpwcNAAkFSVlQdAOu6Vj3n9
/f0GgPKqPADSF0B7e3u0tLQUnTt3rvjiMAAkVVvlK/zz588Xx7vm5ubi+JdOMwCUTeUBMDw8XHwB
rFmzJhYuXBiNjY3Fabdu3zEAJFVVaQCkb3AOHDhQHO9qa2vjzp07xfHMAFA2PfsjgFT6zn/79u3R
09NT/BjALQCSqq00ANKxq7e3tzjenT17tjje+RGAsqryToDp8phKN4W5D4CkamzsPgD3iuNc+ZiX
Tv/VB8DlK9ee3hlBmuru3r0b/f1jXwDp5XRlX/5CSKenQXr37r0XXmafHQDpvN3dPeP+DkmaTpW/
4UmNHe/GjnnpFoGr11uL49kvPgDSf2+03ioOpK2tt6VfqFtPev70dFm8cuV6cV+AF11mnx0AnZ3d
ceXqjXFvR5KmU+nYVnla6uq1G9He0fn0+vgXGQAwk1QOgPLLANVkouvnSR0A6WaH9POIUqkkTfvS
rQHpMlu+0k83n6U7z1SeT5Jmcul6OR3rKk3qAHj48GFxAJVmSumLw+VXUrWXjm+VJnUAAAAzgwEA
ABkyAAAgQ//2AOgfMgAAYKb6twbAuVv342rHQPHKkiRp5nXpzoO41Fl6tQGw5NPPNveORFzuLMWl
jlKxHCRJ0swrXZdfv/tjnLve+fIBMGvW7N2tHX3FWpAkSTO7c9c647uWCy8fAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFCF/h+LyZPo
ztfM3wAAAABJRU5ErkJggg==</Preview>
  <Form>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
AA==</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	Load-DefaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}

$btnUpdate_Click = {
	try
	{
		# Null checks for all controls
		if (-not $txtDefaultPolicyDisplayName) { Show-MsgBox -Prompt "Display Name control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $txtDefaultPolicyDescription) { Show-MsgBox -Prompt "Description control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $chkEnabled) { Show-MsgBox -Prompt "Enabled checkbox not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $txtPwdLifetime) { Show-MsgBox -Prompt "Password Lifetime control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $dtpPwdDate) { Show-MsgBox -Prompt "Password Restriction Date control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $dtpCustomPasswordDate) { Show-MsgBox -Prompt "Custom Password Restriction Date control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $dtpSymmetricKeyDate) { Show-MsgBox -Prompt "Symmetric Key Restriction Date control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $txtKeyLifetime) { Show-MsgBox -Prompt "Key Lifetime control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		if (-not $dtpKeyDate) { Show-MsgBox -Prompt "Key Restriction Date control not found." -Title "Error" -Icon Critical -BoxType OKOnly; return }
		
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		# Convert to ISO 8601 if needed
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		Write-Log -Level INFO -Message "pwdLifetimeInput after trim: '$pwdLifetimeInput'"
		Write-Log -Level INFO -Message "pwdLifetime = $pwdLifetime"
		
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			[System.Windows.Forms.MessageBox]::Show("Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D).", "Input Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# passwordAddition
		$passwordCredentials += @{
			restrictionType					    = "passwordAddition"
			maxLifetime						    = $null
			restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
			state							    = "enabled"
		}
		
		# customPasswordAddition
		$passwordCredentials += @{
			restrictionType					    = "customPasswordAddition"
			maxLifetime						    = $null
			restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
			state							    = "enabled"
		}
		
		# symmetricKeyAddition
		$passwordCredentials += @{
			restrictionType					    = "symmetricKeyAddition"
			maxLifetime						    = $null
			restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
			state							    = "enabled"
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		# Convert to ISO 8601 if needed
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			[System.Windows.Forms.MessageBox]::Show("Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D).", "Input Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		try
		{
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop
			[System.Windows.Forms.MessageBox]::Show("Policy updated successfully.", "Policy Update",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Error updating policy: $($_.Exception.Message)", "Policy Update Error",
				[System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
	}
	catch
	{
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		Load-DefaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>