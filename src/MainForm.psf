<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAALblSURBVHhe7P1Xb2Pbwq6JnUujf8cB2le24fZF
20Ab9rUBAwYMuM/p7i+evb+1916p1qqcg6pKpVLOOVE555xzzoGiEkkxSaQiSZGKjzEmRZXEklRS
paWqNR7hBadmGDOP8c4R/9N/kkgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQS
iUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJ
RCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolE
IpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKR
SCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFI
JBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgk
EolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQS
iUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJ
RCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolE
IpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCT/6T/9
p7v/+//+vy9+7f+2OCIytjg0LFpKSkpKSkrqG1R0bFLxjRu/F/93/93/rtg3sX+P//yf/3N9dlE1
47p1xrXrjC2uSklJSUlJSX2DmhBp+aKN+w+f4pvev8dr/6DiCf0GrSMLtAzN0TI8LyUlJSUlJXWW
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
PMo03JEAAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $global:ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formEntraIDApplicationMa.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Retrieve the application ID from the textbox
		$appId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($appId))
		{
			Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned secrets" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Application"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-CustomAppManagementPolicyToApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Set-DefaultPolicyInputsFromConfig
{
	param (
		$policy # The policy object returned from the tenant
	)
	
	# Helper to extract a restriction by type
	function Get-Restriction ($restrictions, $type)
	{
		if ($restrictions)
		{
			return $restrictions | Where-Object { $_.restrictionType -eq $type }
		}
		return $null
	}
	
	$appRestrictions = $policy.applicationRestrictions
	$pwdCreds = $appRestrictions.passwordCredentials
	$keyCreds = $appRestrictions.keyCredentials
	
	<# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$txtPwdLifetime.Text = ($pwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpPwdDate.Value = [datetime]::Parse($pwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	#>
	
	# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$maxLifetime = $pwdLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtPwdLifetime.Text = $matches[1] # just the number of days
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtPwdLifetime.Text = $maxLifetime # keep as ISO 8601 if not just days
			}
			else
			{
				$txtPwdLifetime.Text = "" # fallback for invalid/unsupported formats
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtPwdLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtPwdLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $pwdLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpPwdDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpPwdDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					# fallback to today if parsing fails
					$dtpPwdDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpPwdDate.Value = [datetime]::Now
		}
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	
	<# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$txtSymmetricKeyLifetime.Text = ($symKeyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpSymmetricKeyDate.Value = [datetime]::Parse($symKeyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Symmetric Key Lifetime
	
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$maxLifetime = $symKeyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtSymmetricKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtSymmetricKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtSymmetricKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtSymmetricKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtSymmetricKeyLifetime.Text = ""
		}
		$dateValue = $symKeyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpSymmetricKeyDate.Value = $dateValue
			}
			else
			{
				try { $dtpSymmetricKeyDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpSymmetricKeyDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpSymmetricKeyDate.Value = [datetime]::Now
		}
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	
	
	<# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$txtCustomPasswordLifetime.Text = ($item.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpCustomPasswordDate.Value = [datetime]::Parse($item.restrictForAppsCreatedAfterDateTime)
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	#>
	
	# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$maxLifetime = $item.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				#$txtCustomPasswordLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				#$txtCustomPasswordLifetime.Text = $maxLifetime
			}
			else
			{
				#$txtCustomPasswordLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			#$txtCustomPasswordLifetime.Text = $maxLifetime.Days
		}
		else
		{
			#$txtCustomPasswordLifetime.Text = ""
		}
		$dateValue = $item.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpCustomPasswordDate.Value = $dateValue
			}
			else
			{
				try { $dtpCustomPasswordDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpCustomPasswordDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpCustomPasswordDate.Value = [datetime]::Now
		}
		$chkCustomPasswordLifetimeEnabledAddToPolicy.Checked = $true
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
		$chkCustomPasswordLifetimeEnabledAddToPolicy.Checked = $false
	}
	
	<# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$txtKeyLifetime.Text = ($keyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpKeyDate.Value = [datetime]::Parse($keyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$maxLifetime = $keyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtKeyLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $keyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpKeyDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpKeyDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					$dtpKeyDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpKeyDate.Value = [datetime]::Now
		}
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
}

function Convert-TimeSpanToIsoDuration
{
	param ([string]$input)
	if ($input -match '^(\d+)\.(\d{2}):(\d{2}):(\d{2})$')
	{
		# e.g. 1.00:00:00 => P1D
		return "P$($matches[1])D"
	}
	return $input
}

<#
function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}
#>

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkPwdLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
				
		# customPasswordLifetime
		<#$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		#>
		#if ($customPwdLifetime)
		if ($chkCustomPasswordLifetimeEnabledAddToPolicy.Checked)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $null
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		
		if ($symmetricKeyLifetime)
		#if ($chkSymmetricKeyLifetimeEnabledAddToPolicy.Checked)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
				
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			# Log 
			
			Write-Log -Level INFO -Message "Calling Graph to update policy..."
			
			# Do task
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			# Optionally refresh the UI
			Load-CurrentDefaultApplicationPolicy
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		$defaultPolicy = Load-CurrentDefaultApplicationPolicy
		Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:GitHubRepoURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website $global:GitHubRepoURL"
	
}

]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>