<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>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
vzTfJHhTJSU1Kk1J0o3Lt/T953/UF19+ps9P31JJYbY+/eMX6h2fV1tlniKi45WXGafIxBT5dw5U
mRGpU99c0bXvvtHnX32hC9fu6erp7/TJF5/r7IVrys4tleNJim6HPVb0zbP65IsvdfHabWVnJyg8
Md+arq7qTJ05e04/nLmgpJR8xcTc0c2QJGXmpujC5eu6dvW2omPiVVfRpHZHib777K/6hz9+o4TU
TN2/c0c5+em6c/uKboc+VMzDePWOL2p94+e3iLwtwQXA6K4tVW3bmMYHWpWdX6KwG6f15fff6k9f
XNDipjQ10Kioe+GKe5ig9gGnOutKdP3yNX3/w0WFhYbq2zPf6Oa9SIWF3tf9m1etxy2YSVqb0dXv
TunBo0zdvnxRacn5unnxgiKjMpSTlarYuHu6dvu+7t66o7j4TGXEh+mz0+eUlZ+rqLvndDW2SPt7
Wwq//KNi4vIUd++sTl25q4K8LD1++EjxD2N19/Z9XTz3jU59/61OnQtRZtJDnb0QpaX1HauoUAAA
2N17LwBdtUWqbOlXc0WmLn//o27cuq+kyEid/v5HhYY9VE5Wki5fOKu43CZNjffq1rmLCrkXrozs
bKXEhelOWLSWdw/UUZKhH384rztXr+lB9GM9SU/Tk+QnehKXpJLKBqVH3lbk4yTFPkpQeWGJLn79
jeoGZjQ92KT4R/HKSI1QVFK2lnYO1OPI14+nz+nOlWuKeBit+OQ03b92XaHhEcrIylJqfJJKsrP1
OC5ZiQ9CdT8qTunpaXpkniMhx3pXmZ+RpnHXlK5++Qd9ezFciUnRunH9vhLTUnQ39L5u33mg+Edx
KswtU3JItM59d0HfnL+mxIRkPXwYqdS0R7p7776qWgfV3lSr5q4JLS8froDeh1cVAPdAizKzitXg
KNCf/uM/6+svTulWyG3dDEvVzt6+HFkJKq9slyM5UXHJRYoPv6Wrt6KUk1eqx6G39f2ZSzr/43kV
13WrLD1KP16L087egQYqS/Tj59/oqx+u6f6NK7p2/b7uXr+kr77+Qd+du67WtgZdOvWNCuu6VZ2b
oN//h3/WnZC7unDxhvLzMxSTXKD93VU9vnNF3355Sp/9+TPdCQ3X5SshGu4dUHxYtNISEnT686+s
8Y1MyFV5ToI+/+KshmaXrWmjAACwu/deADae7W29p+nxcc37luSf9cg9t6j9rXU9uPaDPg9LUmBt
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
QygAhASFAkAIsUMoAIQEhQJACLFDKACEBIUCQAixQygAhASFAkAIsUMoAIQEhQJACLFDKACEBIUC
QAixQygAhASFAkAIsUMoAIQEhQJACLFDKACEBIUCQAixQygAhASFAkAIsUMoAIQEhQJACLFDKACE
BIUCQAixQygAhASFAkAIsUMoAIQEhQJACLFDKACEBIUCQAixQygAhASFAkAIsUMoAIQEhQJACLFD
KACEBIUCQAixQygAhASFAkAIsUMoAIQEhQJACLFDKACEBIUCQAixQygAhASFAkAIsUMoAIQEhQJA
CLFDKACEBIUCQAixQygAhASFAkAIsUMoAIQEhQJACLFDKACEBIUCQAixQygAhASFAkAIsUMoAIQE
hQJACLFDKACEBIUCQAixQygAhASFAkAIsUMoAIQEhQJACLFDKACEBIUCQAixQygAhASFAkAIsUMo
AIQEhQJACLFDKACEBIUCQAixQygAhASFAkAIsUMoAIQEhQJACLFDKACEBIUCQAixQygAhASFAkAI
sUMoAIQEhQJACLFDKACEBIUCQAixQygAhASFAkAIsUMoAIQEhQJACLFDKACEBIUCQAixQ44XgNXV
VW1ubloxyzAKALFlKACEEDvkqACYuFwutbe3WxkdHbWWaRQAYrtQAAghdshRATDv+kdGRhQVFaWw
sDB1dHRYyzIKALFdKACEEDvk+EcAZrnV2Ngoh8Nh/b6+vkYBIPYLBYAQYocE7wRoln1HYR8AYsu8
rQKwsbGpsXGnVikAhJDfYAIBs7f/ywXAXDYFYHzCZd1uUACILfK2CoCZn00BcDqnrMcQQsjHErP1
cnRsQru7u9byjAJAbJFfWwDMCwUAThKzjKMAkBOfX1sAzP3MT5OdnR1CCPloc7QsM8s1CgA58fk1
BeDg4ODpSTQIIeRkZX9//9lyjwJATmR+TQEAADugAJATGQoAALweBYCcyFAAAOD1KADkRIYCAACv
RwEgJzIUAAB4PQoAOZGhAADA61EAyIkMBQAAXo8CQE5kKAAA8HoUAHIiQwEAgNejAJATGQoAALwe
BYCcyFAAAOD1KADkRIYCAACvRwEgJzIUAAB4PQoAOZGhAADA61EAyIkMBQAAXo8CQE5kKAAA8HoU
AHIiQwEAgNejAJATGQoAALweBYCcyFAAAOD1KADkRIYCAACvRwEgJzIUAAB4PQoAOZGhAADA61EA
yIkMBQAAXo8CQE5kKAAA8HoUAHIiE1wAzO8m5jIFAAAoAOSE5ngBMJfNvGlifqcAAAAFgJzQHBUA
87OyslJZWVnKycnR1NSUNZ9SAADYHQWAnMgcFYDV1VV1dXXp/v37ys/Pt979m9spAADsjgJATmSC
PwLo7u6Wx+OxCgEfAQDAOy4Ak1MzWn362Ssh7zNmRb+9vfX08oq2tja1trZ2ePvysjVvHkcBAGA3
77QAjIyMa2bGI49njpD3m9k5zc8vvny9Z07T0zMaHZ14Yd6lAACwm3daAJaXVzQ3t6CFBS8h7z3z
C4svXWdi5smVldUX5l0KAAC7eacFAPhYUAAA2M1bLwAHBwfBVwO/edvb2xQAALbyVguA2dva7Hxl
FqSEfEwxRwuYnwBgF2+1AJjN/5ubm9bmVEI+trD1CoCdvNUCAAAAPg4UAAAAbIgCAACADf3iAhCg
AAAA8NH6RQVgYGZFY7Nr1oMJIYQQ8vFl2L2q0fk3LABh4ZFZvh1pbGFLI/NbVnMghBBCyMcXs/J3
BQ7UPzH/8wXg0uVrpa7ZgNUWCCGEEPJxp39iTs2dAz9fAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIDfqP8fdQKsBXiQAlEAAAAASUVORK5CYII=</Preview>
  <Form>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
/wBT7vuAhKIAAA==</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecrets.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecrets.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecrets.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>