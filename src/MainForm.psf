<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAL0ESURBVHhe7P3nb2NZ366JnY/G/B0HGH+yBx5/
GBuw4flswIABA55zxvPG875vP8/TT3dXd1V15ahKyjnnnHPOOeecA0WRlEhFkqIkSrqMtSmqVCyV
SqrUVdW/S7jBrR3Wzmvde8X/9J8EQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQfhP/+k/3frf//f/fcGLlz4FIaGRBYFB4SKRSCQSib5B
hUfGFVy79lvBf/ff/e8KPBP7t/jP//k/12TkVzCytMnI4ibDC+sikUgkEom+QY2qtHzBwp17j/BM
79/ixUu/glHdFk2D8zT2z9I4MCcSiUQikeg89bt+my6pt7a/ojzDe5fc6zf0z9I2pqdjYOr9BiA8
IrpgcmWH5sEFWoZcah5ZpHF0mYZRvTbtni8SiUQi0Z9ZrcOLWnpZ1zNNfe/MhVLrNPTN0jqitpmn
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
ldcjn9XX9Bl4T7ykvt9qAJDxP2wBoLryqgOA2gIgt0uZlH5J1aZz6RaQZe8WHLlfguh1UNtKc1P8
Wj8D2S51G6U1iV0AVJd+iQAgLQDSFKvOtkbpl1T91S8Vu/Y+Sj+m1HPsAqC69KoDgHQByAVpCCHk
OiFnAch1MhgAqG68ygAg/Woy+jw/P19J09ISoF5ZT/76W5b1pP9NJhAaHBxUbleXRVmW22RZfZx3
2drnUctTl73L+9yy1W31VZ62bLU8ddm7PPV5fJXtvd3aZe12q9vqqzxt2b7Kk+WPvQ++ytZuq/Z5
rvrz0y7/3rJ9batahrZstTx12bu8T3lPPmW71W31VZ62bF/lyfLH3odPKdvX82i31VfZvsrTlu1r
u39v2Zdtq7ZstTx12bs8X++Jd9lye0tLC2ZnZ5XWJIEBgN54rzIASBnSpCajmpfkqnSLi4qfsyx/
P2VZ+7hPWdaW4W9Z+7hPWdaW8UfL+5Jla8vwt6x93Kcsa8vwt6x93Kcsa8vwt6x93Kcsa8v4o+V9
ybK1Zfhb1j7uU5a1Zfhb1j7uU5a1Zfhb1j7uU5a1ZXxueXJ1TGm9lLMDpPtSYACgN96rDADqqF/t
KUHSNfA5yx/T3+P8LX+O/srwt/w5+ivD3/Ln6K+MT1n+mP4e52/5c/RXxpcs7yaU/TnP4+9xn1OG
P/2V93vL9leGv+XP0V8Z6rL8lYO/DCgVGADojfcqAgAhhNxEfNVvDAD0xvhHA4CsJ4/VnqdNKaXX
WTmrROo3LQwA9Mb4RwOA2uwvTWeUUnpTlHpNPSPAGwYAemP8owGAEEL0BAMAvTEyABBCyKfDAEBv
jFcZAD64DjAzu/jRy9q73J6zBggh5LrBAEBvjFcRAOS0GbmUr9uyCFNqEeTwvjrTj44RM9yOTdQ2
NGB5axtDfU1o6uxBT88A2pubMLm4ja2lYdS0duPAjZPL/crlgSml9J+vrx86DAD0xvhHA4AsK+va
bHDtLiCvuAXAAfLT4pGcmYyQyCgUFGXjxfMAlJTnIiw4FHfvPMV7QwriwsKRkpGMhCQTBmZ34XDY
lfLkeSml9J+peq0ALQwA9MZ4FQFAXT4+3EBEYDByCwuQbIxCcmYWUtPSYIyPQUBgKPJzUvDs+Qs8
eRGO8bllVBdkIDklEe/ehaFvbvfccxBCyD8bqd+0MADQG+NVBAB1JkBhdX4Kw+NT2NxYwtL6LtbG
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</Preview>
  <Form>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
9q//D9GU34SNPwEA</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $global:ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formEntraIDApplicationMa.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Retrieve the application ID from the textbox
		$appId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($appId))
		{
			Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned secrets" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Application"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-CustomAppManagementPolicyToApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Set-DefaultPolicyInputsFromConfig
{
	param (
		$policy # The policy object returned from the tenant
	)
	
	# Helper to extract a restriction by type
	function Get-Restriction ($restrictions, $type)
	{
		if ($restrictions)
		{
			return $restrictions | Where-Object { $_.restrictionType -eq $type }
		}
		return $null
	}
	
	$appRestrictions = $policy.applicationRestrictions
	$pwdCreds = $appRestrictions.passwordCredentials
	$keyCreds = $appRestrictions.keyCredentials
	
	<# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$txtPwdLifetime.Text = ($pwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpPwdDate.Value = [datetime]::Parse($pwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	#>
	
	# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$maxLifetime = $pwdLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtPwdLifetime.Text = $matches[1] # just the number of days
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtPwdLifetime.Text = $maxLifetime # keep as ISO 8601 if not just days
			}
			else
			{
				$txtPwdLifetime.Text = "" # fallback for invalid/unsupported formats
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtPwdLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtPwdLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $pwdLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpPwdDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpPwdDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					# fallback to today if parsing fails
					$dtpPwdDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpPwdDate.Value = [datetime]::Now
		}
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	
	<# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$txtSymmetricKeyLifetime.Text = ($symKeyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpSymmetricKeyDate.Value = [datetime]::Parse($symKeyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Symmetric Key Lifetime
	
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$maxLifetime = $symKeyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtSymmetricKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtSymmetricKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtSymmetricKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtSymmetricKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtSymmetricKeyLifetime.Text = ""
		}
		$dateValue = $symKeyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpSymmetricKeyDate.Value = $dateValue
			}
			else
			{
				try { $dtpSymmetricKeyDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpSymmetricKeyDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpSymmetricKeyDate.Value = [datetime]::Now
		}
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	
	
	<# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$txtCustomPasswordLifetime.Text = ($item.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpCustomPasswordDate.Value = [datetime]::Parse($item.restrictForAppsCreatedAfterDateTime)
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	#>
	
	# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$maxLifetime = $item.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				#$txtCustomPasswordLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				#$txtCustomPasswordLifetime.Text = $maxLifetime
			}
			else
			{
				#$txtCustomPasswordLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			#$txtCustomPasswordLifetime.Text = $maxLifetime.Days
		}
		else
		{
			#$txtCustomPasswordLifetime.Text = ""
		}
		$dateValue = $item.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpCustomPasswordDate.Value = $dateValue
			}
			else
			{
				try { $dtpCustomPasswordDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpCustomPasswordDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpCustomPasswordDate.Value = [datetime]::Now
		}
		$chkCustomPasswordLifetimeEnabledAddToPolicy.Checked = $true
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
		$chkCustomPasswordLifetimeEnabledAddToPolicy.Checked = $false
	}
	
	<# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$txtKeyLifetime.Text = ($keyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpKeyDate.Value = [datetime]::Parse($keyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$maxLifetime = $keyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtKeyLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $keyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpKeyDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpKeyDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					$dtpKeyDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpKeyDate.Value = [datetime]::Now
		}
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
}

function Convert-TimeSpanToIsoDuration
{
	param ([string]$input)
	if ($input -match '^(\d+)\.(\d{2}):(\d{2}):(\d{2})$')
	{
		# e.g. 1.00:00:00 => P1D
		return "P$($matches[1])D"
	}
	return $input
}

<#
function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}
#>

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkPwdLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
				
		# customPasswordLifetime
		<#$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		#>
		#if ($customPwdLifetime)
		if ($chkCustomPasswordLifetimeEnabledAddToPolicy.Checked)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $null
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		
		if ($symmetricKeyLifetime)
		#if ($chkSymmetricKeyLifetimeEnabledAddToPolicy.Checked)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
				
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			# Log 
			
			Write-Log -Level INFO -Message "Calling Graph to update policy..."
			
			# Do task
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			# Optionally refresh the UI
			Load-CurrentDefaultApplicationPolicy
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		$defaultPolicy = Load-CurrentDefaultApplicationPolicy
		Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:GitHubRepoURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website $global:GitHubRepoURL"
	
}

]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>