<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>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
jLMEGj+NAuDyzGjZPay46ES1VFTqYVyBpm1D+u6Tv+v8xat69Oih4hMz1VJZp5+/PKsHsRnKiovS
2bMXzetS0pIV8+i2/nHmnO6FxSri6kWd+ea8oh/GKDYmXalpcboT/kCZ2Zl69PC+/vHFOdXV1Sgy
Ok1VZbkKu/NQt38+qy+/v6KyknKlJ2WprLRc127eV0v3oOoryxT3MFKP4pN1/+e7uvb9Bf3zv/xd
9T3jaqrM1rXvb+qbL3/QP76/rPq6Ct356ay+/+pbRUTH6WFUjJKTEpSQkqFbV64oOzddYTcu6etT
X5nl5FpYuhz2Uf38w3klJafo3NnL6uof0LWrX6lqwHPgt4ujogAA1kMBCJ13VgAWF5c1Nj6p6uoq
OZ1OORwOeTwelZeXy+PxmuOMdtWrvLJBDs+8lpeXND8zo47Wejl8QU32Nau8sl5eX0ALM145XE51
mtcFNNZdr4q6Bo1N2OSYdqmrqUVDo4Ma6OxSZWmpusZdWlkYV1VtgyZcHs3MzMo5Oam68iIVlFRq
amJaHc0tGhzs07RrVvbhLhVUNsu/HJDP59fc7Kw2tqW14JLsY1NqrKpWc/egeb3ft6Dx3n5VVDVq
tL9DH/7L/6PruY2yDXeoZ9KtOceICotL5PDMyjc/o+aaInUMjstjG1JzT59c3gUFgwFNjQ6ou6tX
YyMD6mqp1qPkRPk3+ADgbaIAANZDAQidd1YAjIWvkenpadXV1ampqUn19fUaGxt7YSdAy9pY1cSk
TavP7Yn42+2sBzTrCxwejCOiAADWQwEInXdaAGZm9xa+wO+BAgBYDwUgdCgAODEoAID1UABChwKA
E4MCAFgPBSB0KAA4MSgAgPVQAEKHAoATgwIAWA8FIHQoADgxKACA9VAAQocCgBODAgBYDwUgdCgA
ODEoAID1UABChwKAE4MCAFgPBSB0KAA4MSgAgPVQAEKHAoATgwIAWA8FIHQoADgxKACA9VAAQocC
gBODAgBYDwUgdCgAODEoAID1UABChwKAE4MCAFgPBSB0KAA4MSgAgPVQAEKHAoATgwIAWA8FIHQo
ADgxKACA9VAAQocCgBODAgBYDwUgdCgAODEoAID1UABChwKAE4MCAFgPBSB0KAA4MSgAgPVQAEKH
AoATgwIAWA8FIHQoADgxKACA9VAAQocCgBODAgBYDwUgdCgAODEoAID1UABChwKAE4MCAFgPBSB0
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
AHCM/P8yzVfRrShoDwAAAABJRU5ErkJggg==</Preview>
  <Form>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
p5K5PGIAAA==</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfManagedIdentity.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfManagedIdentity.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfManagedIdentity_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedRoles.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>