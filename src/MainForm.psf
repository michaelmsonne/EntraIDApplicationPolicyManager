<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>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
UnrTDAWAcBkA6I2SAYBSetNkAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCU
AYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBS
egNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNl
AKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCU
AYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBS
egNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNl
AKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCU
AYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBS
egNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNl
AKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCU
AYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBS
egNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKCUAYBSegNlAKA0LACIz2LD
EDocDgYASum1NBQARLkXKvMsFgsDAL1ZhgKA2AB0Oh2mp6cl5XK5tHEwAFBKr5uhHf7i4qJU3k1N
TUnln+jGAEBvjKEA4HK5pA2goKAA8fHx6O7ulrqp1FoGAErptVIEAHGA09fXJ5V3+fn50Gq1UnnG
AEBvjEdPAQjFkX9TUxMMBoN0GoA1AJTS66YIAKLsMhqNUnm3sLAglXc8BUBvlOEXAYr/o1BUhfEa
AErpdTR4DcCeVM6FyjzR/YsHgNW1jcOLESj93JpMJlgswQ1AvBc7+9CGILqLQGoy7X3wP3s0AIh+
d3cNJ6ZBKaWXydABjzBY3gXLPFEjsL65JZVnFx4AxKtiSyUVpFtbakovSNWBx7uL/+La2qZ0LcCH
/rNHA8D29i7W1hUnxkMppZdJUbaFdxOubyig028f7o8vJAAQcpUIDwCh94QQcp04bf98rgFAVDuI
8xFut5vSS6+oDRD/2dBOX1SfiYtnwvujlNKrrNgvi7IunHMNAB6PRypAKb0qio2D/19K6XVXlG/h
nGsAIIQQQsjVgAGAEEIIuYEwABBCCCE3kD8cACxOBgBCCCHkqvKHAoBcZcW63i4NTCmllNKr54rW
hpVt99kCQFJyWrXRC6xuu7Gid0vJgVJKKaVXT7Ev3zTtQ765/fsB4OXLyLYtvVlKC5RSSim92so3
tjE+vfT7AYAQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYSQa8j/D4knXxdMdjd1
AAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $global:ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formEntraIDApplicationMa.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Retrieve the application ID from the textbox
		$appId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($appId))
		{
			Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned secrets" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Application"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-CustomAppManagementPolicyToApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Set-DefaultPolicyInputsFromConfig
{
	param (
		$policy # The policy object returned from the tenant
	)
	
	# Helper to extract a restriction by type
	function Get-Restriction ($restrictions, $type)
	{
		if ($restrictions)
		{
			return $restrictions | Where-Object { $_.restrictionType -eq $type }
		}
		return $null
	}
	
	$appRestrictions = $policy.applicationRestrictions
	$pwdCreds = $appRestrictions.passwordCredentials
	$keyCreds = $appRestrictions.keyCredentials
	
	<# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$txtPwdLifetime.Text = ($pwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpPwdDate.Value = [datetime]::Parse($pwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	#>
	
	# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$maxLifetime = $pwdLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtPwdLifetime.Text = $matches[1] # just the number of days
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtPwdLifetime.Text = $maxLifetime # keep as ISO 8601 if not just days
			}
			else
			{
				$txtPwdLifetime.Text = "" # fallback for invalid/unsupported formats
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtPwdLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtPwdLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $pwdLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpPwdDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpPwdDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					# fallback to today if parsing fails
					$dtpPwdDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpPwdDate.Value = [datetime]::Now
		}
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	
	<# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$txtSymmetricKeyLifetime.Text = ($symKeyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpSymmetricKeyDate.Value = [datetime]::Parse($symKeyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$maxLifetime = $symKeyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtSymmetricKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtSymmetricKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtSymmetricKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtSymmetricKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtSymmetricKeyLifetime.Text = ""
		}
		$dateValue = $symKeyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpSymmetricKeyDate.Value = $dateValue
			}
			else
			{
				try { $dtpSymmetricKeyDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpSymmetricKeyDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpSymmetricKeyDate.Value = [datetime]::Now
		}
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	
	<# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$txtCustomPasswordLifetime.Text = ($item.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpCustomPasswordDate.Value = [datetime]::Parse($item.restrictForAppsCreatedAfterDateTime)
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	#>
	
	# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$maxLifetime = $item.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtCustomPasswordLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtCustomPasswordLifetime.Text = $maxLifetime
			}
			else
			{
				$txtCustomPasswordLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtCustomPasswordLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtCustomPasswordLifetime.Text = ""
		}
		$dateValue = $item.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpCustomPasswordDate.Value = $dateValue
			}
			else
			{
				try { $dtpCustomPasswordDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpCustomPasswordDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpCustomPasswordDate.Value = [datetime]::Now
		}
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	
	<# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$txtKeyLifetime.Text = ($keyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpKeyDate.Value = [datetime]::Parse($keyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$maxLifetime = $keyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtKeyLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $keyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpKeyDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpKeyDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					$dtpKeyDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpKeyDate.Value = [datetime]::Now
		}
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
}

function Convert-TimeSpanToIsoDuration
{
	param ([string]$input)
	if ($input -match '^(\d+)\.(\d{2}):(\d{2}):(\d{2})$')
	{
		# e.g. 1.00:00:00 => P1D
		return "P$($matches[1])D"
	}
	return $input
}

<#
function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}
#>

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkPwdLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# customPasswordLifetime
		$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			# Optionally refresh the UI
			Load-CurrentDefaultApplicationPolicy
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
			
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		$defaultPolicy = Load-CurrentDefaultApplicationPolicy
		Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:GitHubRepoURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website $global:GitHubRepoURL"
	
}

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>