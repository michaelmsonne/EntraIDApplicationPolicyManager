<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAF9KSURBVHhe7d33byP5oiX2/c2G/4y19ycDaxg2
bMMPu/CvBgzbMGAbtnf3vb3v3rlz7+Tp6TDd0zknqZVzzjlnico55yxmijlTJCVKx/gWm2qJrW71
TKu7JfJ8gANJDMUiVeGwWFX8F/+CiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIKGJc+1f/6r+oefT4WU1CYnrN
q7hkhmEYhmEuYJJTs2q+//HHmv/sP/1PasJX9m/5z//lv+woqmjAvMKGeaUNc3ILwzAMwzAXMAsq
sR434cq1Gwhf379FvPMXd+id2UL31AZ6pjYZhmEYhnlXpn9nPuN9xHp8aEmLoamV0wtAckp6zYrW
id4ZOfpng+mbk6NnQY3ueQ365hWHlzMMwzBMNGdgThFc0U5unBrZ5Ab6xH3mFeidFvdZR4/0Rvvd
Ebfpnd7CwLwSfTNyaRjhwz0pYpzEuIlxHFzUYGR2/fQCkJCYUrOidWFgTolBcedFFfqnFZjtHsZS
jwzDA+voW1JjcF6BQXGbeeb0KE647KQcud3cO35nGIZhzkWGF9VoHVxEVesYajomPii1nZPoGltF
c+8kWgem0dI/jbbBWcjGltA1tiT97BxZQGv/9GGa+4L3qemYPDacxp45NHTPSBG/i8uk6zompHFq
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
hmGiISwADBMWFgCGYaIhLAAMExYWAIZhoiEsAAwTFhYAhmGiISwADBMWFgCGYaIhLAAMExYWAIZh
oiEsAAwTFhYAhmGiISwADBMWFgCGYaIhLAAMExYWAIZhoiEsAAwTFhYAhmGiISwADBMWFgCGYaIh
LAAMExYWAIZhoiEsAAwTFhYAhmGiISwADBMWFgCGYaIhLAAMExYWAIZhoiEsAAwTFhYAhmGiISwA
DBMWFgCGYaIhLAAMExYWAIZhoiEsAAwTFhYAhmGiISwADBMWFgCGYaIhLAAMExYWAIZhoiEsAAwT
FhYAhmGiISwADBMWFgCGYaIhLAAMExYWAIZhoiEsAAwTFhYAhmGiISwADBMWFgCGYaIhLAAMExYW
AIZhoiEsAAwTFhYAhmGiISwADBMWFgCGYaIhLAAMExYWAIZhoiEsAAwTFhYAhmGiISwADBMWFgCG
YaIhLAAMExYWAIZhoiEsAAwTFhYAhmGiISwADBMWFgCGYaIhLAAMExYWAIZhoiEsAAwTFhYAhmGi
ISwADBMWFgCGYaIhLAAMExYWAIZhoiEsAAwTFhYAhmGiISwADBMWFgCGYaIhLAAMExYWAIZhoiEs
AAwTFhYAhmGiISwADBMWFgCGYaIhLAAMExYWAIZhoiEsAAwTFhYAhmGiISwADBMWFgCGYaIhLAAM
ExYWAIZhoiEsAAwTFhYAhmGiISwADBMWFgCGYaIhLAAMExYWAIZhoiEsAAwTFhYAhmGiISwADBMW
FgCGYaIhLAAMExYWAIZhoiEsAAwTFhYAhmGiISwADBMWFgCGYaIhLAAMExYWAIZhoiEsAAwTFhYA
hmGiISwADBMWFgCGYaIhLAAMExYWAIZhoiEsAAwTFhYAhmGiISwADBMWFgCGYaIhLAAMExYWAIZh
oiEsAAwTFhYAhmGiISwADBOW8AIg/hYRv7MAMAwTKWEBYJiwHC0A4ncxbYZmEBYAhmEiJSwADBOW
UAEQP7u7u1FTU4O6ujqoVCppOmUBYBgmEnK0AIiI5ZiIy+ViAWCiM6ECIGaCmZkZJCUlobGxUZpZ
xPUsAAzDREJCBUAsv1ZXV9HR0SFldnYWXq+XBYCJvoR/BCBmBp1OJxUCfgTAMEyk5GgBUCqVyMnJ
QWpqKpaXl6Xl2hcrAEqVBq7XmyUY5nNGrOj9ft/r353w+bzSSl263uGQps2jWAAYhrmIOfoRgFhu
LSwsYGJi4vVHAO4vVwDW1jah0eig0+kZ5vNmWw+DwfT25To91GoN1te3jk277ysAwRnIfXgkAcMw
zHmJKAGhjzsdDrHjn1ta0YvrxHJLvNn5IgXA4XBCrzfCaDQzzGePwWh66zIRMU06na5j0+77CsDK
6josFguMJjPDMMz5itEEq9UGszm4jDK9jvhdLLdW1ja+TAEguijeVQD29w+g0W5DrdZJPxmGYc5d
NCcvn9QanZT9/X1pefbJC8DBwUH4xUTnnljpHy0AYkYhIookYhn3yQqA+MxBfA4ROg6RYS5KQp+j
Cbu7u7BarW/dhmEY5iJH7DAo3uCEnGkBEJv/xXGHomEwzEXL0a1XYibhtMwwTKQktDw7upw70wJA
REREFwMLABERURRiASAiIopCf7gA2FgAiIiILqw/VACWNE5sbLulOzMMwzAMc/GyqnVh3fCBBSA5
Jb3GsgtsGH1YM/ik5sAwDMMwzMWLWPkrbAdY3DKcXgAePX7Wrti2SW2BYRiGYZiLncUtPUanl04v
AERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERE59T/DwYp4Zr8HdXAAAAAAElFTkSuQmCC</Preview>
  <Form>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
/PP0+/8HqHJbKb7OAAA=</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

function Show-PolicyManagementForm
{
	# Create a new form for policy management
	$formPolicyManagement = New-Object System.Windows.Forms.Form
	$formPolicyManagement.Text = "Policy Management"
	$formPolicyManagement.Size = New-Object System.Drawing.Size(500, 400)
	$formPolicyManagement.StartPosition = "CenterScreen"
	
	# Create a GroupBox to contain the policy management controls
	$groupboxPolicyManagement = New-Object System.Windows.Forms.GroupBox
	$groupboxPolicyManagement.Text = "Manage Application Policies"
	$groupboxPolicyManagement.Location = New-Object System.Drawing.Point(10, 10)
	$groupboxPolicyManagement.Size = New-Object System.Drawing.Size(460, 340)
	$formPolicyManagement.Controls.Add($groupboxPolicyManagement)
	
	# ListBox to display existing policies
	$listboxPolicies = New-Object System.Windows.Forms.ListBox
	$listboxPolicies.Location = New-Object System.Drawing.Point(10, 20)
	$listboxPolicies.Size = New-Object System.Drawing.Size(440, 120)
	$groupboxPolicyManagement.Controls.Add($listboxPolicies)
	
	# Button to refresh policy list
	$buttonRefreshPolicies = New-Object System.Windows.Forms.Button
	$buttonRefreshPolicies.Location = New-Object System.Drawing.Point(10, 150)
	$buttonRefreshPolicies.Size = New-Object System.Drawing.Size(130, 30)
	$buttonRefreshPolicies.Text = "Refresh Policies"
	$buttonRefreshPolicies.Add_Click({
			try
			{
				$policies = Get-PolicyList
				$listboxPolicies.Items.Clear()
				foreach ($policy in $policies)
				{
					# Format each item as: DisplayName (PolicyId)
					$listboxPolicies.Items.Add("$($policy.displayName) ($($policy.Id))")
				}
			}
			catch
			{
				Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonRefreshPolicies)
	
	# Button to launch the policy creation pop-up
	$buttonCreatePolicy = New-Object System.Windows.Forms.Button
	$buttonCreatePolicy.Location = New-Object System.Drawing.Point(150, 150)
	$buttonCreatePolicy.Size = New-Object System.Drawing.Size(130, 30)
	$buttonCreatePolicy.Text = "Create New Policy"
	$buttonCreatePolicy.Add_Click({
			# Use input boxes for new policy details
			$displayName = Show-InputBox -message "Enter Policy Display Name:" -title "New Policy"
			if ([string]::IsNullOrEmpty($displayName))
			{
				Show-MsgBox -Prompt "Display Name is required." -Title "Policy Creation" -Icon Exclamation -BoxType OKOnly
				return
			}
			$description = Show-InputBox -message "Enter Policy Description:" -title "New Policy" -default ""
			$passwordMaxLifetime = Show-InputBox -message "Enter Password Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			$keyMaxLifetime = Show-InputBox -message "Enter Key Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			
			# Create the new policy via Set-AppManagementPolicy
			Set-AppManagementPolicy -DisplayName $displayName -Description $description -PasswordMaxLifetime $passwordMaxLifetime -KeyMaxLifetime $keyMaxLifetime
			Show-MsgBox -Prompt "Policy '$displayName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
			
			# Refresh the policies list
			$buttonRefreshPolicies.PerformClick()
		})
	$groupboxPolicyManagement.Controls.Add($buttonCreatePolicy)
	
	# Button to assign the selected policy to an application/managed identity
	$buttonAssignPolicyToSelect = New-Object System.Windows.Forms.Button
	$buttonAssignPolicyToSelect.Location = New-Object System.Drawing.Point(290, 150)
	$buttonAssignPolicyToSelect.Size = New-Object System.Drawing.Size(130, 30)
	$buttonAssignPolicyToSelect.Text = "Assign Policy"
	$buttonAssignPolicyToSelect.Add_Click({
			if ($listboxPolicies.SelectedItem -eq $null)
			{
				Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
				return
			}
			# Expecting the format: "DisplayName (PolicyId)"
			$selected = $listboxPolicies.SelectedItem.ToString()
			if ($selected -match "\((?<id>.+)\)$")
			{
				$policyId = $matches['id'].Trim()
				# Prompt for the target Application/Managed Identity ID (from the main form textbox e.g. $textboxSelectedIdentityID)
				$objectId = Show-InputBox -message "Enter Application/Managed Identity ID to assign the policy:" -title "Assign Policy"
				if ([string]::IsNullOrEmpty($objectId))
				{
					Show-MsgBox -Prompt "Application/Managed Identity ID is required." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
					return
				}
				Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
				Show-MsgBox -Prompt "Policy assigned successfully." -Title "Assign Policy" -Icon Information -BoxType OKOnly
			}
			else
			{
				Show-MsgBox -Prompt "Failed to extract policy ID from the selected item." -Title "Assign Policy" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonAssignPolicyToSelect)
	
	# Refresh policies on form show
	$formPolicyManagement.Add_Shown({ $buttonRefreshPolicies.PerformClick() })
	
	# Show form modally
	$formPolicyManagement.ShowDialog()
}

$buttonCreatePolicy_Click={
	
	# Retrieve values from textboxes
	$dispName = $textboxPolicyDisplayName.Text.Trim()
	$desc = $textboxPolicyDescription.Text.Trim()
	$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
	$keyMax = $textboxKeyMaxLifetime.Text.Trim()
	
	# Get the overall policy enabled state from the existing checkbox
	$globalEnabled = $checkboxPolicyEnabled.Checked
	
	# Get state for individual restrictions from the new checkboxes
	$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	
	if ([string]::IsNullOrEmpty($dispName))
	{
		Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Call your function and pass the additional state parameters.
	# (Update your policy creation function to accept -PasswordState and -KeyState parameters.)
	New-AppManagementPolicy -DisplayName $dispName `
							-Description $desc `
							-PasswordMaxLifetime $pwdMax `
							-KeyMaxLifetime $keyMax `
							-PasswordState $pwdState `
							-KeyState $keyState `
							-Enabled $globalEnabled
	
	Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}


$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>