<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>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
5qQuS5ocHlFbe7d2dncVmJuWa2pOoaWgFpbWtLUyr/FxpyYdA+ocHNW8P6jl5ZBm3B51NDSovW9E
i0srCgX9Guzt0dzibztRET4u5qRAFAAAdvL+CsDP2Nx69cZ9wNtAAQBgNx9cAQDeBwoAALuhAAAU
AAA29N4LgDkJICHvIwdRAADYzXsrAMsrKxoeGbPO6Oednn0W7+zeMdqdz+Ke8j73++vc5p6ato7v
/vS5XG65Jj1yuz0v3NfkudsOPMZkyjun2dk5uVxT8jwZTrd7Sm7PjKZ+5vleFZfbY433/uu9dBwO
Hq8+/DbyRjI0MqbFxaA1PVIAANjNeysAPv+CdSrfiYkJVVVVqba21vrZ3z9g7Y998BNaMPjzM9/g
4pJettng2nJQc76Adg7euLOp5ZWXfwWxvbmuYGhFu7u7Lzyfzz2m1p5h6/KMZ1KuKY9C69taWphT
4BVHK/w5O1sbWgwsKvRkWEJLoRde82e95JMs+XWZ9/nlnZ6z/qwUAAB2894KwGJwSSOjY6qsrNDc
3Jymp6c1Pz+viooK67KxEvTJ651QamKahtx7M+rlpQVrYbm+5JfHM6acnDItrm5oe3dHy0uBvdtC
PiVH39aJc5EadHq1FFxUb2uDUpOSlZJVqsCq2cd/QzNzc9rY3tHuzq4cPU3KLWvXypJPLveMFgMB
NVRVqra6TqkPE5SWnqmoyPuKfZiiG5fPKq+mU/cuHFd8caf88z5t7UiB+Rn5g2vaXluWz79kDe+0
162ljR1tb4S0Yg5JuLumyoJsPXqUosrGfgXmHXoQm6nQxpqW1ja0u71urQXpaqlXdUOrCrPS1djr
sJ5rZ2v99YsCfpF/IaCZ2XnrMgUAgN28twIQDIbU1z+o5uYm6z5mQMzPlpYWa/X4+qJXyQ8ilZGc
rgunL+rm7QdKfhirr776iy5HxulxYpzSEh7r4olzis0qUV9Lub448okuR8YqN/OBTp0/r+9OXVP8
oySd/+mkjn7+gy5cuaHrN24pJiNNOVkJuhtzXynZKbp6JVLVlTWqbB7WetCruMhInfrhRx398ked
OXNNDX175eOf/6//U1di81WRm6prNyJ06fxVVVTW6epP3+n7n67p1rXrionLUXdDiT77yzHFJacq
Lu6OIu4/0oUTn+vYuVvKzkrUxWvXFJOaq6TYh0pNuq2z1+7q2rnj+vKHk7p0+Y4i70Tpq8++VkRM
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
mPnbPgoAOZT5LQXA7AZo7rO2tmZNzz31papqd2qkrVRZudm6dfWsYlIyVV+arW9/uKiujnqd+fYb
ff7NRbW2tenUsaMqKC9WdlqWpha3tbGxbj2XeQ1CCHkfMfMgM18zl/dRAMihzG8tAObT/z7vcJuu
XI9QRl6WEh5FqKSxQ7lx1/XvPj+utPQ0HTnyJ/1w/b6y8qs1PTujpuoK3bl4TP/um0sKbBx4EQB4
j8w8jgJADn1+awH4pSMBtleXKqmsQR6XU7FJKXIsPZvujeKsx8pp6dPOs7VtAPBecSRAYou87QIA
AB8bCgCxRd5kAQgEFjXv88vnXyCEkA8vvpdcZ13v18JC4OmGfxQAYou8qQKwvr6h/oFheb3T8ngI
IeTDypTHq+npWXm9My/cZq7rHxzW6uqaNT+jABBb5E0VgLW1dbkm3VpbW1UotEQIIR9UloJBa/61
srJsLYOXl0PW/MtcNvOtSbdHKyt78zYKALFF3mQBcDgnrTdV+PMQQsj7jpmfmQW7Wf6a+Z753e/3
Py0DZl5HASC2CgWAEGKH7BcAcwpzswyuqKhQbm7u0+spAMR2oQAQQuyQ/QW9OdDPwMCA7t27p7t3
76qlpcWal1EAiO1CASCE2CH7BcDMszwej0ZGRqxMTk6yBoDYMxQAQogdcnAbABNzef8rAbYBILYM
BYAQYoccLADht1EAiC1DASCE2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEg
hNghFABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEUAELC
QgEghNghFABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEU
AELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJCASCE
2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJC
ASCE2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEghNghFABCwkIBIITYIRQA
QsJCASCE2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEghNghFABCwkIBIITY
IRQAQsJCASCE2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEghNghFABCwkIB
IITYIRQAQsJCASCE2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEghNghFABC
wkIBIITYIRQAQsJCASCE2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEghNgh
FABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEg
hNghFABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEUAELC
QgEghNghFABCwkIBIITYIRQAQsJCASCE2CEUAELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEU
AELCQgEghNghFABCwkIBIITYIRQAQsJCASCE2CEHC0AoFNLa2poVMw+jABBbhgJACLFD9guAidPp
VHt7u5XR0VFrnkYBILYLBYAQYofsFwDzqX9kZET37t3TnTt31NHRYc3LKADEdqEAEELskINfAZj5
VmNjoyoqKqzfV1aWKQDEfqEAEELskPCNAM28bz9sA0BsmTdVAFZX1zQ27lCIAkAI+QATCJit/V8s
AOayKQDjE07rdoMCQGyRN1UAzPRsCoDDMWk9hhBCPpaYtZejYxPa2tqy5mcUAGKL/NYCYN4oAHCY
mHkcBYAc+vzWAmDuZ36abG5uEkLIR5v9eZmZr1EAyKHPbykAu7u7Tw6iQQghhys7OztP53sUAHIo
81sKAADYAQWAHMpQAADg1SgA5FCGAgAAr0YBIIcyFAAAeDUKADmUoQAAwKtRAMihDAUAAF6NAkAO
ZSgAAPBqFAByKEMBAIBXowCQQxkKAAC8GgWAHMpQAADg1SgA5FCGAgAAr0YBIIcyFAAAeDUKADmU
oQAAwKtRAMihDAUAAF6NAkAOZSgAAPBqFAByKEMBAIBXowCQQxkKAAC8GgWAHMpQAADg1SgA5FCG
AgAAr0YBIIcyFAAAeDUKADmUoQAAwKtRAMihDAUAAF6NAkAOZSgAAPBqFAByKEMBAIBXowCQQ5nw
AmB+NzGXKQAAQAEghzQHC4C5bKZNE/M7BQAAKADkkGa/AJiflZWVyszMVHZ2tiYnJ63plAIAwO4o
AORQZr8AhEIhdXV16fbt28rLy7M+/ZvbKQAA7I4CQA5lwr8C6O7ultfrtQoBXwEAwFsuAK7JKYWe
fPdKyLuMWdBvbKw/ubyk9fU1LS8v790eDFrT5kEUAAB281YLwMjIuKamvPJ6Zwh5t5me0ezs/IvX
e2fkdk9pdHTiuWmXAgDAbt5qAQgGlzQzM6e5OR8h7zyzc/MvXGdipsmlpdBz0y4FAIDdvNUCAHws
KAAA7OaNF4Dd3d3wq4EP3sbGBgUAgK280QJgtrY2G1+ZGSkhH1PM3gLmJwDYxRstAGb1/9ramrU6
lZCPLay9AmAnb7QAAACAjwMFAAAAG6IAAABgQ7+6AAQoAAAAfLR+VQEYmFrS2PSy9WBCCCGEfHwZ
9oQ0OvuaBeBORFSmf1Mam1vXyOy61RwIIYQQ8vHFLPydgV31T8z+cgE4c/ZCiXM6YLUFQgghhHzc
6Z+YUXPnwC8XAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAD
9f8Dqw84cMIMvwYAAAAASUVORK5CYII=</Preview>
  <Form>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
bAAA</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
	
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfManagedIdentity.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfManagedIdentity.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfManagedIdentity_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecrets.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecrets.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecrets.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>