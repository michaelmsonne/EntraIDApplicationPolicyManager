<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>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
e1GeiXAgYACg197zDABKlQZGo+nENCil9DIp2vkXr+I2v9COX3wWZaA4kBEwANBrLwMApfSmKQKA
2PmLMq+jowPLy8uHZSADAL0xMgBQSm+aIgCIMm9wcBBxcXEoLCyEXq+HxWJlAKA3RwYASulNM1QD
MDc3h9HRUUmNRiN1YwCgN0YGAErpTTN0DYDD4YDL5ZI+i7KMpwDojZIBgFJ60wwFgHAZAOiNkgGA
UnrTZACglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoD
ZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCg
lAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGA
UnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoD
ZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCg
lAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGA
UnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoD
ZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCg
lAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGA
UnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoD
ZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCg
lAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCglAGAUnoDZQCgNCwAiM9iwxA6HA4GAErptTQUAES5
FyrzLBYLAwC9WYYCgNgAdDodZmZmJGUymbRxMABQSq+boR3+0tKSVN5NT09L5Z/oxgBAb4yhAOBy
uaQNoKCgAPHx8eju7pa6qdRaBgBK6bVSBABxgNPX1yeVd/n5+dBqtVJ5xgBAb4xHTwEIxZF/U1MT
DAaDdBqANQCU0uumCACi7DIajVJ5t7i4KJV3PAVAb5ThFwGK/6NQVIXxGgBK6XU0eA3AnlTOhco8
0f2LB4DVtY3DixEo/dyaTCZYLMENQLwXO/vQhiC6i0BqMu198D97NACIfnd3DSemQSmll8nQAY8w
WN4FyzxRI7C+uSWVZxceAMSrYkslFaRbW2pKL0jVgce7i//i2tqmdC3Ah/6zRwPA9vYu1tYVJ8ZD
KaWXSVG2hXcTrm8ooNNvH+6PLyQAEHKVCA8AofeEEHKdOG3/fK4BQFQ7iPMRbreb0kuvqA0Q/9nQ
Tl9Un4mLZ8L7o5TSq6zYL4uyLpxzDQAej0cqQCm9KoqNg/9fSul1V5Rv4ZxrACCEEELI1YABgBBC
CLmBMAAQQgghN5A/HAAsTgYAQggh5KryhwKATGXFut4uDUwppZTSq+eK1oaVbffZAkBSclq10Qus
bruxondLyYFSSimlV0+xL9807UO2uf37AeDly8i2Lb1ZSguUUkopvdrKNrYxPiP//QBACCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCyDXk/weOqA+J8zgKVAAAAABJRU5ErkJggg==</Preview>
  <Form>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
tNNf27tTQc+he1FHH/88/Pn/AGUC+HeD8AAA</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$buttonRefreshDefaultPolicy_Click={
	
	$policy = Get-DefaultAppProtectionPolicy
	if ($policy)
	{
		$details = "IsEnabled: $($policy.isEnabled)`r`n" +
		"Registered App Restrictions:" + "`r`n" + ($policy.applicationRestrictions.PasswordCredentials | Format-Table | Out-String) + "`r`n" +
		"Enterprise App Restrictions:" + "`r`n" + ($policy.ServicePrincipalRestrictions.PasswordCredentials | Format-Table | Out-String)
		$textboxDefaultPolicyDetails.Text = $details
	}
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
}]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>