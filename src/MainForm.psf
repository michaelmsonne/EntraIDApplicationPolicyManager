<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGYFSURBVHhe7d1Xbxv74yb2vUuQl7HJXgXYIEiQ
BFnsIrcBgiBXWSTZ8i+/cnrzce/dlmyr9957743qvVGF6oW99yJSFKUn+A4tW6blco4lWxafD/BA
FOuQHM48HE75F/+CiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI6Ny48q/+1X9T9+hxTF1ScmZdfEIqwzAMwzBf
YVLTc+p++uWXuv/qv/wv6iJn9m/5r//lv+wqqWrCgtKBBZUD89s2hmEYhmG+wiyqxXzcgktXriNy
fv8W8c1f3KBfvoXemQ30zWwyDMMwDPOuzP7BfMbbiPn4yJIOIzMrHy4AqWmZdSs6N/rl2xicC2dg
fht9ixr0LmgxsKB8dT7DMAzDRHOG5pXhGe30xgcjm97AgLjNghL9s+I26+iTvmi/O+I6/bNbGFpQ
YUC+Ld1H5P0eFzFMYtjEMA4rtBibW/9wAUhKTqtb0XkwNK/CsLixQo3BWSXmekex1CfD6NA6BpY0
GF5QYlhcZ4H5cJTHnHdcjlxv/h2nGYZhmDORUYUG7cMK1LRPoK5r6qNS3z2NnolVtPZPo31oFm2D
s+gYnoNsYgk9E0vS3+6xRbQPzr5K60D4NnVd02/cT3PfPJp65VLEaXGedFnXlDRMHSNL0jCOLesx
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
xDjpdnveGHffVwBWVtdhs9lgtlgZhmHOVswW2O0OWK3haZTlZcRpMd1aWdv4MgWA6GvxrgKwv38A
rc4AjUYv/WUYhjlz0R4/fdJo9VL29/el6dmpF4CDg4PIs4nOPDHTP1oAxAeFiOg8EdO4UysA4jcH
8TvE4XaIDPO15PB3NCEYDMJut791HYZhmK85YoVB8QXn0IkWALH4X2x3KBoGw3xtObr0SnxIOC4z
DHNecjg9OzqdO9ECQERERF8HFgAiIqIoxAJAREQUhf50AXCwABAREX21/lQBWNK6sWHwSjdmGIZh
GObry6rOg3XTRxaA1LTMOlsQ2DAHsGYKSM2BYRiGYZivL2Lmr3QcQLFl+nABePQ4plNpcEhtgWEY
hmGYrzuKLSPGZ5c+XACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiM6o/x+fZzwqTenB0gAAAABJRU5E
rkJggg==</Preview>
  <Form>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
yT/+Wf/+/wFAixdh/MsAAA==</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecrets.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecrets.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecrets.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Format each item as: DisplayName | State | Description | PolicyId
			$itemText = "Name: $($policy.displayName) | State: $($policy.isEnabled) | Description: $($policy.description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listViewPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			$row = New-Object System.Windows.Forms.ListViewItem($policy.displayName)
			$row.SubItems.Add($policy.isEnabled)
			$row.SubItems.Add($policy.description)
			$row.SubItems.Add($policy.Id)
			$listViewPolicies.Items.Add($row)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

function Show-PolicyManagementForm
{
	# Create a new form for policy management
	$formPolicyManagement = New-Object System.Windows.Forms.Form
	$formPolicyManagement.Text = "Policy Management"
	$formPolicyManagement.Size = New-Object System.Drawing.Size(500, 400)
	$formPolicyManagement.StartPosition = "CenterScreen"
	
	# Create a GroupBox to contain the policy management controls
	$groupboxPolicyManagement = New-Object System.Windows.Forms.GroupBox
	$groupboxPolicyManagement.Text = "Manage Application Policies"
	$groupboxPolicyManagement.Location = New-Object System.Drawing.Point(10, 10)
	$groupboxPolicyManagement.Size = New-Object System.Drawing.Size(460, 340)
	$formPolicyManagement.Controls.Add($groupboxPolicyManagement)
	
	# ListBox to display existing policies
	$listboxPolicies = New-Object System.Windows.Forms.ListBox
	$listboxPolicies.Location = New-Object System.Drawing.Point(10, 20)
	$listboxPolicies.Size = New-Object System.Drawing.Size(440, 120)
	$groupboxPolicyManagement.Controls.Add($listboxPolicies)
	
	# Button to refresh policy list
	$buttonRefreshPolicies = New-Object System.Windows.Forms.Button
	$buttonRefreshPolicies.Location = New-Object System.Drawing.Point(10, 150)
	$buttonRefreshPolicies.Size = New-Object System.Drawing.Size(130, 30)
	$buttonRefreshPolicies.Text = "Refresh Policies"
	$buttonRefreshPolicies.Add_Click({
			try
			{
				$policies = Get-PolicyList
				$listboxPolicies.Items.Clear()
				foreach ($policy in $policies)
				{
					# Format each item as: DisplayName (PolicyId)
					$listboxPolicies.Items.Add("$($policy.displayName) ($($policy.Id))")
				}
			}
			catch
			{
				Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonRefreshPolicies)
	
	# Button to launch the policy creation pop-up
	$buttonCreatePolicy = New-Object System.Windows.Forms.Button
	$buttonCreatePolicy.Location = New-Object System.Drawing.Point(150, 150)
	$buttonCreatePolicy.Size = New-Object System.Drawing.Size(130, 30)
	$buttonCreatePolicy.Text = "Create New Policy"
	$buttonCreatePolicy.Add_Click({
			# Use input boxes for new policy details
			$displayName = Show-InputBox -message "Enter Policy Display Name:" -title "New Policy"
			if ([string]::IsNullOrEmpty($displayName))
			{
				Show-MsgBox -Prompt "Display Name is required." -Title "Policy Creation" -Icon Exclamation -BoxType OKOnly
				return
			}
			$description = Show-InputBox -message "Enter Policy Description:" -title "New Policy" -default ""
			$passwordMaxLifetime = Show-InputBox -message "Enter Password Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			$keyMaxLifetime = Show-InputBox -message "Enter Key Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			
			# Create the new policy via Set-AppManagementPolicy
			Set-AppManagementPolicy -DisplayName $displayName -Description $description -PasswordMaxLifetime $passwordMaxLifetime -KeyMaxLifetime $keyMaxLifetime
			Show-MsgBox -Prompt "Policy '$displayName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
			
			# Refresh the policies list
			$buttonRefreshPolicies.PerformClick()
		})
	$groupboxPolicyManagement.Controls.Add($buttonCreatePolicy)
	
	# Button to assign the selected policy to an application/managed identity
	$buttonAssignPolicyToSelect = New-Object System.Windows.Forms.Button
	$buttonAssignPolicyToSelect.Location = New-Object System.Drawing.Point(290, 150)
	$buttonAssignPolicyToSelect.Size = New-Object System.Drawing.Size(130, 30)
	$buttonAssignPolicyToSelect.Text = "Assign Policy"
	$buttonAssignPolicyToSelect.Add_Click({
			if ($listboxPolicies.SelectedItem -eq $null)
			{
				Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
				return
			}
			# Expecting the format: "DisplayName (PolicyId)"
			$selected = $listboxPolicies.SelectedItem.ToString()
			if ($selected -match "\((?<id>.+)\)$")
			{
				$policyId = $matches['id'].Trim()
				# Prompt for the target Application/Managed Identity ID (from the main form textbox e.g. $textboxSelectedIdentityID)
				$objectId = Show-InputBox -message "Enter Application/Managed Identity ID to assign the policy:" -title "Assign Policy"
				if ([string]::IsNullOrEmpty($objectId))
				{
					Show-MsgBox -Prompt "Application/Managed Identity ID is required." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
					return
				}
				Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
				Show-MsgBox -Prompt "Policy assigned successfully." -Title "Assign Policy" -Icon Information -BoxType OKOnly
			}
			else
			{
				Show-MsgBox -Prompt "Failed to extract policy ID from the selected item." -Title "Assign Policy" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonAssignPolicyToSelect)
	
	# Refresh policies on form show
	$formPolicyManagement.Add_Shown({ $buttonRefreshPolicies.PerformClick() })
	
	# Show form modally
	$formPolicyManagement.ShowDialog()
}

$buttonCreatePolicy_Click={
	
	# Retrieve values from textboxes
	$dispName = $textboxPolicyDisplayName.Text.Trim()
	$desc = $textboxPolicyDescription.Text.Trim()
	$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
	$keyMax = $textboxKeyMaxLifetime.Text.Trim()
	
	# Get the enabled state from the checkbox
	$enabledState = $checkboxPolicyEnabled.Checked
	
	if ([string]::IsNullOrEmpty($dispName))
	{
		Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	# Call your function to create the policy
	# ISO 8601 duration (e.g., P90D for 90 days)
	New-AppManagementPolicy -DisplayName $dispName -Description $desc -PasswordMaxLifetime $pwdMax -KeyMaxLifetime $keyMax -Enabled $enabledState
	
	Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to delete policy ID: '$policyId'?" -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>