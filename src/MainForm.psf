<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>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
AErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErp
JZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQB
gFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIG
AErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErp
JZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQB
gFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIG
AErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErp
JZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQB
gFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIG
AErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErp
JZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQBgFIGAErpJZQB
gFIGAErpJZQBgNJjAUC8FjuG0O12MwBQSi+kkQAgjnuRY57dbmcAoJfLSAAQO4BOp8Ps7KykTCaT
dg4GAErpRTNS4C8vL0vHu5mZGen4J4YxANBLYyQAeL1eaQcoLCxEQkICenp6pGEqtZYBgFJ6oRQB
QPzB6e/vl453BQUF0Gq10vGMAYBeGg+fAhCKf/7Nzc0wm83SaQDWAFBKL5oiAIhjl8VikY53S0tL
0vGOpwDopfJ4I0DxexSKqjC2AaCUXkTDbQB2pONc5Jgnhn/1ALC2vnnQGIHSL63VaoXdHt4BxHNR
2Ed2BDFcBFKrdee9v9nDAUCMazKZTyyDUkqjycgfHmH4eBc+5okagY2tbel4duYBQDwqtlXSgXR7
W03pGana9+hw8VtcX9+S2gK87zd7OAAYDCasbyhOzIdSSqNJcWw7Pky4samATm84KI/PJAAQcp44
HgAizwkh5CLxrvL5swYAUe0gzkf4fD5Ko15RGyB+s5FCX1SficYzx8ejlNLzrCiXxbHuOJ81APj9
fukASul5Uewc/P1SSi+64vh2nM8aAAghhBByPmAAIIQQQi4hDACEEELIJeQfDgB2DwMAIYQQcl75
hwKATOXAht4lTUwppZTS8+eq1olVg+90ASA5Jb3GEgDWDD6s6n1ScqCUUkrp+VOU5VvWPci2DB8P
AE+ePG/f1tuktEAppZTS861s04CJWfnHAwAhhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghF5D/PwBWGnYMVzXdAAAAAElFTkSuQmCC</Preview>
  <Form>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
0N3V0ed/Hv7z/wGUvi+wmOgAAA==</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}
	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	# Retrieve values from textboxes
	$dispName = $textboxPolicyDisplayName.Text.Trim()
	$desc = $textboxPolicyDescription.Text.Trim()
	$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
	$keyMax = $textboxKeyMaxLifetime.Text.Trim()
	
	# Get the overall policy enabled state from the existing checkbox
	$globalEnabled = $checkboxPolicyEnabled.Checked
	
	# Get state for individual restrictions from the new checkboxes
	$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	
	if ([string]::IsNullOrEmpty($dispName))
	{
		Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Call your function and pass the additional state parameters.
	# (Update your policy creation function to accept -PasswordState and -KeyState parameters.)
	New-AppManagementPolicy -DisplayName $dispName `
							-Description $desc `
							-PasswordMaxLifetime $pwdMax `
							-KeyMaxLifetime $keyMax `
							-PasswordState $pwdState `
							-KeyState $keyState `
							-Enabled $globalEnabled
	
	Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}


$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>