<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGfdSURBVHhe7f33b1v7ojb4zW8J5s+YZH4KMEGQ
IAnyYgbza4AgCQIkA0y57/vee885+5x9dt/b9ra3e7dVrN5777333ntv7L1XkRQpPcF30ZRlWra8
XSXx+QAPJJGLi4sUudbDxVX+i/+CiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI6NK49l//1//bhkePnzWkpGY3
vEhKZxiGYRjmAiY9M6/h+x9/bPgv/9f/q4bohf0b/jf/1X/VU1bTghWFHStKO5blVoZhGIZhLmBW
VWI5bsaVazcQvbx/g/jkL24wtCjDwPwuBuf3GIZhGIZ5Wxb+ZL7gbcRyfHxdi/H5zbMLQHpGdsOm
1oWhRTlGlsIZXpZjcFWNgRUNhlcUx5czDMMwTCxndFkRXtDO7Z6Z/rldDIvbrCgwtCBus4NB6YP2
2yOGGVqQYXRFieFFuTSO6PGeFjFNYtrENI6taTC5tHN2AUhJzWjY1LoxuqzEmLjxmgojCwosDUxg
fbAfE6M7GF5XY2xFgTExzApzdhSnXHZaTgy3/JbfGYZhmHORiTU1OsfWUNc5jYae2fdKY+8c+qa3
0D40h87RBXSMLKBrbAn90+vom16XfvZOrqJzZOE47cPh2zT0zL02ntbBZbQMLEoRv4vLpOt6ZqVp
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
Umt0UiIb/rEAMDGRT1UAfD4/Nrd2YLVaYTJbGIZhzldMZthsdlgsb86jxHxrc3sXXm943sYCwMRE
PmUBEMOKXfnEOBmGYc5TxDxNzLvErn7id/FTzL+cToc031KqNCwATGxFvDE+VQGQK1TweMJvLoZh
mPMUMT8TC/bIsUb0evGVgOZlEXC//ADDAsDEUFgAGIaJhUQKgFjg22w2NDU1oaKiAgaDQZqnsQAw
MRcWAIZhYiGRAuDz+bC6uori4mIUFRVhcnJSmpexADAxFxYAhmFiISfXAFgsFhiNRilms1maj7EA
MDEXFgCGYWIhJ7cBEPM98TPyO7cBYGIyLAAMw8RCThaA6OtYAJiYDAsAwzCxEBYAhokKCwDDMLEQ
FgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYA
hokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJ
CgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoL
AMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDD
MLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCx
EBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAW
AIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCG
iQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokK
CwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsA
wzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMw
sRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQ
FgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYA
hokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJ
CgsAwzCxEBYAhokKCwDDMLEQFgCGiQoLAMMwsRAWAIaJCgsAwzCxEBYAholKdAEQf4uI31kAGIa5
LGEBYJionCwA4nfx2oy8QVgAGIa5LGEBYJioRAqA+DkwMICGhgY0NTVBpVJJr1MWAIZhLkNOFgAR
MR8TcbvdLABMbCZSAMSbYHFxEWlpaWhtbZXeLOJ6FgCGYS5DIgVAzL+2trbQ09MjZWlpCT6fjwWA
ib1EfwUg3gw6nU4qBPwKgGGYy5KTBUCpVKKgoACZmZnY2NiQ5mtfrQAoVRq4X66WYJgvGbGgDwT8
L393we/3SQt16XqnU3ptnsQCwDDMRczJrwDEfGt1dRWzs7MvvwLwfL0CsL29B41GB53OwDBfNnoD
jEbzm5frDFCrNdjZkb322n1XAQi/gTzHexIwDMOcl4gSEPm60+kUG/55pAW9uE7Mt8SHna9SAJxO
FwwGE0wmC8N88RhN5jcuExGvSZfL/dpr910FYHNrB1arFSazhWEY5nzFZIbNZofFEp5HmV9G/C7m
W5vbu1+nABBdFG8rAIeHR9Bo9VCrddJPhmGYcxfN6fMntUYn5fDwUJqfffYCcHR0FH0x0bknFvon
C4B4oxARXSZiHvfZCoD4zkF8DxHZD5FhLkoi36MJBwcHsNlsbwzDMAxzkSM2GBQfcCI+aQEQq//F
foeiYTDMRcvJtVfiTcLXMsMwlyWR+dnJ+dwnLQBERER0MbAAEBERxSAWACIiohj0wQXAzgJARER0
YX1QAVjXuLCr90g3ZhiGYRjm4mVL68aO8T0LQHpGdoP1ANg1+bFt9EvNgWEYhmGYixex8FfYj7Am
M55dAB49ftat0NultsAwDMMwzMXOmsyAqYX1swsAERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
EREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREdE59f8H
nyRh2ox335kAAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	# Retrieve values from textboxes
	$dispName = $textboxPolicyDisplayName.Text.Trim()
	$desc = $textboxPolicyDescription.Text.Trim()
	$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
	$keyMax = $textboxKeyMaxLifetime.Text.Trim()
	
	# Get the overall policy enabled state from the existing checkbox
	$globalEnabled = $checkboxPolicyEnabled.Checked
	
	# Get state for individual restrictions from the new checkboxes
	$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	
	if ([string]::IsNullOrEmpty($dispName))
	{
		Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Call your function and pass the additional state parameters.
	# (Update your policy creation function to accept -PasswordState and -KeyState parameters.)
	New-AppManagementPolicy -DisplayName $dispName `
							-Description $desc `
							-PasswordMaxLifetime $pwdMax `
							-KeyMaxLifetime $keyMax `
							-PasswordState $pwdState `
							-KeyState $keyState `
							-Enabled $globalEnabled
	
	Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}


$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>