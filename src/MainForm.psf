<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAALW7SURBVHhe7P1Xb2TZuq6JnUuhf8cBWldSQ62L
lgAJ6msBAgQIUJ/T6m3P3rvWWrWqKqvSe8N09N5777333nvvbZARZARdeEaQfIQxg8FkMh3Tm/oe
4kVMTm/GHOOdw/6n/yQIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIwn/6T//p+v/+v//vi54+8ysKC48uCg6JFIlEIpFI9B0qMjqh6NKl
P4r+u//uf1d0PrF/hf/8n/9zXVZhFWMru4wt7zK6tC0SiUQikeg71LhKy5dM3Lx9n/Pp/Ss8fRZQ
NL66R8vwIs2D8zQPLYhEIpFIJHqdBj2/LRfUK9u/p87v703yrt80OE/HhI6uoZl3G4DIqNii6XUz
rcNLtI141Dq2TPP4Gk3jOm3aO18kEolEoj+z2keXtfSyoW+Wxv65t0qt0zQwT/uY2maRxn71/9zb
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
gIDCRm343CNVXnt0gG5jQ0u2NtdXtCFz3VYTFWWVbO6o/R2yvrHBoRru9sDNkUuN/LaKXbU3OzxA
p9drA9VsbW69tu32eQOgvqLOdtls0C2jM3oqOer1G9icDvZPhtRVw+8u6wy4XTbWVta1XtFUYFPn
6rTusGHcxn1iNhzWffb2PT3v7W3pMZj2sO7tsme2YdvbZUctczuID3rMk6wqnO6T6z92o9tY14qR
jRurbO977qFlx8S+7YCjAwu6LTXC3xEry8va0NEK884mJrNVG6Vv17TN9q7nGryol0j1GneW9zEA
atvzL6BI9LFS4VK9Q+pXDIDodRID8A2hEn81+p16KEragzCbsTsc2KwWzBYrdpsNi8Wq9cimltvs
duw2q1az2Ga1YtG+AKxaBytqOFiH3Y7lpMtaFQmoY6hlNrtnn+o42v5tVm0ERLVcra/W1Y6n/reY
MWvb2rT9ePfhDUBKKlCoMlNvQqdQ89VXiHYt2jE95+rdhzqGSvzUfixW9dWirs2C3WHHarV4zsG8
71lms55eh7pW7/VbT/ap2qera/Csazu9/tPzV9t6r9/svf4Xx9bunXZ/rZ57brdrx9ASd5vds9xq
xaq+rmw29k+uXW2vrtub0+HlogbgbJbt+WxckehDdbYISAyA6E0SA/CNoRJElaCcH372Q2Q6aad+
fv55XWSdi0gFjvOowPSprud9ddHr/1idzfXw8j4G4Hz2s9dCva1G/nmd1pJX48q/Zvk7pdU8P9Ry
eE57IDyZp6a1ugWvOdeX9/Gitvz58enfpnd1QKSk6je88/ivkTfWODp8/22V1P3Q6lxoOUgng/uo
VjjagD+e+/K289d6bHzN/C8lMQCit0kMgCB8Bj7UAKhKf/r5GZo7utizqZHoPF9y3n2pl1El9qrS
n1pX6/Tg+Ihdwyptba0sbuxp6x0fe5pKak0mtT4LXq4c6GnF4KkMqHZx5D7AZNrFYdljaWUdl6pY
6D7AaNzWWqTsbpuwOtS7eaxFBJ4qKifnwLHny9NhYainnZaWLkxmTxfEqoLhaTNPVblVJZgn1+nF
deDUmkCq5Sqh926ntlJGQlUktVh3T4tkvF+23gqN2vrqfLVB+VRFSHVynmOtL07R1tbO5p5nW5Vw
e5rQqvU9v2fvi1rmrVip9uxy2NjeNWPZ2WJlQ7UKONLmmbZVMdARpi0jB4dqm0MczgPPvVTHUBsf
H2LaMeJwvTrWwJeSGADR2yQGQBA+A+9jALwmQCXse7oZEqKTKMgv1Zp3qvmqqMa0tUVbdTlNvVPs
GNfZMO2ws73J0soK23sW2ioLCI+KJim5BP3mJlsmM5a9bfSGbfa2jazrDFgsnmPbrQ52jess6dax
WPa1TmdmhptIzK5lY26Yp/7x2I6OmB9sIDGzEvO2jvjoODIyc8gpKGdhZYNN/Qob27vsmfTMLqyi
vv13VkYJDoomPyON4soe9veMmB0uzLvbDHc2UVzdzubmCj2DE2xvb7IwO0ZhXj5dwzMYt/Qsremw
283Mzsxp9VkMOh27+3Y4stNQXcX43CILi8tYrHZPEY15ny2DnoqCAkYXNjCsL2GyWNg0rLO0qmPf
ukdRejKREZHkFjRjNOjZNTvY3jJgNO1h2tSj3zBitdi1/gFU88st/TK6LRO7u9tsGrfoqiuksG6Q
qc4qgpNK4dhJW1Ue+dU9GNfHiYhMICs7h6KKRnQbm+hWF9m2WNnULbNu2Gags5GRhfXT3IMvKW/Y
EgMgepO+SwOws7OLYdPIltEkEn0ZbZ3o3PzNLSXjS5Udz4fZtxkAFRmrl1C1mLDZbYy011DVPqWt
21JXz+jUNHlJCTy6e5ff/36D6JRMirJjiU6Owc8vgIdPnhGRXEhBZhqPfYOo7einNDmUX68/JyrI
l2e+8UT6Pebxowjy0hIJDgwlOSWX1KRoEtLj8PULxt8vgNgYf6JzqmmpyeP+fR9SszLISArjoW8w
BbnxPPYP5PdLl7n/LJSs9HTS06KJTo7Gzy+YQP9Ihue3sW1N8fThE8IiokhNSOLq73/lSUgcgU99
uPzLTZ4GhhHm95zngeFkpKVRkJrC9ev3SM3KJyXRcz7P/IK0Fi+p8SncvnyZ8pZ5jp16klPiyUxJ
oyAjh6SMChYWp4kPDeb+zVv8ceke6Xl5ZKZGEh4byfOnz3j05DnpBZWkx0fjGxhD1+Aw8X73uOUT
QdCTh4SHZ+D76C6B/olkJkYRHBRBelo2aalRxKbG4vssmNDQYELD/MmqbKEsK5qHT4PIzs8kOioY
n4BQ8rNjuP/Mn0u//oFfeBIZKUmkpUURFhNOkF8QkTG59LQ3UdbYjvPgQHvGKiL9UvK2wlHhTwyA
6HX67gyAiminpue0wLuhN4hEn18begyGTQybW9r02WVq/vTMHDs7nqz314XZdxkA9XKpL1rVWsO0
NE58XDrN9e3EBMaQlJRFdGg04c98uHLzIWnpGeTnpxETFUJEfCYVZeXk5BURF5dK17iOg711om4/
4rebPkSFhPLgwTNiggLwDYwiLiaAezee4hcfQ0F+FllZCfj4x1FZXkJGShwxMTGkZGTR2ljJr3//
O5m52Tx5eJ+M7EwiQ325fP0RCQmpBPn5kZGTTnREINEZtQx0NtHQu4B5Y5KswgbW5kZ4fPUGd+89
Ijkjh/hAP/64covImEQKi0pJjA4nKjaNnuZmYiNjiImKJjgsgvy8FG4+jGBmdkrrsvj57RskFLVz
dLBLbFQQcfEZ9LZ2EOYfS3JKJtEhUQQ8uMPtR4FkZKSTn5+Bn68vyWn52hgJBQWFxCdksmB0sjkz
xLPfb3H57nOig/x59DiIsGdPCI9NJDLMl7t3/QhOTqA4L4OE+HBCYnOpKCkgKTFey0HIyi+iviyT
v1+6Sn5+Jndu36OwMBvfJw+5fc+X5JR0nj99SkFRNs+fPqassZ/25ibtPKpaPAMHqQj0S0nlACgD
oH7FAIjepO/OAKgywuWVNU9N75Na4SLR55T3JVGJtHoxvG321TL1qyLT3d0PNwDeF0pF1qoMe1EN
8lPZxNL8HPU1DczOLDHY1c3YxChzs7OMDLTSNzrNpkGvdVqjetlbXlbNGm1axcGxrg6t58iZkVH6
h8aYHRpicHyWzQ0da2s69Dt72jC1anCadYOJ/Z0tmuvK6RsaQW/0XMfK3AS11eXagDtjfS00tXWy
uDjPYG8vK+t6Rvqa6Rub0XJAtjYNbG2bcVh2Wdsw4nLa0a8uM9DXwfSqgam+PobHRxnu72dhRcfm
ppHpoS4amjuZGhtibHqZtfkhmjt60Om3tIRLt7RMb2sbC+tGrT5DV0s9zS1NNLf2sjA9QW1tG0uz
i/R2dTMxMcbiwizdHY2MzS2jP+nMR7e+zsqKDovDxYFln56mJnpGppno72d0cpax7m6mFlfYXF9l
VbeBaX+f2eFWuobGMRh32Nlcoaa6gpHxSXYtqg7BIdOj/VRXV7G8tkp3Sw2d/cMszk3R3zeAfnOD
rvZ6xueWMarmoqYtmmsrmVk2aPUKzmfRf06piFpF2mpahT8xAKLX6bs0AEvLq1qAPn8xItHnkArw
Z5ssqv9VL3LeiFUlwJ/KAChdFLVPdQzPcY5Pa96/CVXpTa2nKu95q+BplQPP9OnvrfX/Vs4Ux3kq
JXp6K1StAFRirVoPnK7hHeDm9P/Xj2Fxdn1vBTzP/2qYYhd2p43T0YvfgfeeaPdFVSxUtfTPtFB4
GU+329p5nSnG8Va29KIqY6rrehvHZ9b3VEY8xGqzcOD+8pUAxQCILiIxACLRO3TWAKhfNSpcWlqa
NliMyhX41AbgW9f5+g6Ks8tVMzlv0zitIpo2/0Vlx3fr1XVVS4Dz876U1DM6z4tzcZ0MTKWMyuu3
/RTNAD0V+tT06+6Nd9nL88QAiN4lMQAi0TvkNQAq0KtR4jIyMoiPj6eurk4zADrdxqczACdfqirR
8H5QehMQb5//5yP7szptcXdyHi9NqRyDj8yK9iYiarCcoaEhBgYGtAF0Xgya4zopg3ZpX8ze7dQ5
q/naV7W3Pf2ZRNQ7/eLXrTUF9CRuXyfhV1LXq57Z6Oiods1Kk5OT2jJ1Xip3YXtzA926gQPVRPDM
uXpzELTcA80YeYyT5xm+es3eafW8X11+ck9Puin2ruedd15quRgA0bskBkAkeoe8BkC9KKpjIe9A
OGogmU9ZBKB95dp2GRqawHZwwK5hnYb6ZqwnH9w2i4VdNerfmeN4k/cjt/oSPWRtaYy23hFWZiZJ
S0lhfG6NvoYK4jOLWVpfZ2FtTVv/bSbiTVIvvzrPhoYGxsbGmJqaYmZmhvr6ei03xFsUkZcQRd2Q
Z7Co9voaZnQWDPOD1LePYdIvMz6r09ZV16469zk8cmuRi0JVhDRvLZGTU4rJoiKcA1wn987b+c6X
lDrPzs5Oent7mZ6e1q63tbVVu37F7voUESHhpMTFU985e/I0PGzrV+gfGGFjc4dDVRywb2RoYEjr
8vrArTpdUk/yWOs/QOswyO3pt0G7i+qeqNwFtxp1E8Z62+mZ0GEzLlDd2PfScdpqqxmZM3iKX07O
WwyA6CISAyASvUNniwDU/2payRuxfjID4D7CtbdGSkohNreVhGd3ue0Tz/zsEA2tdfg+fU5+RSON
jY2U11TT3D2GQTdDeXU1ut0DjmxbFGWnkJpTSk5SHCkZpbRVlZOZW8fEQAdpGYXU1FcwPr2CxeZ4
75711MuvIgx1fJVgeRNtlRiOj49r0869NSKePyGtsILW2iyu33tMZkEufo9vkdEwxlBDDk+CE6gv
TSAiqwCL3UFLaSHPQyJp6m4lJyWMpNwMAgOjKK8oJyMhjvjoZBpa2ulo78LuPv4kWeoXlXpu6nrV
c1fXr5mstTXNFCiMS0P4PQ8hJTWFvOx8gv3uEZ9TRnJUJA+u3+HWQ39qauooyEwhOsCfS5dvU1xZ
T0luHHE5mWSmp+H3PJT+6S3se+uE+t7FPyaJhOhoImJymR0fIvDJE/wDwnnwPIjU/Ayy0nMID3pA
REYxLdXp/H7jPt2zW1rHRN7zFgMguojEAIhE79BZA3D+Rfn0BkBHdl4dx8c2Hl65TFRsKg/++CuX
fv+dm49CSE+O59YtHwKDwwiNiOPKX37ib7/+RmHzBE7jLDml+RQX1bCkW6WyOJfbNx5S07MIjg3S
kwqprM2jb1qv5Ri8b0KqXn51LU1NTdr5qmtX80ZGRpiYmNCub7yzgoCgSB7fvczz8ARKi9K5eucp
JcU55Nf2sTYzQHxMLEWFmSSmpbOgN1KSmUdJRTU3rl+nvLKMiBA/rt98yJWrd2hpG2Squ4N7D65R
0DyiHeP8eX1OqefW3Nys5fyo56+KfJaXl+nu7tbOxTA/QFRMBk215dy/cp3f/7hOSFg0oc+f8Ntv
t0jKyOXJvdvkFjcw3lJPVFQSof7PiU5KIy8zhsv3o+hsqaesYZi1oVr++h+/4vPwPpFpFXQ0VRL4
KISHN27yX/7xEpU1zYQG+3Lz0hUu/XYN3+dPiU1OIz0jjY5xnRgA0XtLDIBI9A59SQNw6NgmNiiI
5OR4njwNprWzj8LEMJLyCshKTyU2JpaUzGJaWtqorKwhPiSE0Kg4Rpe3cVs2yM3KoLyqiZrGaqIS
EygoraUwLY2gsER6xmdpKM9lYGwJq835QTkA6npV3QdvoqLmq8RQlYsrJof72XPBjm6KrJQ4kjKy
6OlqISYymL5pHVbjAg219TTWZJFd0YLryElWdABPQ5OZW5qjNDeR6tYumhtbGRzoJTsxjuaWdsJi
gpnbsnD8hYsB1DNUOQCqyMdrAFTRhzcHYHdzlbHpVY4OzPS2NFNWkk/3+BwtRUXkFxdSXlxK7+AI
Vfnp5BWUU1NWTHPnAK21OWSXVDA4NsPy0jzjM2s4bfvUFOdQ1dbJxMwSKyvzNBTXkJGcQU5uCXGx
idS1dzE2PExteR6d43P0NBQSEZfImsl6WtdASQyA6CISAyASvUNfygB4I+5do4HFxSV29y1aEz27
dQ+9aRu7dZ+d3f3T7R2OA9wuB+t6PfYDN8dHLsZHelk1mTmw7mtDOatSZvu+SRvm2LFvYHBkBKvF
ht3hfO8cACWVBa4S+9raWi0nQNUHaG9vP01gVL03VW59+KLu4QtUkz7V5/8ZDg+drK6svbWJn217
jcGJudMmil9S6rmp+g3e61VmQEkNAuUpt1cnrir/vdpS4KJ4mnOqioFnbsKxalnwupv4elSOztnz
FgMguojEAIhE79CXNABKLwbq8TSnU2Fe1RxX66pEx60NkHMibQAbzwA7WoKlVa7zzPcOvOPdXtUY
P9IGBXq/L//zUsdTvypC0Gr2n5zb+fUuqmNUW/03n5P7xE2cn/+lpN1fl6d1g5L3OZxf71uSGADR
RSQGQCR6h760ARCJPlZiAEQXkRgAkegdEgPwsjxZ1i962/tRpSK789f+vUgMgOgiEgMgEr1DYgBe
SJ2vqgWvOsZRNf+/R6lKfB5Na7/nl6tmjarNv6rw972aADEAootIDIBI9A6JAfBIvfzqHgwMDmrv
oVbH4KSb3AOnXVv2JtnsdhyO8+vYcDod2F6z/ul2NrtWGc5TB8LTDl+dh+otR907rc6D6+CV7d4k
df83DQZtwCClbZNJO7fz6yljoDp88tZ3+N4kBkB0EYkBEIneoS9rAM6G//OJj0tbX02rX2/FPzXt
7Tb3fEKgdBbvPG379+wNUO3fYrEyNz2ptVHPq2pgdXqG/PgC1rfsLx3nPIeqR7/X1PRXo3q+ra77
sdtJRUk2NR19TA8MkZ1QzPLCLCnpaUzOz1GTn0dTl6dXvotg2NigvqqSprpa6mtqqauqwn3g6dDo
LCsrK1qHP2IARD+yzhoA9atyvZTM5n0xACKR0hczAC7VNa6dtpoycnOy6Z9Unbu8jNPpeT8OHPbT
BFV9GVstFuzOkxknx1WfyWr/8yPdZKSl0j+xcJrYurVEwrv+kdZV7bsMgWYArFYmRofRm/SU5MUQ
HZ1G5NNg2gZnTvb8eva3VqiubWNn38zSzAR1FeXU1LXQ0TOK8+WWgS9xeGBHZ1ghM+YxzxMLaawq
oaJjgPmpTkKDnnLn2kOqO4feaiLOsjg7w+jwEAtLK0zOrdDY0ML8/CLFNT3klLWztmHS1lPFHGIA
RD+6lAFQCb4KF6o3z+HhYU0mk5Ht7R0xACLRlzIALvcxbouesIAwKiqLSEwsYmFxjNH5VZbnZ2mt
KiM4NJ6R8REKy+pZmJ+iubGBqJAQsspaWF6Yoq2zlRX9Gq11dYzOrGu5CGXZaVQ3NJObms7o2BQD
/YPEhkf8/9s776+2sX19/5ffH+763nXLuWXmnDlzpmSSmfSekEDoptsGY3rvvfcSeu/ddGxsbFre
uz4SAmMgycwkHEDvs9YTHFlWsaWtV1tbW6jvHsXoQBtGF1exsmCDwynPIzh7MPE+qMj6joyNYWm8
H+WVtWhprYUpIQGNfeOn1t+Xzdl+/PLzY/SNzSDm7VMERSUj3WjAk7cWqEXJxYx1NqG6vBTZldXo
7m5CRWMbmstL0TM4gt6ubhhNMZjf/kiK8GJ6YhxNDY1o6ehBbXMvCouqsL66DP/oPPzwOA6bdqc6
HgMA1YFaAJDtoLi4GCEhIUhPT8f6+jo2NjYZACi9vABwiAPXCoJf+8EQFIiIsEj8+t1/4fZjPwT4
vcRP393Gm8AIRIeF4sWrtwgMjkJLZQ3ePPOD0ZKMgLfvkJljxW93HyA6IgaxxkzIFfrSvHyseICO
ojxYY2Lww7ff4JufXyA1IQ7f/M9f8DzMirUtedrhxzsHUtoAuNwY62uB//1bMKYVoKK0BCGhIaip
bcWybePUd+DN4ngXQgIMiDYYERwQhua+SfQ1l8NgzMXpixSn2duYxm/f/4yMsnqUFxQjJsSMjLgw
PHgeiI6e90hPS0aKtRzO/c+rA5AagKqqejS2DyKroAbhwaFwOuy+ozEAUF2oXQKQ7WBpaQkFBQWY
mJhQhvESAKWXHAD27AvIyq3C7u42rGEh8HvxXHmwTm68CQ/uP0BYWAQy8kpQkJuDyPAI5GXkwxIT
g5g4C2KiDUiwxOJtUDQGhkdRlF+iBICy9AREREQhJycTSSFxuH/vKR6+DkZWUiL8X79EVlUrbIsr
ygOCPqcGoL+/D3u7LmxuqTv+jksrDLy+AB/622vRMbKAHZfz+JHFn4tnx4mtbZcyA5ddvV6/7bDD
s3eAPffOZ1f/C3KwrywrQ1FBMVKsyWisrfYdRUEO/tIDIAMAvclqAUC2C9kWNNkIkNIjLysAKIW3
xw273YFdefTujgvLizOYsa1hw7aEBdsy1mwLWF7bVM7EHRvLGBgaxfraMhYWV+B2bWJsfBwO147S
sl7mKzusfd2G3p4ebDh34d5axcjoBFZWbNjY3ML87ASWNu3YWt+Ac+fTNQBSXdjZ2YmFxUXYbEvK
I5HlzEH6yhel5fx5Li7ZsLJsU8ZdWlo8Hn9x8eLPKEprfZsNtqWjeR3N02azKX8XleGfmMap5VjC
7OwMRoaHMT4+du4yy8G/q6tLmcdNDQCyzc7PLyoHANl2qT5VyzCnUt2v/V/7u7KyisnJGQYAqm8v
NQDIM+CPHuoi78kk5BnxB0ed75zcEifd0arTVLsOli5+1UZ92h0BMo4yHW28/b3j17I8ckudLOHh
/r4y7sfO/jVlPLk+ODk5iampqWvp9MyMcnYvSlW/7/uybhIMfNf9OvmxACDvSQOvkdFxTE7NUHqu
o2MTWLItK+UEAwDVrZcRALSd6zqorctNRn473/W+TmoH+/MCgPb8Bi0EUnqecuYvf2V7YgCguvUy
AoCcVctfSr+U8sRCKbC1ACCFuRTk3Nbo71G2mbW1teOaJRnGAEB1o2zwXysAyA4lO5Y2jNIvobTV
0M7Y5Dq/bKfc1ugfUduWGACoLr2MAHCeF16TP6rmPTP8d+g77ZPq47PjXlU/9R1ct/X5Gp4XAHzf
P284pefJAEB15+UGgD2lQZ8gjfZ8d0DpLVDp4e9gX7lG5/u+9I3v+zm1caDaeFCbhszDd57y+gM+
+NwJIPvjB+W1NESUXge119JCURoc+i7DqXkfHOLwqFHj71V53sDRcsn3py2X0uhRvqAP6nJ5K40k
Zf21BpLen5H10BpY+qpM/waGhY8GgD11G1Ku92oNT4++N3m+gu+0fNUancp2ft62SG+eDABUd37t
AHDswSF2t1fR0TmI7s5a1HUOnZqmcOB2oCIrHYEhkRiaXfd9GwOdbZhedp0atu/ZxvzcAlbXNtUB
uxuoq+84fv/wwIOSzCSY4s1IzamDbxO/hfkl5a9zawPOo+6GHZtrym1kW9tn+9HXkIPu+uIEukcm
fN/6aJ8BGrKuC0edC62trh/f7z8+2Iuh4REUleTBrj6L6JiB920YnVmBY2sNpZk56J5YVoa77BuY
m1vA1vY5/Q4eONHZ0wXn3iH2z2lQd931DgCa+wcfsOfeQIoxCmGRSZi0qc9yWBzvQ3VDF/Z8fh85
wMv26c3+jgNzc/PKrZ2rG6e3f28OD9Tg4btc9HrJAEB16dcOAFpXnNIRz+HOCt7+dgt33sRgbmEM
loRYJOeWYmBwCCMjo5gZ6YI1vQzbDidaq8uRkpIJqzUGRY3v0d2YjTsPXqKwrAQJyVaUV9cgKcGK
qKBA3HvyFu3dg2gozoE5PgXx5hRY4xPQ0D4FfHDDFBaG7PxcmKKTUFORjfisYjTWVCIxJhr37z5B
TmEhggwmNDTUItWSiGd37+FtRDI62xuQlmZGVUsT0swm5Jc0oDwvE5l5TTj4ANSVFaCquhaJZgsa
m9qRYrYgt7AO01OjyEmxIC7RipTsIlRUlMOcEI+E1Hz0D/QiJ8uCsLBAPH0VipzMFMRac9BYmYfk
tGLUFGfhP//tW5S+H0BnTSZirCmobunB7PggzHEm9E+uorcxC///X/6BxvYWJKdZ8Ob1S/gFx6Ko
oAAJVgvMydno6e9HbloMipr7UFuai54pG/Y8R7/F9va1VtZBtlfZvrQAIA1OtW3N6fJgd2sW4UEh
MESbkV9QgJS0eGTmpiLEkIT2llpYjWZk5lVgeHgII+MzcNgmEBuVgIHePmRmJiA8PAQ//P3vePQi
AIXFpUhOiEdGbg2GemoRER+PsvIKmGOTML/swu6u+0Z8r3pUfjcptxgAqC79mgFAuzVLXju2d3Do
XELAw3sIiDQh+NkjfP/TbbwNCMYLv2cobBqEbaILydnVckqGHEsCAp4+x1+//R4PHjyEMSkFOTnJ
+K9//Q/cf/wI3//jPorKqvDq3n0YjFZYzAmICwjAv//lb/B7F4nnd39BmLlMToFhDg9DcqIFYYFB
+Pmbb3Dv6WsEBrzFrz/8jDeB0UgwmhAcGIy7919htH8I5tBImC1JeHDvMUorC3H39i1Y0wuRmRiP
l4/v48GzKDj2DlFelo6MlEzc+f5H3H/qh+cPHiEwMBwBoW/w/IU/QkKjERUZhbu/PkaYIRpR0SY8
/OF7/P3HX3D79j1ExFpgiorG21cvEBJpxVjvKPISjfjllwdIsphw59v/wb2HrxAUHICgaBNSUzIx
Or+O2qxY3H8ZiSi/p/jp9m+4dfsJktLS8fC3RwgOjVLm8/zOLXz77d/gH5mGmuo81HSNYW9XOmKy
K7/ZdVfuApBCW17LdipV/dodANtON3bts/B/7oeGrkHkZliRl5+JJ48f4vHDZ3jyPABDfUMoTo7H
3afP0DW1ioWBRty9dQe3//YDfrh9F7dv34chJgGpqel48/Qxwk1ZyE2MwRO/ENRUlyHw5Sv88sNt
1L6fwv7+7o35XvWm/G7atsQAQHXn1w4A8lda2cr1113HsvKEvLnxXkSEhiAuzoSukSG8C36O4eUd
wONAUWoSDEHRSEwuwGB/H6yxBpS3dKAoPQ6B4REoyExHQnIycoqrMTE9i5KcFJhN8cjOKkBCYAT8
giOUhwklhYfCml+Hgw/7qKtpUvrkbysvhtUYjZSiSrSUlSEkMBAJZiOyCirQ0NiMgsxUGKOMyExJ
hsWShtLSXBiN4UjMyMPg6CS62luQGWdEaHQS3PuH6GosQdDLcAS9DUVKZhHigsKQX5KDoOgQNHf0
oLqmEQ11NUhOzkJ9UyvqahtQnp+HxHgjiqoqkGQyoay2CfW1tci0GmE2ZaK+vgUzc4soy0lCVEQ4
MsubUFlqRVxuCUY6avEuxIDwCAMyCxsw0FaLWGM8SspLkJyQgMSUHNTVt6C+vgGVxYWwmiJR3t6H
qoIsDM2tKU9G9K36vI7KwV62K+8A4N0PgFwCcG8torpWvRQ03VuFMEMosvMLkJycjZK8DESFGdFU
X46XIe8gj0jamh5BuF8AMjKzYIk3o6iyHBlJCUhJssJktqK1ewRDvZ1IMUfh2x9+REx8BiL836F9
ZEHZF3yXkar9Nfjef3+V1JaT/QBQ3XoZAUD+rza0UQtvacwmyDDb9AAqmzqxrzRU25eu+5TH8kqD
PZmHVK/uyoOE9vfgURrtAa6dHaVBoNqboNqwT6YoZ7haQ0KZtlynV/7KNV5pDKhcs93Hjtuj/N2T
hnjKo4KlwZjakM6pTFttlCd43B7lc9IgUGsouC8FyP4BHBtLGJudVe5ckAZ9sm4jvS1o7VfbBUjD
RBmmvScq0/S4sSc9HiqFpLwvbQr24HK7j8cV1EZ9TtTXVmJqxQF8OIBz24Edz64ynqz7jntHWS7l
O5AGa17z2d3bhdu1haGRIbj35Ts42/DpOqoV2vLaNwB4b2ta4z35baWAF9Tt9gPcnl2M9LWipW9c
2T60niXV33zn6Dc+aRQqv4V8dKK7BYFxFszYPcr0jxuf0nOVWhk5w75KrqysKNuNbEeyjAwAVLde
bgDwUjtLOGp85TtcO1gdvz4arg07mdbp4ade+87zvHG8/i/z8O5B7vgM5qg74ZMzGnkt46rfgfxf
U0MbX/3MyWvvaXpP23uep8dTD+Zy9u493qnPnVou32U96ULZe/jp7/B6Kcv+6QDgvZ2cPTsVtQc3
eY9/seo42mc+SIC8YBujarfa2uW/q7itLS8vK+WVti0xAFBd+k8LAFdMrYCXB4SMT0yd6Tv8xjg5
rTwwyeFQW87Lb+TLSYF9Ul59zq1zf9Q9CSYyT69nPGjK/30PIFqhLa8vCgAyjrYtXgd91/G6K7+H
nG3LeglSXlwVBSnf5Po/AwDVtZcaAJTCQKrs1ep4rapeqa6VnVOq2D9SEKpnX3JxQP336GRM/b9y
v/Yff7qdBABZ/rHxSeWSgByUbqrym9qWV5TvS37n1tZWNDU1KXZ0dCit6dWzWzemRgfR1z+i3CKp
1RzINOT3Un7L42u92j326vvagVv5zNF3LOWbetlj//ihTvK+PN1RLmvsedxwbDvVmpCj6cgjll07
px/l/KkAoBXkUtUr3bxedWU5Zdl9Q4B8D2ofDmothFajo75/NpxJbZpc0vLdthWVS2Mq2q2Lx9/n
0aUweS37kXethlwKuXCaH1F+D1k3bZqyHldFQbYP7TIAAwDVrZcVAPbk+fbONTQ0dsC568HS5Bhy
c4rhOrr9em1lBbblNexrR3UvpLpVrrWOD7aguLoFg+/bERMdi/d9Y6jOTUNoXDIGxicwOD6ujP9H
qmW1ACD7301neWUFyyuryuu6ujr09fUpTw+URwVLGHj//r3y3vpMH0KCDEg2m1BU1YeDg13l99nf
82BmpA8VlfWYW1yDy+mAbX4CVZXVGJ1awLZzG1vbThzue7C6toHdvQPl4ORxO+GRvy471je3ldsS
XS43OusrUd4yjI3FIeSXNuPwYFe9V//Qg4KMNHSOSF8NJ+HuYwFACnIJMHJQ1bZR7a833sPOO0P0
Hn7C2bPJ4xDqMw/v947/f4GCnC1rtzbKesn6yPXzmpoaVFVVobq6GhUVFcqTHNVLRW501FegqKIZ
Do86Dfv6CuaXVpVGkOpM1adoSjjbczvQXF2GoqIiLG2q/SJICBM8zk3YVmQfP8DszDz2lH3yAw4O
P8DjcmDJtnamZuZTMgAcwQBAr7KXFgD2D7G3NY+EhGzs7G0j9NEvePDCiJ6OSqRkpeDh/cdIyi5G
TnY2ElNTkVfegvHBNpgSLRi1OXG4vYSM5AQkZcjteCblLoHq/Byk5zViaaIb8fEZKCnLQ2fPhHIb
2MdqEs5TTwFAzv61ACAHFu9aGgkCUhMgrE13w++lP6JjY5GSmIwnD35GcGwSwt/54+5Pd/HoZSBy
c3KQYolHXNA73LrzCBk5BUizRiLKakJkRBT8XgaiqXcR26sTeHb/Rzx+G4zQoFCEGKzo7WjB83v3
8PRlIF69C0WM1YQEYzxePL6F1xEJKM414ddHL9EyuvK7AoD8jnLwFGTblG11ZrADidZkZOTX4Oh4
Cfv8JJo7B0++mGN2MDR6sh0c7qyirKIeZy+WqIwNjynzGO9uQkJCAjqHbEfveNDd1QeH+2y5L7Vd
3gckWXZZDy0ACM3NzRgYGFCGS3W1/DYSBoRd+xwiQsIQGhKNmqZejI4Noa2xDNHmXKysLqP7/XtM
zNmUGhT7thOOpRH4+wWhvrEJY2Pj6OoegN3hxNzUJPo7mxAelYSppXGkp+dj3raI6aU1YN+BvKRY
JBe1qvM8Z7+5yIsCgHz1su7a3+MDs5QnHw0KJ3HqeFrKR3zH+7QCAwCl/4QAkJRSDI9nE09u30Gc
KREPf/gWv975FY9eGZBojMK9+y9hiIiGISIGf//3v+DHW7eRXTMA9+ooUvMzkJVRjImFeZTmp+H2
rQcorB/G7toErAl5KC5Lx/uxFaXGwLdA+pR6DgBysNR+u5mZGeXAIyyNdcJoyUV3ay0e37qNO78+
QGS0CYa3r/HjT/cQZ0nGqyePkZJZiu6qckRGxCEk4C2iTPFISYzE3VdGvG+tR35VN+Z7KvHDdz/j
jd8rGNMq0NFUBr/7/nh29z7+5d9+RE5BOUJD/PHg1q+488s9BAcHIsYcD7PZiKaBhT8VAISq7CRY
soqQEBOPjvddqGuuh8HPD6Ex6Whu7UBbaw3ahyYw2teN2vIyBL0NQmF5E6TEnmwvwm9PQ9Hb24yy
5nbsbK+hsqQSC6sb6Kiy4tFbo3JAK0tPQkRkNBKteXjfWoHGjgZEhMfgff8ImqtLUVpWh5mlVSzP
T2NnX87+Tw5I5wWAlpYWTE9PKzUasn/KAVVqBGRee85F+D99irj0AmRlJMGcEIWA4ED4+4chKiIS
xbkFMBqiEGdOQF3HKHbtM/B79hpFxRWICAlH4DsDigrKEfHqIf76j3sIjjAiLjEawcERePTLd/j+
zmPEmuJgMAQhqVS9ndJ3n/mYFwUAufynXhZSL/upB325/KfejeNda+IdCuQOmOWFWSyunpRF8l1J
LtDKInU+R+MfczZUCAwAlF5yADjwbMIcFoyY6Ei8C4pCa2cfytJMsOYWIic9GSZTPNJzStDU1ILK
yhpkJJgRGWfG0IIdBzvLSE+2oqSiERVVhQiNjkFFfRsKkhPhH2JC79gUKvLT8b5vAg7WAHwU3wAw
MTFx3IlOT0+PcuAR7GtLGJ1cxL7HieGeLlRXFqNrdAZt5eWorK1GTUUlBkcnUFecjYLiKjTVVKKj
dxidjYUoqKzF6MQsFubnMD5tw97uDhqrilDT3oXJ6QUsLs6ho64ZuVm5KC+vQbI1Fc3dfZiemEBj
TTE6x2bR11IOS2oGlrd2Tj3n4I8EgNq8JAQGGxAdEwu/B/fw852f8Y+fHiE6Oh6GN/744X//E3ef
vkHgm1e4d/shgsLMsMYnobGlC21NNbCajTBExyA5KxVZ6Vl4+NNP+P72ExQWpiEyIUs5cJWnGhEU
aUV9fRky062INRnw+GkAnj55haKSWjQUFiEwyB+WrDJ45JjmdUA6LwBITYxclpF1k/WSfVJ+L5mX
e2MaFmueMl5zWTrMFiMCAvzx4oU/goPCUFJYie6mStx5ch/zzkO4l0fw7k0IGhqqERmXjtHxAQQ9
fYt3D1/h27/9hKCwRFiscXjzOlCplYk0JiImJg5RhiBklKrbg+8+8zHPBgC1vKjNKsb8xgbqsksx
t76ttD8QZgfbUFjepuy3ro0ltHaoNTPa1YztpRFEhIQiKjoFcyvbSpuG942VKK7tUcaRW4M1Pnw4
wMLcPBwuD9xu9btkAKD0HC8rACgFw94ePDtOpXBWH9byQbme7HC5cLC/q9ybLdf65XOyL8g1TJn+
rjQ6O9zH+Fg/bFs7wP7u8TLt7+7AseOBx7GMgZFR7HrU6fgWSJ9SCwDTM3On1vUmsrq2rgQA+Q3l
diipVpYzSzm4NDQ0KL+9/AZK4ax0HnRR5fenUM++pEBWG4Bqg08K4s/B9wFQfyQAtNRWYXbDg8nO
eoT6vUFcQgLSc4pRVFKF9pZWWA0BSCqoQFlqMh7evYfsyvcYH+6B1ZKOyYV51BbnIzEhCqa0NKRG
J+Hlg1cIMMQgyRSMcGOqclBurKzEvB3Y25xDYlwwjNYkREYYYY5PRJLJiLrGXkRHvURB++jxsn0s
AEgYa2xsxOTkJMbHx5W2GfL7CLtuJ2y2FWU/2t1eRktrC5ZW1zA3v4R12ywa6prRXFeM5MIy5dKF
hLju1gblt+4fnYHT6cDywhJ62tvQPzyO9uZG9I1Owu7YxsL0MLpGprC1toi62hosramt5X33mY95
UQAojs/Cgn0HFdExeP48CHHpGairL0bA68dIyKlAemwofv7pVzx/F4eSzBj8/Og5Rpe3sbMyDP/X
/jCnZqMwNxWRpkjEmuMQEZ2MgqxkxEebYEnKRl1tLcbnltDXXIGAt8F4FxCBLuUS0unvmwGA0ssO
AErhfdJCXP2/7/3WJ/ddy18ZV/uszFI9GJwMV8ZRxj/pFMi3MPocZX6ynINDI1haWlYK15vq0MgY
VlfXTvUT4F04en/nV9HfEwA0lCBy/J89LK+tKY3dtPX3uLaw4XRjb8cFh1N94JRU0Xs86sFY2Pc4
sL6lvmdbskE+ubW+DIdLPWAo36F2xrq1hm259n/09MvNtWUsL0whv6QELu201gvfACB/ZV0kBLS1
tSl2dnYer6vWZ4Uy7r46D6lRUEPX0b65ua6cBav7xOljj0xDvZPjNNr3obw+ms4feeLl2QBwVBOT
m4r2vj4kGt4h0JCBoqJ03H/yFqVleXj3OhCGl/74j//9BxLTsuF//zae+b3F+/E1uJaHEB6RhFWH
HbnpicgvzMSDew+V7roDQ40Y6RpGZXYCbj9/A6dnH+UpkfjtpRkdTbXIK+tU14MBgNLTXnYAuMqq
BcAWlo+qyG+qcvCXAs93/a+LHwsA2rYmNRsSArRtXBrRadu1XR4YdNSwThsu/SJsO+zKezI9u10d
V6avfEbGlXG2Hdiy2+F0OeFQHkTkxLbDcWoeysFFGt7J9I7mIeM57DLvbeWvjKMpyy3L6/ubyHr6
8nvCmXLb5XmP3b4EzwsA8nd7cxbFRXloft+AgBfPkV3ZjIXpQVjiY9DQ2ImavCIUV1WhoaEZ/V3N
yC2rhWNvHx77CobH55XvYHG0CanZuegfGkJXzwj622uUdheVZZkw5RQp40wMdqOpYwi2xTlMzCwf
LwMDAKVeMgCcVpB1u8kKv+dActX8VACQ9+WvHFRtNtuV8qJlkn1HO/u/CZ4XALRyQt3J9rCyZj/5
/xFyB8Pq+unyxhuplTnmcA9LiwvKcz6E6YlhrDg8x9u4N9r8GQAo9ZIB4EQpAMbGxtDd3a3cG3/p
9p8z7Hc6NDSEoeFhxcGhoTPvS5Wy/JXf+7qGgE8FAG0c7azTu/C/amrLd5MO/uJFAeDYo2O09n+h
v6kUwZEJqG7uwM6uBzseB1qb27DpPoB7x4WdHfXALP0VNFRXIcWaCIMhEtaUTKxun1y6ODMvHwUG
AEoZAI6VnV/Wt6u7R+4/OnU7klxXlXW5SHlYjNZXv7eC77BTSu95x/c3S4NI7Vru0bCjp/ed+dwF
ynoszs9jbmYas9NTWFtZPuo05mQcmd7o6KhyT7n8br7fw3XwUwFAO5jKe1f9Mb3a8mnr5buu11X5
PT4aAM45KHfV5CEg3IKGumpEhRsQFRaCW7cfIyI6HjlZBQh99QiRqfXKvlJZmAdjQibkIaJdJQVo
U24V/fTBX5sXAwCllx4AvLd/rRvgI5UzNrXLUbXLWXW42h2q2jWsbyEjeqM1AJSezy4a/yKVAOB0
YmyoH1WlWYjPzEFfSwfi35kxPrtxaj6+7LpdcLnPtpS3b20d38Z0Hoe7TmSkxSO7tBKtNQ0whiZi
oK8bUXHRaH3fgQyjCeUN3b4fu5D5mRlUFBehtrICVeUVKM4vgNslD7s9jdzrL7eXye/m+z1cBz8n
AMjBR2sDcJ7e1/+/lH90erLc0nOh73peZ/9IAOiozIHBnIPGilyk5tWipTwdT1+GwJKchYr8UvhJ
XxRvzMq45Xk5yi2ctU3tKEpNxojcfnHOPf/nKTAAUHqJAUBp/b/rRHFmMhISzKhpGzs1Tdl5t+zb
yqudbcdRd6RQejLbWN+Ay3NSxach94bL7T5REQbUtPYorbIFl/LIXO1/0qXpSaC4SLUGwIn+3h5s
e7ZRmBmDWGMyIgJC0djju6ynsdumkJFZDNvaBvo6mpFmTUJGZgEqajuV+70v4nB/F47tdaREPceb
hFy01JeipK0ftqlOhAa9wbMHr1HY0HZu98jnMTk2it7uboxPTmNgZBpVlXUYG5tATHI5guLyMTW3
rIwnncvc1ACg3QUgB5+Pcij31p8tj/8cn/lDnYOEFVmPm1IL8HsDgIyzMj2o9NaYlp6B/vFFrNqm
UVNWjLrWXixOziDfmoLylgFl3NmpafR2tiDebEJzzzBkN/Od5kUKDACUXmYA2P+A/e0lhPqHorAw
G2ZjJt531qC6ow89HW3ITbLgxatg1DfUIj4lF33d7cjLysLrp89gSi/HcH87Ckry0Dc6iNy0NDR2
Sr//H5CfmoTm9z3IsSahra0DZSXlePPCD+XNPWipK0TbyDSWZhawpXQOdLag0lQDwDZGx0Yx2FqL
0qpGtLRUwxQfj9rOoVPr78vmXD9++fEROvpGEf7iISIS8pGfGIW7L+KgXbU8l8N9NJcWoLa2DrkV
lWhpqUVReSWKs3MxPDmNocFBGOOiMef4SIrwYnpiHI0NTWhp70FNcy/yC8qxtbEKU1o1noWkwbXj
UcfTQQDw7gfAt/Df3V6CKTIKFpMRlS3q8yPOY2Z6FgcfPmBpbhYbTq+H6RxNZ7L/Pfon1HvMt+cn
kJpWqPQc6E1faz1qmgeUEHeq61ufZZJl13MA0L6Hz+G8cS/6bs9TYACg9FIDwCEOXMsIfuOPWEMY
Qt8F4+f//QvuPvFDgN9L/PjdbbwLi0FcRAT8/N7gtX8E+lvaEewXCLPFimfP/VBYnIGffroDiyUZ
xrg0pbAtycnBvGMXLfmZMBui8OO33+Lb235INUfhf/77v/EiNBGbTjd2P3Hbm+z8Tpcbo73NCHl2
D8bUPNRWVcNgCEdLSxdsi6fvK/dmerAVhtA4xEYYERNpxvvhGQx11iMxrfzMAcGbvY0ZPL59D+kl
dagtrYAxLBEFSXF49iZUuQSQmmRBVmbjR2sRvJkcHUFZaRVqm3uRklmC0HeBcG6fLcD0HgCcq+MI
CjAgKyMVGal5SE0IQ2pxLbISzSgsaUV1USJCo8OVngJXXHtIDH0Da145clMjUNDao7REH2zNw/1H
T5CcnQejyYCHv/6GSHMR2itzEBphQUv3GFaWZmDwe4z/96/fY3LDLUeUM8ujLRMDwOUpMABQeqkB
4AB79iUUlTbKQ2SRYzYiPOgdUosqUZpsxYvnzxEVGYXsogqUl5bBEheLpIRUpQc1ozkFqckmxBoj
EWlMwfDoGMpLq7D/4QOqc5IQFBiEguIiZEcn4ukTP7wKNCA/MwMRwe9Q2NSNxdlF2D+jBkDWpb+/
X1mXc+4kupCR3lYMz2/6Dv5sjmf1O+Z5Hh73Dhrr6pTvLy8rG73d6lP9fJGDv7QDkN/N93u4Dv7p
ALAyhpDgaBTmZOL1o6f48bsf8eZdKEL8/fDwl7v47pu/4smjJ3j8xqxsY/VlhYiLNSE/NxWm5Bw4
nRtItcajuLwAf/23v+D+46f49bcnKK5sRKYhFP/139/geWgmulqq8cs/fsbTt3Gwy+MNLzgQCgwA
l6fAAEDpJQYArWDwuD1Kgz9p3Oewr2Ntaxs70mGKPBN+2w6HU55Fv49d9zYWlpbhdjuxtbWtPFp2
ZWVVCRKysyo77O4u3E67ckDb2fuAffe20s+9y7WtPEN+Y2MVW84dOO0O7Mh8zymoNGXnl+WU7lal
21XpfvW0E0qf+ec5O7+A+bnZk3EnJo5f+47rq/c8pqZ85/l509Ccmp5Wzu5HR0eUdZDXvuPIcOlR
ThqdnTxb/nr5ZwKAbLeujUW0d09IiYv6okJkpCWiunMAtRlpsKbnoTI/A7k1dSjMzcXcugsT3Q0o
Ky1FmtWAwsY+pVFqe2UmAsPCUV1ZgYyMVJTVt2CwbwhFpnhEWeShVdmIiUxATm4+UpNSML64eeGB
UGAAuDwFBgBKLykAaDvXntwyp92WprTuP1T6/pdW+/JabqfT3pdhUtV6fBfAwYFynU8a/qnvS8M+
CRJqoS7PNlfGOSps1M99UMc/mqayDB9RPiPrvLi4iKWlpWup1tmM1uGM7/uiHBy179n3O7gOyrJ/
LADI0/NWV9WHHV0X5GB50wKA/Abye1xFZB9gAKC692sHANm5RN/5XkVlmdVuW6XL15ur/Gba+vp+
B9dFObhIge0bAJTLTUe3AS4sLJwJP1dRWU6pkbkpB39R1kXKlKsYpmWZvG+7ZACguvVrBQD5vBTK
soPJGRmlX1IpsGX78g0AWkEu/5fh16UjIG2ZfWs7rrOyPvJbXaXfwLvjJe37ZgCguvVrBQA5A5Np
Uvo11arO5bKAvPauwZH3ZZu8DvrW0twUr+pvIMulLaPUJmm1FgwAVFd+jQAgO5OWtin92mpnb7L9
+b5H6aeUck6rtWAAoLryawUArQrQt1qQ0i+pdpmJ2xz9I2rbC2sAqC790gHguMU/pZReIyUMMABQ
XfklA4BMQz4nwyil9Dop5Z20I2EAoLrxSwYASdBSC+DbYptSSq+DcvCXBqUCAwC98X6JAEAIITeR
88o3BgB6Y/yzAUDGk8/6JmlKKb3OSm2mlG++MADQG+OfDQBaZx/a/f+UUnoTlHJNyjdfGADojfHP
BgBCCNETDAD0xsgAQAghnw8DAL0xfskA8GHPhcmpuU8+1n5vX71rgBBCrhsMAPTG+CUCgNw2I4/y
3bfPwZqUDzm8L012o3VgFPueVVTV1mJhbR19XfWob+tEZ2cPWhrqMTa3jrX5flQ2dcC1j6PH/crj
gSml9J/veSc6DAD0xvhnA4C8VsZ1OrG3OYvsgkbpExA5yXGwpFkQbIhAbn4GXr7wQ2FJFkKDQnDv
7jPEGhMRExqGxFQLTAlW9ExtwuNxK9OT+VJK6T9T7VkBvjAA0BvjlwgA2uvDnRWEBwQhKy8XFnME
LGnpSEpOhjkuCn4BIcjJTMTzFy/x9GUYhqcXUJGbCktiPN69C0XX9OapeRBCyD8bKd98YQCgN8Yv
EQC0ngCFpZlx9A+PY3VlHvPLm7ANt+PbW7+iumcUQS/vISCnFs5tJ/b29rF/cIAiazS+eR6MNZfa
+xYhhFwFpIxjAKA32i8dAHw53N/H/qE6rmf37Pa/v7vrO4gQQv7pMADQG++XDAAyzONRH8167PEj
W/ewJ4/e3FUfvXnyCNeTx3FSSulleKac8hp+eFS2MQDQG++XDAAzs/MYHZtUtmFKKb2qTs/MnRkm
jo2r5ZfAAEBvvF86AGxt2ZXPUUrpVVXO9rXXUvY5neprKc8kHAgMAPTG+yUDwOzcAtbXN87Mg1JK
r5LSz7/8ldv8tAO//F/KQDmRERgA6I2XAYBSqjclAMjBX8q8iooKjIyMHJeBDABUNzIAUEr1pgQA
KfMaGxsREhICq9UKm80Gu93BAED1IwMApVRvajUAvb29aG1tVVxYWFCGMQBQ3cgAQCnVm1obAJfL
BbfbrfxfyjJeAqC6kgGAUqo3tQDgKwMA1ZUMAJRSvckAQCkDAKVUhzIAUMoAQCnVoQwAlDIAUEp1
KAMApQwAlFIdygBAKQMApVSHMgBQygBAKdWhDACUMgBQSnUoAwClDACUUh3KAEApAwClVIcyAFDK
AEAp1aEMAJQyAFBKdSgDAKUMAJRSHcoAQCkDAKVUhzIAUMoAQCnVoQwAlDIAUEp1KAMApQwAlFId
ygBAKQMApVSHMgBQygBAKdWhDACUMgBQSnUoAwClDACUUh3KAEApAwClVIcyAFDKAEAp1aEMAJQy
AFBKdSgDAKUMAJRSHcoAQCkDAKVUhzIAUMoAQCnVoQwAlDIAUEp1KAMApQwAlFIdygBAKQMApVSH
MgBQygBAKdWhDACUMgBQSnUoAwClDACUUh3KAEApAwClVIcyAFDKAEAp1aEMAJQyAFBKdSgDAKUM
AJRSHcoAQCkDAKVUhzIAUMoAQCnVoQwAlDIAUEp1KAMApQwAlFIdygBAKQMApVSHMgBQygBAKdWh
DACUMgBQSnUoAwClDACUUh3KAEApAwClVIcyAFDKAEAp1aEMAJQyAFBKdSgDAKUMAJRSHcoAQCkD
AKVUhzIAUMoAQCnVoQwAlDIAUEp1KAMApQwAlFIdygBAKQMApVSHMgBQygBAKdWhDACUMgBQSnUo
AwClDACUUh3KAEApAwClVIcyAFDKAEAp1aEMAJQyAFBKdSgDAKUMAJRSHcoAQCkDAKVUhzIAUMoA
QCnVoQwAlDIAUEp1KAMApQwAlFIdygBAKQMApVSHMgBQygBAKdWhDACUMgBQSnUoAwClDACUUh3K
AEApAwClVIcyAFDKAEAp1aEMAJQyAFBKdSgDAKUMAJRSHcoAQCkDAKVUhzIAUOoTAOT/smOILpeL
AYBSeiPVAoCUe1qZZ7fbGQCovtQCgOwAS0tL6O7uVhwcHFR2DgYASulNUzvgDw0NKeVdV1eXUv7J
MAYAqhu1AOB2u5UdIDExEaGhoaiurlaGzc0vMgBQSm+UEgDkBKeurk4p7ywWCxYXF5XyjAGA6kbv
SwCinPkXFRVhbW1NuQzAGgBK6U1TAoCUXevr60p5NzAwoJR3vARAdaVvI0DZHkWpCmMbAErpTVRt
A7CplHNamSfD/+kBYGx88rgxAqVf242NDdjt6g4gr+Vgr+0IMlwC6cbG5oXbrHcAkHFXV9fOzINS
Sq+S2gmPqJZ3apknNQITUzNKeXbpAUD+Ts/MKQXpzMw8pZfk3JGnh8u2OD4+pbQFuGib9Q4Ay8ur
GJ+YPjMdSim9SkrZ5jtMnJicxpJt+fh4fCkBgJDrhG8A0F4TQshN4rzj8xcNAFLtINcjPB4PpVde
qQ2QbVY76Ev1mTSe8R2PUkqvs3JclrLOly8aAHZ3d5UClNLrouwc3H4ppTddKd98+aIBgBBCCCHX
AwYAQgghRIcwABBCCCE65A8HAPsOAwAhhBByXflDAWBwzoEJm1P5MKWUUkqvn6OL2xhd9nxeADBE
RGev7wFjyx6M2jxKcqCUUkrp9VOO5VMbHzA4tfzpAPDq1ZuyGduWkhYopZRSer0dnFxGe/fwpwMA
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIITeQ/wMLU96Tr7abuQAAAABJRU5E
rkJggg==</Preview>
  <Form>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
tXfjAF1Cd3WMXv/c/vX/AV0NaaIURAEA</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $global:ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formEntraIDApplicationMa.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Retrieve the application ID from the textbox
		$appId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($appId))
		{
			Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned secrets" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Application"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			New-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Set-DefaultPolicyInputsFromConfig
{
	param (
		$policy # The policy object returned from the tenant
	)
	
	# Helper to extract a restriction by type
	function Get-Restriction ($restrictions, $type)
	{
		if ($restrictions)
		{
			return $restrictions | Where-Object { $_.restrictionType -eq $type }
		}
		return $null
	}
	
	$appRestrictions = $policy.applicationRestrictions
	$pwdCreds = $appRestrictions.passwordCredentials
	$keyCreds = $appRestrictions.keyCredentials
	
	# --- Handle empty restrictions (reset/default policy) ---
	if ((-not $pwdCreds -or $pwdCreds.Count -eq 0) -and (-not $keyCreds -or $keyCreds.Count -eq 0))
	{
		# Password
		if ($null -ne $txtPwdLifetime) { $txtPwdLifetime.Text = "" }
		if ($null -ne $chkPwdLifetimeEnabled) { $chkPwdLifetimeEnabled.Checked = $false }
		if ($null -ne $dtpPwdDate) { $dtpPwdDate.Value = [datetime]::Now }
		
		# Symmetric Key
		if ($null -ne $txtSymmetricKeyLifetime) { $txtSymmetricKeyLifetime.Text = "" }
		if ($null -ne $chkSymmetricKeyLifetimeEnabled) { $chkSymmetricKeyLifetimeEnabled.Checked = $false }
		if ($null -ne $dtpSymmetricKeyDate) { $dtpSymmetricKeyDate.Value = [datetime]::Now }
		
		# Custom Password
		if ($null -ne $txtCustomPasswordLifetime) { $txtCustomPasswordLifetime.Text = "" }
		if ($null -ne $chkCustomPasswordLifetimeEnabled) { $chkCustomPasswordLifetimeEnabled.Checked = $false }
		if ($null -ne $chkCustomPasswordLifetimeEnabledAddToPolicy) { $chkCustomPasswordLifetimeEnabledAddToPolicy.Checked = $false }
		if ($null -ne $dtpCustomPasswordDate) { $dtpCustomPasswordDate.Value = [datetime]::Now }
		
		# Key
		if ($null -ne $txtKeyLifetime) { $txtKeyLifetime.Text = "" }
		if ($null -ne $chkKeyLifetimeEnabled) { $chkKeyLifetimeEnabled.Checked = $false }
		if ($null -ne $dtpKeyDate) { $dtpKeyDate.Value = [datetime]::Now }
		
		return
	}
	
	<# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$txtPwdLifetime.Text = ($pwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpPwdDate.Value = [datetime]::Parse($pwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	#>
	
	# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$maxLifetime = $pwdLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtPwdLifetime.Text = $matches[1] # just the number of days
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtPwdLifetime.Text = $maxLifetime # keep as ISO 8601 if not just days
			}
			else
			{
				$txtPwdLifetime.Text = "" # fallback for invalid/unsupported formats
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtPwdLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtPwdLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $pwdLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpPwdDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpPwdDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					# fallback to today if parsing fails
					$dtpPwdDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpPwdDate.Value = [datetime]::Now
		}
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	
	<# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$txtSymmetricKeyLifetime.Text = ($symKeyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpSymmetricKeyDate.Value = [datetime]::Parse($symKeyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Symmetric Key Lifetime
	
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$maxLifetime = $symKeyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtSymmetricKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtSymmetricKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtSymmetricKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtSymmetricKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtSymmetricKeyLifetime.Text = ""
		}
		$dateValue = $symKeyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpSymmetricKeyDate.Value = $dateValue
			}
			else
			{
				try { $dtpSymmetricKeyDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpSymmetricKeyDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpSymmetricKeyDate.Value = [datetime]::Now
		}
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	
	
	<# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$txtCustomPasswordLifetime.Text = ($item.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpCustomPasswordDate.Value = [datetime]::Parse($item.restrictForAppsCreatedAfterDateTime)
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	#>
	
	# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$maxLifetime = $item.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				#$txtCustomPasswordLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				#$txtCustomPasswordLifetime.Text = $maxLifetime
			}
			else
			{
				#$txtCustomPasswordLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			#$txtCustomPasswordLifetime.Text = $maxLifetime.Days
		}
		else
		{
			#$txtCustomPasswordLifetime.Text = ""
		}
		$dateValue = $item.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpCustomPasswordDate.Value = $dateValue
			}
			else
			{
				try { $dtpCustomPasswordDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpCustomPasswordDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpCustomPasswordDate.Value = [datetime]::Now
		}
		$chkCustomPasswordLifetimeEnabledAddToPolicy.Checked = $true
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
		$chkCustomPasswordLifetimeEnabledAddToPolicy.Checked = $false
	}
	
	<# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$txtKeyLifetime.Text = ($keyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpKeyDate.Value = [datetime]::Parse($keyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$maxLifetime = $keyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtKeyLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $keyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpKeyDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpKeyDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					$dtpKeyDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpKeyDate.Value = [datetime]::Now
		}
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
}

function Convert-TimeSpanToIsoDuration
{
	param ([string]$input)
	if ($input -match '^(\d+)\.(\d{2}):(\d{2}):(\d{2})$')
	{
		# e.g. 1.00:00:00 => P1D
		return "P$($matches[1])D"
	}
	return $input
}

<#
function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}
#>

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkPwdLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
				
		# customPasswordLifetime
		<#$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		#>
		#if ($customPwdLifetime)
		if ($chkCustomPasswordLifetimeEnabledAddToPolicy.Checked)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $null
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		
		if ($symmetricKeyLifetime)
		#if ($chkSymmetricKeyLifetimeEnabledAddToPolicy.Checked)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
				
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			# Log 
			
			Write-Log -Level INFO -Message "Calling Graph to update policy..."
			
			# Do task
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			# Optionally refresh the UI
			Load-CurrentDefaultApplicationPolicy
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		$defaultPolicy = Load-CurrentDefaultApplicationPolicy
		Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:GitHubRepoURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website $global:GitHubRepoURL"
	
}

]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>