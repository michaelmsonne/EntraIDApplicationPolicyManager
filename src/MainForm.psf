<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAJmeSURBVHhe7P1ncxtbu6YJ1seJ/h0d0fNpZmJ6
PvRMRE9M/4SJ6Iiqnqo6p06dc953v25bact7T9F777333nvvCYIOBEE4EqAH6MlrYiUIigIpiVtb
2nLPpbhFIJFmZebKte5c9j/8B0EQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ/sN/+A/X/8//0/9U9Oz5y6Kw8Oii4JBIkUgkEolEX6Ai
oxOKfvrpl6L/4X/4PxX5Zvbn+B//x/+xLquwirGFNcaMa4zOr4hEIpFIJPoCNa7y8nknN2/fxze/
P8ez5wFF46Z1WoYNNA/O0jw0JxKJRCKR6CINev62XFLntv+N8t3fm+Rdv2lwlo4JM11DU+82AJFR
sUV6yyatw/O0jXjUOmakeXyRpnGz9tm7XCQSiUSib1nto0Ytv2zom6axf+atUus0DczSPqa2MdDY
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</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-CustomAppManagementPolicyToApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	Load-CurrentDefaultApplicationPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# customPasswordLifetime
		$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
			
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>