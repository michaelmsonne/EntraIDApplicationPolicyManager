<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAALLZSURBVHhe7P3nb2TZvqaJ9Udh/o4GRp8kQaMP
IwEjSJ8FCBAgQNM9M/d239v33Drn1KmqrErvDTOTyaT33nvvvffem2DQBclw9CYiyKB9hLWDwSQj
mYbpipX1e4gXsbnN2n6tdy/7H/6DIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAj/4T/8h9v/+//+vy946f26ICQ0siAwKFwkEolEItEf
UOGRcQXXrv1W8N/9d/+7As/E/i3+43/8jzUZ+RWMzG8wYthgeG5NJBKJRCLRH1CjKi2fW+Xu/cd4
pvdv8dLbr2B0YZOmwVka+6dpHJgRiUQikUh0kfpdv00fqbe2v6Q8w3uX3Os39E/TNmakY2DywwYg
PCK6QGfapnlwjpYhl5pHDDSOLtIwatSm3fNFIpFIJPozq3XYoKWXdT166nun3iu1TkPfNK0japtZ
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
RU5ErkJggg==</Preview>
  <Form>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
AA==</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $global:ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formEntraIDApplicationMa.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Retrieve the application ID from the textbox
		$appId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($appId))
		{
			Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned secrets" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Application"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-CustomAppManagementPolicyToApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Set-DefaultPolicyInputsFromConfig
{
	param (
		$policy # The policy object returned from the tenant
	)
	
	# Helper to extract a restriction by type
	function Get-Restriction ($restrictions, $type)
	{
		if ($restrictions)
		{
			return $restrictions | Where-Object { $_.restrictionType -eq $type }
		}
		return $null
	}
	
	$appRestrictions = $policy.applicationRestrictions
	$pwdCreds = $appRestrictions.passwordCredentials
	$keyCreds = $appRestrictions.keyCredentials
	
	<# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$txtPwdLifetime.Text = ($pwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpPwdDate.Value = [datetime]::Parse($pwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	#>
	
	# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$maxLifetime = $pwdLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtPwdLifetime.Text = $matches[1] # just the number of days
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtPwdLifetime.Text = $maxLifetime # keep as ISO 8601 if not just days
			}
			else
			{
				$txtPwdLifetime.Text = "" # fallback for invalid/unsupported formats
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtPwdLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtPwdLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $pwdLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpPwdDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpPwdDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					# fallback to today if parsing fails
					$dtpPwdDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpPwdDate.Value = [datetime]::Now
		}
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	
	<# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$txtSymmetricKeyLifetime.Text = ($symKeyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpSymmetricKeyDate.Value = [datetime]::Parse($symKeyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$maxLifetime = $symKeyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtSymmetricKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtSymmetricKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtSymmetricKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtSymmetricKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtSymmetricKeyLifetime.Text = ""
		}
		$dateValue = $symKeyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpSymmetricKeyDate.Value = $dateValue
			}
			else
			{
				try { $dtpSymmetricKeyDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpSymmetricKeyDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpSymmetricKeyDate.Value = [datetime]::Now
		}
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	
	<# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$txtCustomPasswordLifetime.Text = ($item.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpCustomPasswordDate.Value = [datetime]::Parse($item.restrictForAppsCreatedAfterDateTime)
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	#>
	
	# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$item = $customPwdLifetime | Select-Object -First 1
		$maxLifetime = $item.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtCustomPasswordLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtCustomPasswordLifetime.Text = $maxLifetime
			}
			else
			{
				$txtCustomPasswordLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtCustomPasswordLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtCustomPasswordLifetime.Text = ""
		}
		$dateValue = $item.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpCustomPasswordDate.Value = $dateValue
			}
			else
			{
				try { $dtpCustomPasswordDate.Value = [datetime]::Parse($dateValue) }
				catch { $dtpCustomPasswordDate.Value = [datetime]::Now }
			}
		}
		else
		{
			$dtpCustomPasswordDate.Value = [datetime]::Now
		}
		$chkCustomPasswordLifetimeEnabled.Checked = ($item.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	
	<# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$txtKeyLifetime.Text = ($keyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpKeyDate.Value = [datetime]::Parse($keyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
	#>
	
	# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$maxLifetime = $keyLifetime.maxLifetime
		if ($maxLifetime -is [string])
		{
			if ($maxLifetime -match '^P(\d+)D$')
			{
				$txtKeyLifetime.Text = $matches[1]
			}
			elseif ($maxLifetime -match '^P\d+D$')
			{
				$txtKeyLifetime.Text = $maxLifetime
			}
			else
			{
				$txtKeyLifetime.Text = ""
			}
		}
		elseif ($maxLifetime -is [object] -and $maxLifetime.PSObject.Properties['Days'])
		{
			$txtKeyLifetime.Text = $maxLifetime.Days
		}
		else
		{
			$txtKeyLifetime.Text = ""
		}
		
		# Date picker assignment
		$dateValue = $keyLifetime.restrictForAppsCreatedAfterDateTime
		if ($dateValue)
		{
			if ($dateValue -is [datetime])
			{
				$dtpKeyDate.Value = $dateValue
			}
			else
			{
				try
				{
					$dtpKeyDate.Value = [datetime]::Parse($dateValue)
				}
				catch
				{
					$dtpKeyDate.Value = [datetime]::Now
				}
			}
		}
		else
		{
			$dtpKeyDate.Value = [datetime]::Now
		}
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
}

function Convert-TimeSpanToIsoDuration
{
	param ([string]$input)
	if ($input -match '^(\d+)\.(\d{2}):(\d{2}):(\d{2})$')
	{
		# e.g. 1.00:00:00 => P1D
		return "P$($matches[1])D"
	}
	return $input
}

<#
function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}
#>

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkPwdLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# customPasswordLifetime
		$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkCustomPasswordLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkSymmetricKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = if ($chkKeyLifetimeEnabled.Checked) { "enabled" } else { "disabled" }
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop -Verbose
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			# Optionally refresh the UI
			Load-CurrentDefaultApplicationPolicy
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
			
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		$defaultPolicy = Load-CurrentDefaultApplicationPolicy
		Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:GitHubRepoURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website $global:GitHubRepoURL"
	
}

]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>