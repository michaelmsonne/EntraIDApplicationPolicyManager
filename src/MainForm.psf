<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAF85SURBVHhe7d3Xb1v5oi/2+5Ygf8ZN7lOAGwQJ
kiAX9yKvAYIgL0mQ5JZz9jl779lT9ozH4967LcmS1XvvvXeJ6r1RvYudYu8UKZHSN/gtSrJMa2yP
Lduy+P0AX4giuchFaXGtLxdX+Rf/goiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiOjCuP6v/tV/Vfv0WVRtYlJG
7av4FIZhGIZhvsGkpGXX/v2XX2r/i//8P6sNX9i/5b/8l/+ys7iyEfNKO+ZVdswprAzDMAzDfINZ
UIvluBlXr99C+PL+LeKTvxigT76FnukN9E5vMgzDMAzze5n5g/mCw4jl+PCSDsPTK+8vACmpGbUr
Ohf65AoMzIbSP6dA74IGPfNa9M8rj69nGIZhmEjO4JwytKCd2nhvZFMb6BfDzCvRNyOGWUev9EH7
9yPu0zezhcF5FfrlCukxwh/3tIhxEuMmxnFoUYvR2fX3F4DEpNTaFZ0bg3MqDImBF9UYmFFitmcE
S70yjAyuo39Jg6F5JYbEfeaZ90d5ynWn5cT95n7nMsMwDHMuMrKoQdvQIqrbxlHbOflBqeuaQvf4
Klr6ptA2OIPWgRm0D81CNr6E7vEl6WfX6ALaBmaO09IfGqa2c+qNx2nqnUNjj1yKuCyuk27rnJTG
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
CwDDMJEQFgCGCQsLAMMwkRAWAIYJCwsAwzCREBYAhgkLCwDDMJEQFgCGCQsLAMMwkRAWAIYJCwsA
wzCREBYAhgkLCwDDMJEQFgCGCQsLAMMwkRAWAIYJCwsAwzCREBYAhgkLCwDDMJEQFgCGCQsLAMMw
kRAWAIYJCwsAwzCREBYAhgkLCwDDMJEQFgCGCQsLAMMwkRAWAIYJCwsAwzCREBYAhgkLCwDDMJEQ
FgCGCQsLAMMwkRAWAIYJCwsAwzCREBYAhgkLCwDDMJEQFgCGCQsLAMMwkRAWAIYJCwsAwzCREBYA
hgkLCwDDMJEQFgCGCQsLAMMwkRAWAIYJCwsAwzCREBYAhgkLCwDDMJEQFgCGCQsLAMMwkRAWAIYJ
CwsAwzCREBYAhgkLCwDDMJEQFgCGCQsLAMMwkRAWAIYJCwsAwzCREBYAhgkLCwDDMJEQFgCGCQsL
AMMwkRAWAIYJCwsAwzCREBYAhgkLCwDDMJEQFgCGCQsLAMMwkRAWAIYJCwsAwzCREBYAhgkLCwDD
MJEQFgCGCQsLAMMwkRAWAIYJCwsAwzCREBYAhgkLCwDDMJEQFgCGCQsLAMMwkRAWAIYJCwsAwzCR
EBYAhgkLCwDDMJEQFgCGCQsLAMMwkRAWAIYJCwsAwzCREBYAhgkLCwDDMJEQFgCGCQsLAMMwkRAW
AIYJCwsAwzCREBYAhgkLCwDDMJEQFgCGCQsLAMMwkRAWAIYJCwsAwzCREBYAhgkLCwDDMJEQFgCG
CQsLAMMwkRAWAIYJCwsAwzCREBYAhgkLCwDDMJEQFgCGCQsLAMMwkRAWAIYJCwsAwzCREBYAhgkL
CwDDMJEQFgCGCQsLAMMwkRAWAIYJCwsAwzCREBYAhgkLCwDDMJEQFgCGCQsLAMMwkRAWAIYJS3gB
EL+LiMssAAzDXJSwADBMWE4WAHFZTJtHbxAWAIZhLkpYABgmLEcFQPzs6elBbW0t6uvroVarpemU
BYBhmIuQkwVARMzHRNxuNwsAE5k5KgDiTSCXy5GcnIympibpzSJuZwFgGOYi5KgAiPnX6uoqOjs7
pczOzsLn87EAMJGX8K8AxJtBr9dLhYBfATAMc1FysgCoVCrk5uYiLS0Ny8vL0nztqxUAlVoL9+Fq
CYb5khEL+t1d/+FlF/x+n7RQl253OqVp8yQWAIZhvsWc/ApAzLcWFhYwOTl5+BWA5+sVgLW1TWi1
euj1Bob5stk2wGg0v3293gCNRov19a03pt13FYDQG8hzvCcBwzDMeYkoAUdfdzqdYsM/j7SgF7eJ
+Zb4sPNVCoDT6YLBYILJZGGYLx6jyfzWdSJimnS53G9Mu+8qACur67BarTCZLQzDMOcrJjNsNjss
ltA8ynwYcVnMt1bWNr5OASD6VvxeAdjfP4BWtw2NRi/9ZBiGOXfRnj5/0mj1Uvb396X52WcvAAcH
B+FXE517YqF/sgCINwoR0UUi5nGfrQCI7xzE9xBH+yEyzLeSo+/RhL29PdhstrfuwzAM8y1HbDAo
PuAcOdMCIFb/i/0ORcNgmG8tJ9deiTcJp2WGYS5KjuZnJ+dzZ1oAiIiI6NvAAkBERBSBWACIiIgi
0EcXADsLABER0TfrowrAktaFjW2PNDDDMAzDMN9eVnVurBs/sACkpGbUWveADZMfa0a/1BwYhmEY
hvn2Ihb+SvsBFreM7y8AT59FdSi37VJbYBiGYRjm287ilgFjM0vvLwBERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
REREREREROfU/w+fkyyUJishHgAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecrets.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecrets.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecrets.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			
			# Set default values
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			
			if ($policy.Restrictions)
			{
				# Expand the passwordCredentials array
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# Find the credential that represents passwordLifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred -and $pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
					{
						$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
					}
					# Find the credential that represents symmetricKeyLifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred -and $keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
					{
						$keyLifetimeDays = $keyCred.MaxLifetime.Days
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | State: $($policy.IsEnabled) | Pwd Lifetime: $pwdLifetimeDays days | Key Lifetime: $keyLifetimeDays days | Desc: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listViewPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			$row = New-Object System.Windows.Forms.ListViewItem($policy.displayName)
			$row.SubItems.Add($policy.isEnabled)
			$row.SubItems.Add($policy.description)
			$row.SubItems.Add($policy.Id)
			$listViewPolicies.Items.Add($row)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

function Show-PolicyManagementForm
{
	# Create a new form for policy management
	$formPolicyManagement = New-Object System.Windows.Forms.Form
	$formPolicyManagement.Text = "Policy Management"
	$formPolicyManagement.Size = New-Object System.Drawing.Size(500, 400)
	$formPolicyManagement.StartPosition = "CenterScreen"
	
	# Create a GroupBox to contain the policy management controls
	$groupboxPolicyManagement = New-Object System.Windows.Forms.GroupBox
	$groupboxPolicyManagement.Text = "Manage Application Policies"
	$groupboxPolicyManagement.Location = New-Object System.Drawing.Point(10, 10)
	$groupboxPolicyManagement.Size = New-Object System.Drawing.Size(460, 340)
	$formPolicyManagement.Controls.Add($groupboxPolicyManagement)
	
	# ListBox to display existing policies
	$listboxPolicies = New-Object System.Windows.Forms.ListBox
	$listboxPolicies.Location = New-Object System.Drawing.Point(10, 20)
	$listboxPolicies.Size = New-Object System.Drawing.Size(440, 120)
	$groupboxPolicyManagement.Controls.Add($listboxPolicies)
	
	# Button to refresh policy list
	$buttonRefreshPolicies = New-Object System.Windows.Forms.Button
	$buttonRefreshPolicies.Location = New-Object System.Drawing.Point(10, 150)
	$buttonRefreshPolicies.Size = New-Object System.Drawing.Size(130, 30)
	$buttonRefreshPolicies.Text = "Refresh Policies"
	$buttonRefreshPolicies.Add_Click({
			try
			{
				$policies = Get-PolicyList
				$listboxPolicies.Items.Clear()
				foreach ($policy in $policies)
				{
					# Format each item as: DisplayName (PolicyId)
					$listboxPolicies.Items.Add("$($policy.displayName) ($($policy.Id))")
				}
			}
			catch
			{
				Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonRefreshPolicies)
	
	# Button to launch the policy creation pop-up
	$buttonCreatePolicy = New-Object System.Windows.Forms.Button
	$buttonCreatePolicy.Location = New-Object System.Drawing.Point(150, 150)
	$buttonCreatePolicy.Size = New-Object System.Drawing.Size(130, 30)
	$buttonCreatePolicy.Text = "Create New Policy"
	$buttonCreatePolicy.Add_Click({
			# Use input boxes for new policy details
			$displayName = Show-InputBox -message "Enter Policy Display Name:" -title "New Policy"
			if ([string]::IsNullOrEmpty($displayName))
			{
				Show-MsgBox -Prompt "Display Name is required." -Title "Policy Creation" -Icon Exclamation -BoxType OKOnly
				return
			}
			$description = Show-InputBox -message "Enter Policy Description:" -title "New Policy" -default ""
			$passwordMaxLifetime = Show-InputBox -message "Enter Password Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			$keyMaxLifetime = Show-InputBox -message "Enter Key Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			
			# Create the new policy via Set-AppManagementPolicy
			Set-AppManagementPolicy -DisplayName $displayName -Description $description -PasswordMaxLifetime $passwordMaxLifetime -KeyMaxLifetime $keyMaxLifetime
			Show-MsgBox -Prompt "Policy '$displayName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
			
			# Refresh the policies list
			$buttonRefreshPolicies.PerformClick()
		})
	$groupboxPolicyManagement.Controls.Add($buttonCreatePolicy)
	
	# Button to assign the selected policy to an application/managed identity
	$buttonAssignPolicyToSelect = New-Object System.Windows.Forms.Button
	$buttonAssignPolicyToSelect.Location = New-Object System.Drawing.Point(290, 150)
	$buttonAssignPolicyToSelect.Size = New-Object System.Drawing.Size(130, 30)
	$buttonAssignPolicyToSelect.Text = "Assign Policy"
	$buttonAssignPolicyToSelect.Add_Click({
			if ($listboxPolicies.SelectedItem -eq $null)
			{
				Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
				return
			}
			# Expecting the format: "DisplayName (PolicyId)"
			$selected = $listboxPolicies.SelectedItem.ToString()
			if ($selected -match "\((?<id>.+)\)$")
			{
				$policyId = $matches['id'].Trim()
				# Prompt for the target Application/Managed Identity ID (from the main form textbox e.g. $textboxSelectedIdentityID)
				$objectId = Show-InputBox -message "Enter Application/Managed Identity ID to assign the policy:" -title "Assign Policy"
				if ([string]::IsNullOrEmpty($objectId))
				{
					Show-MsgBox -Prompt "Application/Managed Identity ID is required." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
					return
				}
				Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
				Show-MsgBox -Prompt "Policy assigned successfully." -Title "Assign Policy" -Icon Information -BoxType OKOnly
			}
			else
			{
				Show-MsgBox -Prompt "Failed to extract policy ID from the selected item." -Title "Assign Policy" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonAssignPolicyToSelect)
	
	# Refresh policies on form show
	$formPolicyManagement.Add_Shown({ $buttonRefreshPolicies.PerformClick() })
	
	# Show form modally
	$formPolicyManagement.ShowDialog()
}

$buttonCreatePolicy_Click={
	
	# Retrieve values from textboxes
	$dispName = $textboxPolicyDisplayName.Text.Trim()
	$desc = $textboxPolicyDescription.Text.Trim()
	$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
	$keyMax = $textboxKeyMaxLifetime.Text.Trim()
	
	# Get the enabled state from the checkbox
	$enabledState = $checkboxPolicyEnabled.Checked
	
	if ([string]::IsNullOrEmpty($dispName))
	{
		Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	# Call your function to create the policy
	# ISO 8601 duration (e.g., P90D for 90 days)
	New-AppManagementPolicy -DisplayName $dispName -Description $desc -PasswordMaxLifetime $pwdMax -KeyMaxLifetime $keyMax -Enabled $enabledState
	
	Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to delete policy ID: '$policyId'?" -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>