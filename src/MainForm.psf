<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGJNSURBVHhe7d1nb1v7wiX2eZcgH2OSeRVggiBB
EmQwg7wNECRBgCRIMjPPzH2ee+659/Tje2wf+7h3W5as3nvvvUtU7713sVPsnSIpUVrBf9OUZVq2
XGRbItcPWBBFcpObErn34q7/7J8RERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERRYyr/+Jf/Be1Dx89rU1Myqh9
EZ/CMAzDMMwFTEpadu2PP/9c+5/9p/9JbfjM/g3/+T//553FlY1YUNiwoLRhXm5hGIZhGOYCZlEl
5uMmXL56HeHz+zeIb/5igL7ZbfRMb6J3eothGIZhmLdl5gPzBYcR8/HhZS2Gp1dPLwApqRm1q1on
+mblGJgLpn9ejt5FNXoWNOhfUBxdzzAMwzDRnMF5RXBGO7V5amRTm+gXwywo0DcjhtlAr/RF++0R
9+mb2cbgghL9s3LpMcIf96SIcRLjJsZxaEmD0bmN0wtAYlJq7arWhcF5JYbEwEsqDMwoMNczguVe
GUYGN9C/rMbQggJD4j4LzOlRnHDdSTl2v/m3XGYYhmHORUaW1GgbWkJ12zhqOyffK3VdU+geX0NL
3xTaBmfQOjCD9qE5yMaX0T2+LP3sGl1E28DMUVr6g8PUdk699jhNvfNo7JmVIi6L66TbOielcWof
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
adtwegF4+Ohph2LHJrUFhmEYhmEudpa29RibWT69ABARERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERnVP/
P8jMwrwmZ4vyAAAAAElFTkSuQmCC</Preview>
  <Form>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
vs4AAA==</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

function Show-PolicyManagementForm
{
	# Create a new form for policy management
	$formPolicyManagement = New-Object System.Windows.Forms.Form
	$formPolicyManagement.Text = "Policy Management"
	$formPolicyManagement.Size = New-Object System.Drawing.Size(500, 400)
	$formPolicyManagement.StartPosition = "CenterScreen"
	
	# Create a GroupBox to contain the policy management controls
	$groupboxPolicyManagement = New-Object System.Windows.Forms.GroupBox
	$groupboxPolicyManagement.Text = "Manage Application Policies"
	$groupboxPolicyManagement.Location = New-Object System.Drawing.Point(10, 10)
	$groupboxPolicyManagement.Size = New-Object System.Drawing.Size(460, 340)
	$formPolicyManagement.Controls.Add($groupboxPolicyManagement)
	
	# ListBox to display existing policies
	$listboxPolicies = New-Object System.Windows.Forms.ListBox
	$listboxPolicies.Location = New-Object System.Drawing.Point(10, 20)
	$listboxPolicies.Size = New-Object System.Drawing.Size(440, 120)
	$groupboxPolicyManagement.Controls.Add($listboxPolicies)
	
	# Button to refresh policy list
	$buttonRefreshPolicies = New-Object System.Windows.Forms.Button
	$buttonRefreshPolicies.Location = New-Object System.Drawing.Point(10, 150)
	$buttonRefreshPolicies.Size = New-Object System.Drawing.Size(130, 30)
	$buttonRefreshPolicies.Text = "Refresh Policies"
	$buttonRefreshPolicies.Add_Click({
			try
			{
				$policies = Get-PolicyList
				$listboxPolicies.Items.Clear()
				foreach ($policy in $policies)
				{
					# Format each item as: DisplayName (PolicyId)
					$listboxPolicies.Items.Add("$($policy.displayName) ($($policy.Id))")
				}
			}
			catch
			{
				Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonRefreshPolicies)
	
	# Button to launch the policy creation pop-up
	$buttonCreatePolicy = New-Object System.Windows.Forms.Button
	$buttonCreatePolicy.Location = New-Object System.Drawing.Point(150, 150)
	$buttonCreatePolicy.Size = New-Object System.Drawing.Size(130, 30)
	$buttonCreatePolicy.Text = "Create New Policy"
	$buttonCreatePolicy.Add_Click({
			# Use input boxes for new policy details
			$displayName = Show-InputBox -message "Enter Policy Display Name:" -title "New Policy"
			if ([string]::IsNullOrEmpty($displayName))
			{
				Show-MsgBox -Prompt "Display Name is required." -Title "Policy Creation" -Icon Exclamation -BoxType OKOnly
				return
			}
			$description = Show-InputBox -message "Enter Policy Description:" -title "New Policy" -default ""
			$passwordMaxLifetime = Show-InputBox -message "Enter Password Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			$keyMaxLifetime = Show-InputBox -message "Enter Key Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			
			# Create the new policy via Set-AppManagementPolicy
			Set-AppManagementPolicy -DisplayName $displayName -Description $description -PasswordMaxLifetime $passwordMaxLifetime -KeyMaxLifetime $keyMaxLifetime
			Show-MsgBox -Prompt "Policy '$displayName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
			
			# Refresh the policies list
			$buttonRefreshPolicies.PerformClick()
		})
	$groupboxPolicyManagement.Controls.Add($buttonCreatePolicy)
	
	# Button to assign the selected policy to an application/managed identity
	$buttonAssignPolicyToSelect = New-Object System.Windows.Forms.Button
	$buttonAssignPolicyToSelect.Location = New-Object System.Drawing.Point(290, 150)
	$buttonAssignPolicyToSelect.Size = New-Object System.Drawing.Size(130, 30)
	$buttonAssignPolicyToSelect.Text = "Assign Policy"
	$buttonAssignPolicyToSelect.Add_Click({
			if ($listboxPolicies.SelectedItem -eq $null)
			{
				Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
				return
			}
			# Expecting the format: "DisplayName (PolicyId)"
			$selected = $listboxPolicies.SelectedItem.ToString()
			if ($selected -match "\((?<id>.+)\)$")
			{
				$policyId = $matches['id'].Trim()
				# Prompt for the target Application/Managed Identity ID (from the main form textbox e.g. $textboxSelectedIdentityID)
				$objectId = Show-InputBox -message "Enter Application/Managed Identity ID to assign the policy:" -title "Assign Policy"
				if ([string]::IsNullOrEmpty($objectId))
				{
					Show-MsgBox -Prompt "Application/Managed Identity ID is required." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
					return
				}
				Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
				Show-MsgBox -Prompt "Policy assigned successfully." -Title "Assign Policy" -Icon Information -BoxType OKOnly
			}
			else
			{
				Show-MsgBox -Prompt "Failed to extract policy ID from the selected item." -Title "Assign Policy" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonAssignPolicyToSelect)
	
	# Refresh policies on form show
	$formPolicyManagement.Add_Shown({ $buttonRefreshPolicies.PerformClick() })
	
	# Show form modally
	$formPolicyManagement.ShowDialog()
}

$buttonCreatePolicy_Click={
	
	# Retrieve values from textboxes
	$dispName = $textboxPolicyDisplayName.Text.Trim()
	$desc = $textboxPolicyDescription.Text.Trim()
	$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
	$keyMax = $textboxKeyMaxLifetime.Text.Trim()
	
	# Get the overall policy enabled state from the existing checkbox
	$globalEnabled = $checkboxPolicyEnabled.Checked
	
	# Get state for individual restrictions from the new checkboxes
	$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	
	if ([string]::IsNullOrEmpty($dispName))
	{
		Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Call your function and pass the additional state parameters.
	# (Update your policy creation function to accept -PasswordState and -KeyState parameters.)
	New-AppManagementPolicy -DisplayName $dispName `
							-Description $desc `
							-PasswordMaxLifetime $pwdMax `
							-KeyMaxLifetime $keyMax `
							-PasswordState $pwdState `
							-KeyState $keyState `
							-Enabled $globalEnabled
	
	Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}


$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>