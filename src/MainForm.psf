<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGEKSURBVHhe7d3Xb2N5oif2fbPhP2PtfTKwhmHD
NrzYhV8NGIZfbMP2hnvn3pnpme6eDjVdOedSVUmlnHPOOUtUTlSichYzxZwpUhKlr/E7lFQqlrpU
3aWqksjvB/hCFOOhdMKXhyf8i39BRERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
REREREREREREREREREREREREREREREREREREREREREREREREREREFDGu/6t/9V/VPn0WU5uYlFH7
Jj6FYRiGYZhLmJS07Nq//fhj7X/xn/9nteEL+/f8l//yX3YWVzZiTuXAnNqBWaWNYRiGYZhLmHmN
WI5bcPX6LYQv798jPvmLB/QpNtEztY7eqQ2GYRiGYX4t078xX/AxYjk+vKjH8NTy2QUgJTWjdlnv
Rp9CiYGZUPpnleid16JnTof+OdXx9QzDMAwTzRmcVYUWtJPrZ0Y2uY5+8Zg5FfqmxWPW0Ct90P71
iPv0TW9icE6NfoVSeo7w5z0tYpjEsIlhHFrQYXRm7ewCkJiUWrus92BwVo0h8eAFDQamVZjpGcFi
rwwjg2voX9RiaE6FIXGfOebsqE657rScuN/sr1xmGIZhLkRGFrRoG1pAdZsctZ0TH5W6rkl0y1fQ
0jeJtsFptA5Mo31oBjL5Irrli9LPrtF5tA1MH6elP/SY2s7Jd56nqXcWjT0KKeKyuE66rXNCGqb2
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
0RAWAIYJCwsAwzDREBYAhgkLCwDDMNEQFgCGCQsLAMMw0RAWAIYJCwsAwzDREBYAhgkLCwDDMNEQ
FgCGCQsLAMMw0RAWAIYJCwsAwzDREBYAhgkLCwDDMNEQFgCGCQsLAMMw0RAWAIYJCwsAwzDREBYA
hgkLCwDDMNEQFgCGCQsLAMMw0RAWAIYJCwsAwzDREBYAhgkLCwDDMNEQFgCGCQsLAMMw0RAWAIYJ
CwsAwzDREBYAhgkLCwDDMNEQFgCGCQsLAMMw0RAWAIYJCwsAwzDREBYAhgkLCwDDMNEQFgCGCQsL
AMMw0RAWAIYJS3gBEL+LiMssAAzDREpYABgmLCcLgLgsxs2jCYQFgGGYSAkLAMOE5agAiJ89PT2o
ra1FfX09NBqNNJ6yADAMEwk5WQBExHxMxOPxsAAw0ZmjAiAmAoVCgeTkZDQ1NUkTi7idBYBhmEjI
UQEQ86+VlRV0dnZKmZmZgd/vZwFgoi/hXwGIicFgMEiFgF8BMAwTKTlZANRqNXJzc5GWloalpSVp
vvbVCoBao4PncLUEw3zJiAX9zk7g8LIbgYBfWqhLt7tc0rh5EgsAwzCXMSe/AhDzrfn5eUxMTBx+
BeD9egVgdXUDOp0BBoORYb5stowwmSzvX28wQqvVYW1t851x90MFIDQBeY/3JGAYhrkoESXg6OtO
l0ts+OeVFvTiNjHfEh92vkoBcLncMBrNMJutDPPFYzJb3rtORIyTbrfnnXH3QwVgeWUNNpsNZouV
YRjmYsVsgd3ugNUamkdZDiMui/nW8ur61ykARJfFrxWA/f0D6PRb0GoN0k+GYZgLF93p8yetziBl
f39fmp999gJwcHAQfjXRhScW+icLgJhQiIgiiZjHfbYCIL5zEN9DHO2HyDCXJUffowm7u7uw2+3v
3YdhGOYyR2wwKD7gHDnXAiBW/4v9DkXDYJjLlpNrr8REwnGZYZhIydH87OR87lwLABEREV0OLABE
RERRiAWAiIgoCv3uAuBgASAiIrq0flcBWNS5sb7llR7MMAzDMMzly4regzXTRxaAlNSMWtsusG4O
YNUUkJoDwzAMwzCXL2Lhr3IcYGHTdHYBePospkO15ZDaAsMwDMMwlzsLm0aMTS+eXQCIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiC6o/x9N9GHHHjIOMgAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				#$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ManagedIdentityCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$buttonReloadManagedIdentityList_Click={
	# Get data
	Get-managedIdentities
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecrets.Clear()
	}
	
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecrets.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecrets.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | State: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	try
	{
		# Make sure a policy is selected.
		if ($listViewPolicies.SelectedItems.Count -eq 0)
		{
			Show-MsgBox -Prompt "Please select a policy from the policies list." -Title "No Policy Selected" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Get the policy ID from the selected ListView item.
		# Assuming the fourth subitem (index 3) contains the Policy ID.
		$selectedPolicyId = $listViewPolicies.SelectedItems[0].SubItems[3].Text
		
		# Get the app (managed identity) ID from the textbox.
		$appId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($appId))
		{
			Show-MsgBox -Prompt "No application ID is available. Please select an application from the list first." -Title "Missing Application ID" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function that assigns the policy to the application.  
		# (This function should be defined elsewhere in your [Globals.ps1](http://_vscodecontentref_/0) file.)
		Assign-AppManagementPolicy -ObjectId $appId -PolicyId $selectedPolicyId
		
		Show-MsgBox -Prompt "Policy '$selectedPolicyId' assigned successfully to application ID '$appId'." -Title "Policy Assigned" -Icon Information -BoxType OKOnly
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to assign policy. Error: $($_.Exception.Message)" -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

function Show-PolicyManagementForm
{
	# Create a new form for policy management
	$formPolicyManagement = New-Object System.Windows.Forms.Form
	$formPolicyManagement.Text = "Policy Management"
	$formPolicyManagement.Size = New-Object System.Drawing.Size(500, 400)
	$formPolicyManagement.StartPosition = "CenterScreen"
	
	# Create a GroupBox to contain the policy management controls
	$groupboxPolicyManagement = New-Object System.Windows.Forms.GroupBox
	$groupboxPolicyManagement.Text = "Manage Application Policies"
	$groupboxPolicyManagement.Location = New-Object System.Drawing.Point(10, 10)
	$groupboxPolicyManagement.Size = New-Object System.Drawing.Size(460, 340)
	$formPolicyManagement.Controls.Add($groupboxPolicyManagement)
	
	# ListBox to display existing policies
	$listboxPolicies = New-Object System.Windows.Forms.ListBox
	$listboxPolicies.Location = New-Object System.Drawing.Point(10, 20)
	$listboxPolicies.Size = New-Object System.Drawing.Size(440, 120)
	$groupboxPolicyManagement.Controls.Add($listboxPolicies)
	
	# Button to refresh policy list
	$buttonRefreshPolicies = New-Object System.Windows.Forms.Button
	$buttonRefreshPolicies.Location = New-Object System.Drawing.Point(10, 150)
	$buttonRefreshPolicies.Size = New-Object System.Drawing.Size(130, 30)
	$buttonRefreshPolicies.Text = "Refresh Policies"
	$buttonRefreshPolicies.Add_Click({
			try
			{
				$policies = Get-PolicyList
				$listboxPolicies.Items.Clear()
				foreach ($policy in $policies)
				{
					# Format each item as: DisplayName (PolicyId)
					$listboxPolicies.Items.Add("$($policy.displayName) ($($policy.Id))")
				}
			}
			catch
			{
				Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonRefreshPolicies)
	
	# Button to launch the policy creation pop-up
	$buttonCreatePolicy = New-Object System.Windows.Forms.Button
	$buttonCreatePolicy.Location = New-Object System.Drawing.Point(150, 150)
	$buttonCreatePolicy.Size = New-Object System.Drawing.Size(130, 30)
	$buttonCreatePolicy.Text = "Create New Policy"
	$buttonCreatePolicy.Add_Click({
			# Use input boxes for new policy details
			$displayName = Show-InputBox -message "Enter Policy Display Name:" -title "New Policy"
			if ([string]::IsNullOrEmpty($displayName))
			{
				Show-MsgBox -Prompt "Display Name is required." -Title "Policy Creation" -Icon Exclamation -BoxType OKOnly
				return
			}
			$description = Show-InputBox -message "Enter Policy Description:" -title "New Policy" -default ""
			$passwordMaxLifetime = Show-InputBox -message "Enter Password Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			$keyMaxLifetime = Show-InputBox -message "Enter Key Max Lifetime (e.g., P90D):" -title "New Policy" -default "P90D"
			
			# Create the new policy via Set-AppManagementPolicy
			Set-AppManagementPolicy -DisplayName $displayName -Description $description -PasswordMaxLifetime $passwordMaxLifetime -KeyMaxLifetime $keyMaxLifetime
			Show-MsgBox -Prompt "Policy '$displayName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
			
			# Refresh the policies list
			$buttonRefreshPolicies.PerformClick()
		})
	$groupboxPolicyManagement.Controls.Add($buttonCreatePolicy)
	
	# Button to assign the selected policy to an application/managed identity
	$buttonAssignPolicyToSelect = New-Object System.Windows.Forms.Button
	$buttonAssignPolicyToSelect.Location = New-Object System.Drawing.Point(290, 150)
	$buttonAssignPolicyToSelect.Size = New-Object System.Drawing.Size(130, 30)
	$buttonAssignPolicyToSelect.Text = "Assign Policy"
	$buttonAssignPolicyToSelect.Add_Click({
			if ($listboxPolicies.SelectedItem -eq $null)
			{
				Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
				return
			}
			# Expecting the format: "DisplayName (PolicyId)"
			$selected = $listboxPolicies.SelectedItem.ToString()
			if ($selected -match "\((?<id>.+)\)$")
			{
				$policyId = $matches['id'].Trim()
				# Prompt for the target Application/Managed Identity ID (from the main form textbox e.g. $textboxSelectedIdentityID)
				$objectId = Show-InputBox -message "Enter Application/Managed Identity ID to assign the policy:" -title "Assign Policy"
				if ([string]::IsNullOrEmpty($objectId))
				{
					Show-MsgBox -Prompt "Application/Managed Identity ID is required." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
					return
				}
				Assign-AppManagementPolicy -ObjectId $objectId -PolicyId $policyId
				Show-MsgBox -Prompt "Policy assigned successfully." -Title "Assign Policy" -Icon Information -BoxType OKOnly
			}
			else
			{
				Show-MsgBox -Prompt "Failed to extract policy ID from the selected item." -Title "Assign Policy" -Icon Critical -BoxType OKOnly
			}
		})
	$groupboxPolicyManagement.Controls.Add($buttonAssignPolicyToSelect)
	
	# Refresh policies on form show
	$formPolicyManagement.Add_Shown({ $buttonRefreshPolicies.PerformClick() })
	
	# Show form modally
	$formPolicyManagement.ShowDialog()
}

$buttonCreatePolicy_Click={
	
	# Retrieve values from textboxes
	$dispName = $textboxPolicyDisplayName.Text.Trim()
	$desc = $textboxPolicyDescription.Text.Trim()
	$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
	$keyMax = $textboxKeyMaxLifetime.Text.Trim()
	
	# Get the overall policy enabled state from the existing checkbox
	$globalEnabled = $checkboxPolicyEnabled.Checked
	
	# Get state for individual restrictions from the new checkboxes
	$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
	else { "disabled" }
	
	if ([string]::IsNullOrEmpty($dispName))
	{
		Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Call your function and pass the additional state parameters.
	# (Update your policy creation function to accept -PasswordState and -KeyState parameters.)
	New-AppManagementPolicy -DisplayName $dispName `
							-Description $desc `
							-PasswordMaxLifetime $pwdMax `
							-KeyMaxLifetime $keyMax `
							-PasswordState $pwdState `
							-KeyState $keyState `
							-Enabled $globalEnabled
	
	Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to delete policy ID: '$policyId'?" -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>