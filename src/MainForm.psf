<File version="3.2">
  <FileID>5942c1c2-b6d5-4513-896b-dfc18f9799a4</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAKEMSURBVHhe7P3Xb1tr366LrcNg/x0L2DlKguwc
7ARIkBwHCBAgwN5r7bW+/r3ffN939ml7Tvcmd/Xee++99967KInqEkVSvZAUKVLSFTyDoixTLrIs
29P27xJucGj08pR7POMp/+k/CYIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCILwn/7Tf/rjf/8//o8FT56+KAgJjSwIDAoXiUQikUj0BSo8
Mq7gl19+K/gf/of/XYF3Zn+G//yf/3NNRn4FIwtbjMxvMTy3IRKJRCKR6AvUqMrL59a5cese3vn9
GZ489SsYXdymaXCWxv5pGgdmRCKRSCQSvU797t+mc+rM9u8p7/29SZ71G/qnaRsz0DEw+W4DEB4R
XTCxvEvz4BwtQ241j8zTOLpEw6hBm/bMF4lEIpHoW1br8LyWX9b16KnvnXqr1DoNfdO0jqhtZqnv
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
1LDPFs0abzsat0IwksgzBR9aAgDuhQQAdJ0EgNdaATAwMKDOzk51d3eHfLT5uB/uwrJ6e3vV++SJ
Y09v77b/d3V1OY/2e78tBHzsEgBwLyQAoOskAIS0jd8+7/37D159TruP/WUw1OlOqGLizlpnPOG2
+rdqRI57Q6tZt+UUeTAQ+h43wuM2e+/b9rq3aJ/j+cSExsdG9XR0RLMz087R+9ZpbH52Xf/p06d/
quXEDykBAPdCAgC6zv0NAFvX/4hrwk5HPNtbkrNhG/+22/q2Eq4AaL0Avm36txkOAP0DA+q7Vavq
mg49HX6iM8eTNDwx98ZyIvF7V7Xq3X49fGlxUeuvL4dv46Xfo6LCi7pSU6/2xptKT8zR4+5OpaSl
qv3+XRWlZ6j2Zmfky97KxNiY6qoq1VRfpxu1daoqK5d31RM5mcbGxjQ+Pk4AQNwiAQBd534FgFCL
cB5VFecrKytTjR0Db8zTAsHiUqjhmLWVZW0eDGtt1aP5uXmt+jZ7xduCNS/bfbtOKclJamzvUniK
VafL3PCzjVB3wFuapt3JcADo6x/QWGeLcs9fUXXrDTU21qqi4eaWpW5naWpERcVVmpqdV/fd2yrM
zVNRcbnqmu7Jt/k5duJl0K/llTkVpBzVyayramupUXXHI02N3FNi3En9/N0vqrjZsWPzyDsxPNCv
h52dGhwe1eO+Ud2ob9bAwJDO59cqLq1MI+PTznSjo6MEAMQICQDoOvctAAQ3FFyZVOJviaqouKLM
9GLdv9eohrvd6rrboat52Tp2Il4tN5t0seCqujvv6FpJiX756WdlXK7Vk0d3VF59Td39PbpaWKjW
e9bu/4bKLuXp9v0ulebmqaPjrq5X1+rksRjV3u5SW3OFOvpGNTn2TItO40DbN/qtG7993p7efq0v
PlNNfpXKW+p063aTKhpa3vj8kSyMP9IXn32vu939OnvsiJKzylSWk6JvjqUpVJS8hZdB3a4pV1NT
s67W1autrUmVtfWqunJVT4ZH1dvTo/S0VI0vvyNFbGF0aFCtN2+p7U6XGm8/VFl5rRbnXyijsEE/
JxRqdc0Xmo4AgLhNAgC6zv0LAC+1vjqt+JO/6ULSGSWejtd//vYXffNjjE7FHNdnfz+k02fOKy05
WTExJ/XLb8l61HZH8TGxyszO1c9HY1RRVaR///tLZWfnKz2tULY1VZeWamLZr7ayYmUmpeizTz/V
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
AABJRU5ErkJggg==</Preview>
  <Form>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
rqG7OUbv/9z99f8BEexixAU5AQA=</Form>
  <Code><![CDATA[# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Applications found: " + $checkedlistboxListOfApplications.Items.Count
}

function Get-ApplicationsFromEntraID
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfApplications.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Applications from tenant..."
		
		# Get all managed identities
		$global:ApplicationIdentities = Get-MgApplication -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered applications from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $ApplicationIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedApplicationIdentities = $sortedIdentities
		$global:filteredApplicationIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of applications updated with a total of '$(Get-ApplicationsCount)' applications"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of applications"
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredApplicationIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Search-Applications
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfApplications.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredApplicationIdentities = $global:sortedApplicationIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredApplicationIdentities)
	{
		$checkedlistboxListOfApplications.Items.Add($identity.DisplayName)
	}
}

$formEntraIDApplicationMa_Load={
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
		
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formEntraIDApplicationMa -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formEntraIDApplicationMa -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$buttonConnectMicrosoftGraph_Click={
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfApplications.Items.Clear()
			# Update-ItemCountLabel TODO
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load application identityes after connected
				Get-ApplicationsFromEntraID
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				#Initialize-MasterItems
				
				# Populate the ServiceComboBox with service principals
				#Populate-ServiceComboBox
				
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$buttonReloadApplicationsListFromEntraID_Click={
	# Get data
	Get-ApplicationsFromEntraID
}

$checkedlistboxListOfApplications_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfApplications.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfApplications.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedSecretsAndPolicy.Clear()
	}	
}

$textboxSearchApplications_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearchApplications.Text
	
	# Lookup data
	Search-Applications -searchQuery $searchQuery
}

$buttonGetCurrentAssignedSe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedSecretsAndPolicy.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppSecrets -AppRegistrationID $ObjectID -AppRegistrationName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedSecretsAndPolicy.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$button_MainForm_About_Click={
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonRefreshPolicies_Click={
	
	try
	{
		$policies = Get-PolicyList
		$listboxPolicies.Items.Clear()
		foreach ($policy in $policies)
		{
			# Default values if credentials aren't set
			$pwdLifetimeDays = "n/a"
			$keyLifetimeDays = "n/a"
			$pwdState = "n/a"
			$keyState = "n/a"
			
			if ($policy.Restrictions)
			{
				$pwdCreds = $policy.Restrictions | Select-Object -ExpandProperty PasswordCredentials -ErrorAction SilentlyContinue
				if ($pwdCreds)
				{
					# For password lifetime
					$pwdCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'passwordLifetime' }
					if ($pwdCred)
					{
						if ($pwdCred.MaxLifetime -and $pwdCred.MaxLifetime.Days)
						{
							$pwdLifetimeDays = $pwdCred.MaxLifetime.Days
						}
						if ($pwdCred.State)
						{
							$pwdState = $pwdCred.State
						}
					}
					# For symmetric key lifetime
					$keyCred = $pwdCreds | Where-Object { $_.RestrictionType -eq 'symmetricKeyLifetime' }
					if ($keyCred)
					{
						if ($keyCred.MaxLifetime -and $keyCred.MaxLifetime.Days)
						{
							$keyLifetimeDays = $keyCred.MaxLifetime.Days
						}
						if ($keyCred.State)
						{
							$keyState = $keyCred.State
						}
					}
				}
			}
			
			$itemText = "Name: $($policy.DisplayName) | Enabled: $($policy.IsEnabled) | " +
			"Lifetime: Secret: $pwdLifetimeDays days ($pwdState) | " +
			"Certificate: $keyLifetimeDays days ($keyState), " +
			"Description: $($policy.Description) | ID: $($policy.Id)"
			$listboxPolicies.Items.Add($itemText)
		}
	}
	catch
	{
		Show-MsgBox -Prompt "Failed to retrieve policies." -Title "Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonAssignPolicyToSelect_Click={
	
	# Ensure an application is selected in the CheckedListBox.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting the format: "DisplayName (PolicyId)"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Get the target Application/Managed Identity ID from the textbox on the main form.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Assign Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Ask for user confirmation before assigning the policy.
		$confirmationMsg = "Are you sure you want to assign policy '$policyId' to application '$objectId'?"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Assign Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes")
		{
			return
		}
		
		try
		{
			# Use -ErrorAction Stop to force termination on errors.
			Assign-CustomAppManagementPolicyToApp -ObjectId $objectId -PolicyId $policyId -ErrorAction Stop
		}
		catch
		{
			$errorMessage = $_.Exception.Message
			if (-not $errorMessage -and $_.ErrorRecord.Exception)
			{
				$errorMessage = $_.ErrorRecord.Exception.Message
			}
			Show-MsgBox -Prompt "Failed to assign policy. Error: $errorMessage" -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Failed to extract Policy ID from the selected item." -Title "Assign Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonCreatePolicy_Click={
	
	try
	{
		# Retrieve values from textboxes
		$dispName = $textboxPolicyDisplayName.Text.Trim()
		$desc = $textboxPolicyDescription.Text.Trim()
		$pwdMax = $textboxPasswordMaxLifetime.Text.Trim()
		$keyMax = $textboxKeyMaxLifetime.Text.Trim()
		
		# Get the overall policy enabled state from the existing checkbox
		$globalEnabled = $checkboxPolicyEnabled.Checked
		
		# Get state for individual restrictions from the new checkboxes
		$pwdState = if ($checkboxPasswordLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		$keyState = if ($checkboxKeyLifetimeEnabled.Checked) { "enabled" }
		else { "disabled" }
		
		if ([string]::IsNullOrEmpty($dispName))
		{
			Show-MsgBox -Prompt "Display Name is required." -Title "Create Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		# Call the function and pass the additional state parameters.
		New-AppManagementPolicy -DisplayName $dispName `
								-Description $desc `
								-PasswordMaxLifetime $pwdMax `
								-KeyMaxLifetime $keyMax `
								-PasswordState $pwdState `
								-KeyState $keyState `
								-Enabled $globalEnabled
		
		# Log
		Write-Log -Level INFO -Message "Policy '$dispName' created successfully."
		
		Show-MsgBox -Prompt "Policy '$dispName' created successfully." -Title "Policy Creation" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the list
		$buttonRefreshPolicies.PerformClick()
	}
	catch
	{
		$errorMessage = $_.Exception.Message
		Show-MsgBox -Prompt "Failed to create policy. Error: $errorMessage" -Title "Policy Creation Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Error creating policy '$dispName': $errorMessage"
	}
}

$buttonDeleteSelectedPolicy_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Delete Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	# Use a single regex to capture Name, Description and ID
	if ($selected -match "Name:\s*(?<name>.*?)\s*\|.*Description:\s*(?<desc>.*?)\s*\|.*ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		$policyName = $matches['name'].Trim()
		$policyDesc = $matches['desc'].Trim()
		
		$confirmationMsg = "Are you sure you want to delete policy:" + "`r`n" +
		"Name: $policyName" + "`r`n" +
		"ID: $policyId" + "`r`n" +
		"Description: $policyDesc"
		$confirmation = Show-MsgBox -Prompt $confirmationMsg -Title "Confirm Delete" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			try
			{
				Remove-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
				
				# Log
				Write-Log -Level INFO -Message "Policy '$policyId' deleted successfully."
				
				Show-MsgBox -Prompt "Policy '$policyId' deleted successfully." -Title "Delete Policy" -Icon Information -BoxType OKOnly
				$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
			}
			catch
			{
				# Log
				Write-Log -Level ERROR -Message "Error deleting policy '$policyId': $($_.Exception.Message)"
				
				Show-MsgBox -Prompt "Error deleting policy '$policyId': $($_.Exception.Message)" -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
			}
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract policy details from the selected item." -Title "Delete Policy Error" -Icon Critical -BoxType OKOnly
		
		#Log
		Write-Log -Level ERROR -Message "Could not extract policy details from the selected item."
	}
}

$buttonTogglePolicyState_Click={
	
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "No policy selected. Please select a policy from the list." -Title "Toggle Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		try
		{
			$policy = Get-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -ErrorAction Stop
			$currentState = $policy.isEnabled
			$newState = -not $currentState
			$updateParams = @{ isEnabled = $newState }
			Update-MgPolicyAppManagementPolicy -AppManagementPolicyId $policyId -BodyParameter $updateParams -ErrorAction Stop
			$stateText = if ($newState) { "enabled" }
			else { "disabled" }
			Show-MsgBox -Prompt "Policy '$policyId' is now $stateText." -Title "Toggle Policy State" -Icon Information -BoxType OKOnly
			$buttonRefreshPolicies.PerformClick() # Refresh the list after the update
		}
		catch
		{
			Show-MsgBox -Prompt "Error toggling state for policy '$policyId': $($_.Exception.Message)" -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Toggle Policy Error" -Icon Critical -BoxType OKOnly
	}	
}

$buttonGetAssignedPolicy_Click = {
	
	# Retrieve the application ID from the textbox
	$appId = $textboxselectedIdentityID.Text.Trim()
	if ([string]::IsNullOrEmpty($appId))
	{
		Show-MsgBox -Prompt "Please provide an Application/Managed Identity ID." -Title "Get Assigned Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	try
	{
		$result = Get-AppAssignedPolicies -AppId $appId
		
		# Ensure the textbox is multiline so formatting is preserved
		$textboxAssingedSecretsAndPolicy.Multiline = $true
		$textboxAssingedSecretsAndPolicy.Text = $result
	}
	catch
	{
		Show-MsgBox -Prompt $_ -Title "Get Assigned Policy Error" -Icon Critical -BoxType OKOnly
	}
}

$buttonRemovedPolicyFromSel_Click={
	
	# Ensure an application is selected.
	if ($checkedlistboxListOfApplications.SelectedIndex -eq -1)
	{
		Show-MsgBox -Prompt "Please select an application from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Make sure a policy is selected.
	if ($listboxPolicies.SelectedItem -eq $null)
	{
		Show-MsgBox -Prompt "Please select a policy from the list." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
		return
	}
	
	# Expecting policy details in the format similar to:
	# "Name: ... | ... Description: ... | ... ID: <policy-id>"
	$selected = $listboxPolicies.SelectedItem.ToString()
	if ($selected -match "ID:\s*(?<id>[0-9a-fA-F\-]+)$")
	{
		$policyId = $matches['id'].Trim()
		# Retrieve the target Application/Managed Identity ID from the textbox.
		$objectId = $textboxselectedIdentityID.Text.Trim()
		if ([string]::IsNullOrEmpty($objectId))
		{
			Show-MsgBox -Prompt "No Application/Managed Identity is selected. Please select an application first." -Title "Remove Policy" -Icon Exclamation -BoxType OKOnly
			return
		}
		
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to remove policy '$policyId' from application '$objectId'?" -Title "Confirm Remove Policy" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -eq "Yes")
		{
			Remove-CustomAppManagementPolicyAssignmentFromApp -ObjectId $objectId -PolicyId $policyId
			$buttonRefreshPolicies.PerformClick() # Refresh the policy list if needed
		}
	}
	else
	{
		Show-MsgBox -Prompt "Could not extract Policy ID from the selected item." -Title "Remove Policy Error" -Icon Critical -BoxType OKOnly
	}
	
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
	
}

$openLogFolderToolStripMenuItem_Click={
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
	
}

$openLogFileForTodayToolStripMenuItem_Click={
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}
	
}

$myBlogToolStripMenuItem_Click={
	
	# Open blog
	Start-Process $global:BlogURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
	
}

$myWebpageToolStripMenuItem_Click={
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
	
}

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click={
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$btnRefresh_Click={
	
	# Load-CurrentDefaultApplicationPolicy
	
	$defaultPolicy = Load-CurrentDefaultApplicationPolicy
	Set-DefaultPolicyInputsFromConfig -policy $defaultPolicy
	
}

$buttonCreateDevPolicy_Click={
	
	Create-DevPolicy
	
	# Optionally refresh the list
	$buttonRefreshPolicies.PerformClick()
	
}

function Set-DefaultPolicyInputsFromConfig
{
	param (
		$policy # The policy object returned from the tenant
	)
	
	# Helper to extract a restriction by type
	function Get-Restriction ($restrictions, $type)
	{
		if ($restrictions)
		{
			return $restrictions | Where-Object { $_.restrictionType -eq $type }
		}
		return $null
	}
	
	$appRestrictions = $policy.applicationRestrictions
	$pwdCreds = $appRestrictions.passwordCredentials
	$keyCreds = $appRestrictions.keyCredentials
	
	# Password Lifetime
	$pwdLifetime = Get-Restriction $pwdCreds 'passwordLifetime'
	if ($pwdLifetime)
	{
		$txtPwdLifetime.Text = ($pwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpPwdDate.Value = [datetime]::Parse($pwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkPwdLifetimeEnabled.Checked = ($pwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtPwdLifetime.Text = ""
		$chkPwdLifetimeEnabled.Checked = $false
	}
	
	# Symmetric Key Lifetime
	$symKeyLifetime = Get-Restriction $pwdCreds 'symmetricKeyLifetime'
	if ($symKeyLifetime)
	{
		$txtSymmetricKeyLifetime.Text = ($symKeyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpSymmetricKeyDate.Value = [datetime]::Parse($symKeyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkSymmetricKeyLifetimeEnabled.Checked = ($symKeyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtSymmetricKeyLifetime.Text = ""
		$chkSymmetricKeyLifetimeEnabled.Checked = $false
	}
	
	# Custom Password Lifetime
	$customPwdLifetime = Get-Restriction $pwdCreds 'customPasswordAddition'
	if ($customPwdLifetime)
	{
		$txtCustomPasswordLifetime.Text = ($customPwdLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpCustomPasswordDate.Value = [datetime]::Parse($customPwdLifetime.restrictForAppsCreatedAfterDateTime)
		$chkCustomPasswordLifetimeEnabled.Checked = ($customPwdLifetime.state -eq 'enabled')
	}
	else
	{
		$txtCustomPasswordLifetime.Text = ""
		$chkCustomPasswordLifetimeEnabled.Checked = $false
	}
	
	# Key Lifetime (asymmetric)
	$keyLifetime = Get-Restriction $keyCreds 'asymmetricKeyLifetime'
	if ($keyLifetime)
	{
		$txtKeyLifetime.Text = ($keyLifetime.maxLifetime -replace '^P(\d+)D$', '$1')
		$dtpKeyDate.Value = [datetime]::Parse($keyLifetime.restrictForAppsCreatedAfterDateTime)
		$chkKeyLifetimeEnabled.Checked = ($keyLifetime.state -eq 'enabled')
	}
	else
	{
		$txtKeyLifetime.Text = ""
		$chkKeyLifetimeEnabled.Checked = $false
	}
}

function Convert-ToIsoDuration
{
	param ([string]$input)
	
	Write-Log -Level INFO -Message "Convert-ToIsoDuration received: '$input' (type: $($input.GetType().FullName))"
	if ([string]::IsNullOrWhiteSpace($input)) { return $null }
	if ($input -match '^\d+$')
	{
		if ($input -eq '0') { return $null }
		$result = "P${input}D"
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$result'"
		return $result
	}
	if ($input -match '^P(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$')
	{
		Write-Log -Level INFO -Message "Convert-ToIsoDuration output: '$input'"
		return $input
	}
	Write-Log -Level INFO -Message "Convert-ToIsoDuration output: ''"
	return $null
}

$btnUpdate_Click = {
	try
	{
		# Collect main policy properties from UI
		$displayName = $txtDefaultPolicyDisplayName.Text.Trim()
		$description = $txtDefaultPolicyDescription.Text.Trim()
		$isEnabled = $chkEnabled.Checked
		
		# Password Credentials Restrictions
		$passwordCredentials = @()
		
		# passwordLifetime
		$pwdLifetimeInput = $txtPwdLifetime.Text
		if ($null -eq $pwdLifetimeInput) { $pwdLifetimeInput = "" }
		if ($pwdLifetimeInput -is [array]) { $pwdLifetimeInput = $pwdLifetimeInput -join '' }
		$pwdLifetimeInput = $pwdLifetimeInput.ToString().Trim()
		if ($pwdLifetimeInput -match '^\d+$')
		{
			$pwdLifetime = "P$pwdLifetimeInput" + "D"
		}
		else
		{
			$pwdLifetime = $pwdLifetimeInput
		}
		if ($pwdLifetimeInput -and -not $pwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordLifetime"
				maxLifetime						    = $pwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# customPasswordLifetime
		$customPwdLifetimeInput = $txtCustomPasswordLifetime.Text
		if ($null -eq $customPwdLifetimeInput) { $customPwdLifetimeInput = "" }
		if ($customPwdLifetimeInput -is [array]) { $customPwdLifetimeInput = $customPwdLifetimeInput -join '' }
		$customPwdLifetimeInput = $customPwdLifetimeInput.ToString().Trim()
		if ($customPwdLifetimeInput -match '^\d+$')
		{
			$customPwdLifetime = "P$customPwdLifetimeInput" + "D"
		}
		else
		{
			$customPwdLifetime = $customPwdLifetimeInput
		}
		if ($customPwdLifetimeInput -and -not $customPwdLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# symmetricKeyLifetime
		$symmetricKeyLifetimeInput = $txtSymmetricKeyLifetime.Text
		if ($null -eq $symmetricKeyLifetimeInput) { $symmetricKeyLifetimeInput = "" }
		if ($symmetricKeyLifetimeInput -is [array]) { $symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput -join '' }
		$symmetricKeyLifetimeInput = $symmetricKeyLifetimeInput.ToString().Trim()
		if ($symmetricKeyLifetimeInput -match '^\d+$')
		{
			$symmetricKeyLifetime = "P$symmetricKeyLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyLifetime = $symmetricKeyLifetimeInput
		}
		if ($symmetricKeyLifetimeInput -and -not $symmetricKeyLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyLifetime"
				maxLifetime						    = $symmetricKeyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# passwordAddition
		$pwdAdditionLifetimeInput = $txtPwdAdditionLifetime.Text
		if ($null -eq $pwdAdditionLifetimeInput) { $pwdAdditionLifetimeInput = "" }
		if ($pwdAdditionLifetimeInput -is [array]) { $pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput -join '' }
		$pwdAdditionLifetimeInput = $pwdAdditionLifetimeInput.ToString().Trim()
		if ($pwdAdditionLifetimeInput -match '^\d+$')
		{
			$pwdAdditionLifetime = "P$pwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$pwdAdditionLifetime = $pwdAdditionLifetimeInput
		}
		if ($pwdAdditionLifetimeInput -and -not $pwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($pwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "passwordAddition"
				maxLifetime						    = $pwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpPwdDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# customPasswordAddition
		$customPwdAdditionLifetimeInput = $txtCustomPwdAdditionLifetime.Text
		if ($null -eq $customPwdAdditionLifetimeInput) { $customPwdAdditionLifetimeInput = "" }
		if ($customPwdAdditionLifetimeInput -is [array]) { $customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput -join '' }
		$customPwdAdditionLifetimeInput = $customPwdAdditionLifetimeInput.ToString().Trim()
		if ($customPwdAdditionLifetimeInput -match '^\d+$')
		{
			$customPwdAdditionLifetime = "P$customPwdAdditionLifetimeInput" + "D"
		}
		else
		{
			$customPwdAdditionLifetime = $customPwdAdditionLifetimeInput
		}
		if ($customPwdAdditionLifetimeInput -and -not $customPwdAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid custom password addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($customPwdAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "customPasswordAddition"
				maxLifetime						    = $customPwdAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpCustomPasswordDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# symmetricKeyAddition
		$symmetricKeyAdditionLifetimeInput = $txtSymmetricKeyAdditionLifetime.Text
		if ($null -eq $symmetricKeyAdditionLifetimeInput) { $symmetricKeyAdditionLifetimeInput = "" }
		if ($symmetricKeyAdditionLifetimeInput -is [array]) { $symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput -join '' }
		$symmetricKeyAdditionLifetimeInput = $symmetricKeyAdditionLifetimeInput.ToString().Trim()
		if ($symmetricKeyAdditionLifetimeInput -match '^\d+$')
		{
			$symmetricKeyAdditionLifetime = "P$symmetricKeyAdditionLifetimeInput" + "D"
		}
		else
		{
			$symmetricKeyAdditionLifetime = $symmetricKeyAdditionLifetimeInput
		}
		if ($symmetricKeyAdditionLifetimeInput -and -not $symmetricKeyAdditionLifetime)
		{
			Show-MsgBox -Prompt "Invalid symmetric key addition lifetime. Use a number (days) or ISO 8601 duration (e.g. P90D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($symmetricKeyAdditionLifetime)
		{
			$passwordCredentials += @{
				restrictionType					    = "symmetricKeyAddition"
				maxLifetime						    = $symmetricKeyAdditionLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpSymmetricKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# Key Credentials Restrictions
		$keyCredentials = @()
		$keyLifetimeInput = $txtKeyLifetime.Text
		if ($null -eq $keyLifetimeInput) { $keyLifetimeInput = "" }
		if ($keyLifetimeInput -is [array]) { $keyLifetimeInput = $keyLifetimeInput -join '' }
		$keyLifetimeInput = $keyLifetimeInput.ToString().Trim()
		if ($keyLifetimeInput -match '^\d+$')
		{
			$keyLifetime = "P$keyLifetimeInput" + "D"
		}
		else
		{
			$keyLifetime = $keyLifetimeInput
		}
		if ($keyLifetimeInput -and -not $keyLifetime)
		{
			Show-MsgBox -Prompt "Invalid key lifetime. Use a number (days) or ISO 8601 duration (e.g. P180D)." -Title "Input Error" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		if ($keyLifetime)
		{
			$keyCredentials += @{
				restrictionType					    = "asymmetricKeyLifetime"
				maxLifetime						    = $keyLifetime
				restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse($dtpKeyDate.Value.ToString("yyyy-MM-ddTHH:mm:ssZ"))
				state							    = "enabled"
			}
		}
		
		# Build the params hash
		$params = @{
			displayName			    = $displayName
			description			    = $description
			isEnabled			    = $isEnabled
			applicationRestrictions = @{
				passwordCredentials = $passwordCredentials
				keyCredentials	    = $keyCredentials
			}
		}
		
		Write-Log -Level INFO -Message ("Params JSON: " + ($params | ConvertTo-Json -Depth 10))
		
		try
		{
			Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $params -ErrorAction Stop
			
			Write-Log -Level INFO -Message "Policy updated successfully."
			
			Show-MsgBox -Prompt "Policy updated successfully." -Title "Policy Update" -Icon Information -BoxType OKOnly
			
		}
		catch
		{
			Show-MsgBox -Prompt "Error updating policy: $($_.Exception.Message)" -Title "Policy Update Error" -Icon Critical -BoxType OKOnly
			
			Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		}
		
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error updating policy: $($_.Exception.Message)"
		
		$txtDetails.Text = "Error updating policy: $($_.Exception.Message)"
	}
}

$tabpageTenantDefaultPolicy_Click={
	#TODO: Place custom script here
	
}

$buttonREsetDefaultPolicy_Click={
	
	try
	{
		$confirmation = Show-MsgBox -Prompt "Are you sure you want to reset the Default Tenant Policy to Microsoft defaults? This will remove all restrictions and enable the policy." `
									-Title "Reset Policy to Default" -Icon Question -BoxType YesNo -DefaultButton 2
		if ($confirmation -ne "Yes") { return }
		
		$defaultParams = @{
			displayName			    = "Default app management tenant policy"
			description			    = "Default tenant policy that enforces app management restrictions on applications and service principals. To apply policy to targeted resources, create a new policy under appManagementPolicies collection."
			isEnabled			    = $true
			applicationRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
			servicePrincipalRestrictions = @{
				passwordCredentials = @()
				keyCredentials	    = @()
			}
		}
		
		Update-MgPolicyDefaultAppManagementPolicy -BodyParameter $defaultParams -ErrorAction Stop
		
		Write-Log -Level INFO -Message "Default tenant policy has been reset to Microsoft defaults."
		
		Show-MsgBox -Prompt "Default tenant policy has been reset to Microsoft defaults." -Title "Policy Reset" -Icon Information -BoxType OKOnly
				
		# Optionally refresh the UI
		Load-CurrentDefaultApplicationPolicy
	}
	catch
	{
		Show-MsgBox -Prompt "Error resetting policy: $($_.Exception.Message)" -Title "Policy Reset Error" -Icon Exclamation -BoxType OKOnly

		Write-Log -Level ERROR -Message "Error resetting policy: $($_.Exception.Message)"
	}	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>